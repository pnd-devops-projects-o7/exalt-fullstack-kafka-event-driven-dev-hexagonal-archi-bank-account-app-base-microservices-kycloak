{"version":3,"file":"ClientScopeTypes-Cr5mTApE.js","sources":["../../../../../../../src/components/client-scope/ClientScopeTypes.tsx"],"sourcesContent":["import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\n\nimport KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport type { TFunction } from \"i18next\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toUpperCase } from \"../../util\";\nimport {\n  DropdownItem,\n  MenuToggle,\n  Select,\n  SelectOption,\n  SelectProps,\n} from \"@patternfly/react-core\";\n\nexport enum ClientScope {\n  default = \"default\",\n  optional = \"optional\",\n}\n\nexport enum AllClientScopes {\n  none = \"none\",\n}\n\nexport type ClientScopeType = ClientScope;\nexport type AllClientScopeType = ClientScope | AllClientScopes;\n\nconst clientScopeTypes = Object.keys(ClientScope);\nexport const allClientScopeTypes = Object.keys({\n  ...AllClientScopes,\n  ...ClientScope,\n}) as AllClientScopeType[];\n\nexport const clientScopeTypesSelectOptions = (\n  t: TFunction,\n  scopeTypes: string[] | undefined = clientScopeTypes,\n) =>\n  scopeTypes.map((type) => (\n    <SelectOption key={type} value={type}>\n      {t(`clientScopeType.${type}`)}\n    </SelectOption>\n  ));\n\nexport const clientScopeTypesDropdown = (\n  t: TFunction,\n  onClick: (scope: ClientScopeType) => void,\n) =>\n  clientScopeTypes.map((type) => (\n    <DropdownItem key={type} onClick={() => onClick(type as ClientScopeType)}>\n      {t(`clientScopeType.${type}`)}\n    </DropdownItem>\n  ));\n\ntype CellDropdownProps = Omit<SelectProps, \"toggle\"> & {\n  clientScope: ClientScopeRepresentation;\n  type: ClientScopeType | AllClientScopeType;\n  all?: boolean;\n  onSelect: (value: ClientScopeType | AllClientScopeType) => void;\n  isDisabled?: boolean;\n};\n\nexport const CellDropdown = ({\n  clientScope,\n  type,\n  onSelect,\n  all = false,\n  isDisabled,\n  ...props\n}: CellDropdownProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Select\n      key={clientScope.id}\n      toggle={(ref) => (\n        <MenuToggle\n          data-testid=\"cell-dropdown\"\n          className={`keycloak__client-scope__${type}`}\n          ref={ref}\n          onClick={() => setOpen(!open)}\n          isExpanded={open}\n          isDisabled={isDisabled}\n        >\n          {t(`clientScopeType.${type}`)}\n        </MenuToggle>\n      )}\n      isOpen={open}\n      onOpenChange={(isOpen) => setOpen(isOpen)}\n      selected={[type]}\n      onSelect={(_, value) => {\n        onSelect(\n          all ? (value as ClientScopeType) : (value as AllClientScopeType),\n        );\n        setOpen(false);\n      }}\n      {...props}\n    >\n      {clientScopeTypesSelectOptions(\n        t,\n        all ? allClientScopeTypes : clientScopeTypes,\n      )}\n    </Select>\n  );\n};\n\nexport type ClientScopeDefaultOptionalType = ClientScopeRepresentation & {\n  type: AllClientScopeType;\n};\n\nexport const changeScope = async (\n  adminClient: KeycloakAdminClient,\n  clientScope: ClientScopeDefaultOptionalType,\n  changeTo: AllClientScopeType,\n) => {\n  await removeScope(adminClient, clientScope);\n  await addScope(adminClient, clientScope, changeTo);\n};\n\nconst castAdminClient = (adminClient: KeycloakAdminClient) =>\n  adminClient.clientScopes as unknown as {\n    [index: string]: (params: { id: string }) => Promise<void>;\n  };\n\nexport const removeScope = async (\n  adminClient: KeycloakAdminClient,\n  clientScope: ClientScopeDefaultOptionalType,\n) => {\n  if (clientScope.type !== AllClientScopes.none)\n    await castAdminClient(adminClient)[\n      `delDefault${\n        clientScope.type === ClientScope.optional ? \"Optional\" : \"\"\n      }ClientScope`\n    ]({\n      id: clientScope.id!,\n    });\n};\n\nconst addScope = async (\n  adminClient: KeycloakAdminClient,\n  clientScope: ClientScopeDefaultOptionalType,\n  type: AllClientScopeType,\n) => {\n  if (type !== AllClientScopes.none)\n    await castAdminClient(adminClient)[\n      `addDefault${type === ClientScope.optional ? \"Optional\" : \"\"}ClientScope`\n    ]({\n      id: clientScope.id!,\n    });\n};\n\nexport const changeClientScope = async (\n  adminClient: KeycloakAdminClient,\n  clientId: string,\n  clientScope: ClientScopeRepresentation,\n  type: AllClientScopeType,\n  changeTo: ClientScopeType,\n) => {\n  if (type !== \"none\") {\n    await removeClientScope(adminClient, clientId, clientScope, type);\n  }\n  await addClientScope(adminClient, clientId, clientScope, changeTo);\n};\n\nexport const removeClientScope = async (\n  adminClient: KeycloakAdminClient,\n  clientId: string,\n  clientScope: ClientScopeRepresentation,\n  type: ClientScope,\n) => {\n  const methodName = `del${toUpperCase(type)}ClientScope` as const;\n\n  await adminClient.clients[methodName]({\n    id: clientId,\n    clientScopeId: clientScope.id!,\n  });\n};\n\nexport const addClientScope = async (\n  adminClient: KeycloakAdminClient,\n  clientId: string,\n  clientScope: ClientScopeRepresentation,\n  type: ClientScopeType,\n) => {\n  const methodName = `add${toUpperCase(type)}ClientScope` as const;\n\n  await adminClient.clients[methodName]({\n    id: clientId,\n    clientScopeId: clientScope.id!,\n  });\n};\n"],"names":["ClientScope","AllClientScopes","clientScopeTypes","allClientScopeTypes","clientScopeTypesSelectOptions","t","scopeTypes","type","SelectOption","clientScopeTypesDropdown","onClick","jsx","DropdownItem","CellDropdown","clientScope","onSelect","all","isDisabled","props","useTranslation","open","setOpen","useState","Select","ref","MenuToggle","isOpen","_","value","changeScope","adminClient","changeTo","removeScope","addScope","castAdminClient","changeClientScope","clientId","removeClientScope","addClientScope","methodName","toUpperCase"],"mappings":"uJAeY,IAAAA,GAAAA,IACVA,EAAA,QAAU,UACVA,EAAA,SAAW,WAFDA,IAAAA,GAAA,CAAA,CAAA,EAKAC,GAAAA,IACVA,EAAA,KAAO,OADGA,IAAAA,GAAA,CAAA,CAAA,EAOZ,MAAMC,EAAmB,OAAO,KAAKF,CAAW,EACnCG,EAAsB,OAAO,KAAK,CAC7C,GAAGF,EACH,GAAGD,CACL,CAAC,EAEYI,EAAgC,CAC3CC,EACAC,EAAmCJ,IAEnCI,EAAW,IAAKC,KACbC,EAAwB,CAAA,MAAOD,EAC7B,SAAEF,EAAA,mBAAmBE,CAAI,EAAE,GADXA,CAEnB,CACD,EAEUE,EAA2B,CACtCJ,EACAK,IAEAR,EAAiB,IAAKK,GACnBI,EAAAC,EAAA,CAAwB,QAAS,IAAMF,EAAQH,CAAuB,EACpE,SAAAF,EAAE,mBAAmBE,CAAI,EAAE,GADXA,CAEnB,CACD,EAUUM,EAAe,CAAC,CAC3B,YAAAC,EACA,KAAAP,EACA,SAAAQ,EACA,IAAAC,EAAM,GACN,WAAAC,EACA,GAAGC,CACL,IAAyB,CACjB,KAAA,CAAE,EAAAb,GAAMc,IACR,CAACC,EAAMC,CAAO,EAAIC,EAAS,EAAK,EAGpC,OAAAX,EAACY,EAAA,CAEC,OAASC,GACPb,EAACc,EAAA,CACC,cAAY,gBACZ,UAAW,2BAA2BlB,CAAI,GAC1C,IAAAiB,EACA,QAAS,IAAMH,EAAQ,CAACD,CAAI,EAC5B,WAAYA,EACZ,WAAAH,EAEC,SAAAZ,EAAE,mBAAmBE,CAAI,EAAE,CAAA,CAC9B,EAEF,OAAQa,EACR,aAAeM,GAAWL,EAAQK,CAAM,EACxC,SAAU,CAACnB,CAAI,EACf,SAAU,CAACoB,EAAGC,IAAU,CACtBb,EACSa,CAA6B,EAEtCP,EAAQ,EAAK,CACf,EACC,GAAGH,EAEH,SAAAd,EACCC,EACAW,EAAMb,EAAsBD,CAC9B,CAAA,EA3BKY,EAAY,EAAA,CA8BvB,EAMae,EAAc,MACzBC,EACAhB,EACAiB,IACG,CACG,MAAAC,EAAYF,EAAahB,CAAW,EACpC,MAAAmB,EAASH,EAAahB,EAAaiB,CAAQ,CACnD,EAEMG,EAAmBJ,GACvBA,EAAY,aAIDE,EAAc,MACzBF,EACAhB,IACG,CACCA,EAAY,OAAS,QACjB,MAAAoB,EAAgBJ,CAAW,EAC/B,aACEhB,EAAY,OAAS,WAAuB,WAAa,EAC3D,aACF,EAAE,CACA,GAAIA,EAAY,EAAA,CACjB,CACL,EAEMmB,EAAW,MACfH,EACAhB,EACAP,IACG,CACCA,IAAS,QACL,MAAA2B,EAAgBJ,CAAW,EAC/B,aAAavB,IAAS,WAAuB,WAAa,EAAE,aAC9D,EAAE,CACA,GAAIO,EAAY,EAAA,CACjB,CACL,EAEaqB,EAAoB,MAC/BL,EACAM,EACAtB,EACAP,EACAwB,IACG,CACCxB,IAAS,QACX,MAAM8B,EAAkBP,EAAaM,EAAUtB,EAAaP,CAAI,EAElE,MAAM+B,EAAeR,EAAaM,EAAUtB,EAAaiB,CAAQ,CACnE,EAEaM,EAAoB,MAC/BP,EACAM,EACAtB,EACAP,IACG,CACH,MAAMgC,EAAa,MAAMC,EAAYjC,CAAI,CAAC,cAEpC,MAAAuB,EAAY,QAAQS,CAAU,EAAE,CACpC,GAAIH,EACJ,cAAetB,EAAY,EAAA,CAC5B,CACH,EAEawB,EAAiB,MAC5BR,EACAM,EACAtB,EACAP,IACG,CACH,MAAMgC,EAAa,MAAMC,EAAYjC,CAAI,CAAC,cAEpC,MAAAuB,EAAY,QAAQS,CAAU,EAAE,CACpC,GAAIH,EACJ,cAAetB,EAAY,EAAA,CAC5B,CACH"}