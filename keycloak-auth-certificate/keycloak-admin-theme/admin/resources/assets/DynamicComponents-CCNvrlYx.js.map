{"version":3,"file":"DynamicComponents-CCNvrlYx.js","sources":["../../../../../../../src/components/dynamic/BooleanComponent.tsx","../../../../../../../src/components/dynamic/ClientSelectComponent.tsx","../../../../../../../src/components/dynamic/FileComponent.tsx","../../../../../../../src/components/dynamic/GroupComponent.tsx","../../../../../../../src/components/dynamic/ListComponent.tsx","../../../../../../../src/components/dynamic/MapComponent.tsx","../../../../../../../src/components/dynamic/MultivaluedListComponent.tsx","../../../../../../../src/components/dynamic/MultivaluedStringComponent.tsx","../../../../../../../src/components/dynamic/PasswordComponent.tsx","../../../../../../../src/components/dynamic/RoleComponent.tsx","../../../../../../../src/components/dynamic/ScriptComponent.tsx","../../../../../../../src/components/dynamic/StringComponent.tsx","../../../../../../../src/components/dynamic/TextComponent.tsx","../../../../../../../src/components/dynamic/UrlComponent.tsx","../../../../../../../src/components/dynamic/UserProfileAttributeListComponent.tsx","../../../../../../../src/components/dynamic/components.ts","../../../../../../../src/components/dynamic/DynamicComponents.tsx"],"sourcesContent":["import { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const BooleanComponent = ({\n  name,\n  label,\n  helpText,\n  isDisabled = false,\n  defaultValue,\n  isNew = true,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      hasNoPaddingTop\n      label={t(label!)}\n      fieldId={name!}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n    >\n      <Controller\n        name={convertToName(name!)}\n        data-testid={name}\n        defaultValue={isNew ? defaultValue : false}\n        control={control}\n        render={({ field }) => (\n          <Switch\n            id={name!}\n            isDisabled={isDisabled}\n            label={t(\"on\")}\n            labelOff={t(\"off\")}\n            isChecked={\n              field.value === \"true\" ||\n              field.value === true ||\n              field.value?.[0] === \"true\"\n            }\n            onChange={(_event, value) => field.onChange(\"\" + value)}\n            data-testid={name}\n            aria-label={t(label!)}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import type { ComponentProps } from \"./components\";\nimport { ClientSelect } from \"../client/ClientSelect\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const ClientSelectComponent = (props: ComponentProps) => (\n  <ClientSelect {...props} name={convertToName(props.name!)} />\n);\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { FileUpload } from \"../json-file-upload/patternfly/FileUpload\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const FileComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  required,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  const [filename, setFilename] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n      isRequired={required}\n    >\n      <Controller\n        name={convertToName(name!)}\n        control={control}\n        defaultValue={defaultValue || \"\"}\n        render={({ field }) => (\n          <FileUpload\n            id={name!}\n            value={field.value}\n            type=\"text\"\n            filename={filename}\n            isDisabled={isDisabled}\n            onFileInputChange={(_, file) => setFilename(file.name)}\n            onReadStarted={() => setIsLoading(true)}\n            onReadFinished={() => setIsLoading(false)}\n            onClearClick={() => {\n              field.onChange(\"\");\n              setFilename(\"\");\n            }}\n            isLoading={isLoading}\n            allowEditingUploadedText={false}\n            onChange={(value, filename) => {\n              field.onChange(value);\n              setFilename(filename);\n            }}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  Button,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  InputGroup,\n  InputGroupItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { GroupPickerDialog } from \"../group/GroupPickerDialog\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const GroupComponent = ({\n  name,\n  label,\n  helpText,\n  required,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n  const [groups, setGroups] = useState<GroupRepresentation[]>();\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      name={convertToName(name!)}\n      defaultValue=\"\"\n      control={control}\n      render={({ field }) => (\n        <>\n          {open && (\n            <GroupPickerDialog\n              type=\"selectOne\"\n              text={{\n                title: \"selectGroup\",\n                ok: \"select\",\n              }}\n              onConfirm={(groups) => {\n                field.onChange(groups?.[0].path);\n                setGroups(groups);\n                setOpen(false);\n              }}\n              onClose={() => setOpen(false)}\n              filterGroups={groups}\n            />\n          )}\n\n          <FormGroup\n            label={t(label!)}\n            labelIcon={\n              <HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />\n            }\n            fieldId={name!}\n            isRequired={required}\n          >\n            <InputGroup>\n              <InputGroupItem>\n                <ChipGroup>\n                  {field.value && (\n                    <Chip onClick={() => field.onChange(undefined)}>\n                      {field.value}\n                    </Chip>\n                  )}\n                </ChipGroup>\n              </InputGroupItem>\n              <InputGroupItem>\n                <Button\n                  id=\"kc-join-groups-button\"\n                  onClick={() => setOpen(!open)}\n                  variant=\"secondary\"\n                  data-testid=\"join-groups-button\"\n                >\n                  {t(\"selectGroup\")}\n                </Button>\n              </InputGroupItem>\n            </InputGroup>\n          </FormGroup>\n        </>\n      )}\n    />\n  );\n};\n","import {\n  HelpItem,\n  KeycloakSelect,\n  SelectVariant,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { FormGroup, SelectOption } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { convertToName } from \"./DynamicComponents\";\nimport type { ComponentProps } from \"./components\";\n\nexport const ListComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  options,\n  required,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n      isRequired={required}\n    >\n      <Controller\n        name={convertToName(name!)}\n        data-testid={name}\n        defaultValue={defaultValue || options?.[0] || \"\"}\n        control={control}\n        render={({ field }) => (\n          <KeycloakSelect\n            toggleId={name}\n            isDisabled={isDisabled}\n            onToggle={(toggle) => setOpen(toggle)}\n            onSelect={(value) => {\n              field.onChange(value as string);\n              setOpen(false);\n            }}\n            selections={field.value}\n            variant={SelectVariant.single}\n            aria-label={t(label!)}\n            isOpen={open}\n          >\n            {options?.map((option) => (\n              <SelectOption\n                selected={option === field.value}\n                key={option}\n                value={option}\n              >\n                {option}\n              </SelectOption>\n            ))}\n          </KeycloakSelect>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { HelpItem, generateId } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionList,\n  ActionListItem,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateFooter,\n  Flex,\n  FlexItem,\n  FormGroup,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useState } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { KeyValueType } from \"../key-value-form/key-value-convert\";\nimport { convertToName } from \"./DynamicComponents\";\nimport type { ComponentProps } from \"./components\";\n\ntype IdKeyValueType = KeyValueType & {\n  id: number;\n};\n\nexport const MapComponent = ({\n  name,\n  label,\n  helpText,\n  required,\n  isDisabled,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n\n  const { getValues, setValue, register } = useFormContext();\n  const [map, setMap] = useState<IdKeyValueType[]>([]);\n  const fieldName = convertToName(name!);\n\n  useEffect(() => {\n    register(fieldName);\n    const values: KeyValueType[] = JSON.parse(getValues(fieldName) || \"[]\");\n    setMap(values.map((value) => ({ ...value, id: generateId() })));\n  }, []);\n\n  const appendNew = () =>\n    setMap([...map, { key: \"\", value: \"\", id: generateId() }]);\n\n  const update = (val = map) => {\n    setValue(\n      fieldName,\n      JSON.stringify(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        val.filter((e) => e.key !== \"\").map(({ id, ...entry }) => entry),\n      ),\n    );\n  };\n\n  const updateKey = (index: number, key: string) => {\n    updateEntry(index, { ...map[index], key });\n  };\n\n  const updateValue = (index: number, value: string) => {\n    updateEntry(index, { ...map[index], value });\n  };\n\n  const updateEntry = (index: number, entry: IdKeyValueType) =>\n    setMap([...map.slice(0, index), entry, ...map.slice(index + 1)]);\n\n  const remove = (index: number) => {\n    const value = [...map.slice(0, index), ...map.slice(index + 1)];\n    setMap(value);\n    update(value);\n  };\n\n  return map.length !== 0 ? (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n      isRequired={required}\n    >\n      <Flex direction={{ default: \"column\" }}>\n        <Flex>\n          <FlexItem\n            grow={{ default: \"grow\" }}\n            spacer={{ default: \"spacerNone\" }}\n          >\n            <strong>{t(\"key\")}</strong>\n          </FlexItem>\n          <FlexItem grow={{ default: \"grow\" }}>\n            <strong>{t(\"value\")}</strong>\n          </FlexItem>\n        </Flex>\n        {map.map((attribute, index) => (\n          <Flex key={attribute.id} data-testid=\"row\">\n            <FlexItem grow={{ default: \"grow\" }}>\n              <TextInput\n                name={`${fieldName}.${index}.key`}\n                placeholder={t(\"keyPlaceholder\")}\n                aria-label={t(\"key\")}\n                defaultValue={attribute.key}\n                data-testid={`${fieldName}.${index}.key`}\n                onChange={(_event, value) => updateKey(index, value)}\n                onBlur={() => update()}\n              />\n            </FlexItem>\n            <FlexItem\n              grow={{ default: \"grow\" }}\n              spacer={{ default: \"spacerNone\" }}\n            >\n              <TextInput\n                name={`${fieldName}.${index}.value`}\n                placeholder={t(\"valuePlaceholder\")}\n                aria-label={t(\"value\")}\n                defaultValue={attribute.value}\n                data-testid={`${fieldName}.${index}.value`}\n                onChange={(_event, value) => updateValue(index, value)}\n                onBlur={() => update()}\n              />\n            </FlexItem>\n            <FlexItem>\n              <Button\n                variant=\"link\"\n                title={t(\"removeAttribute\")}\n                isDisabled={isDisabled}\n                onClick={() => remove(index)}\n                data-testid={`${fieldName}.${index}.remove`}\n              >\n                <MinusCircleIcon />\n              </Button>\n            </FlexItem>\n          </Flex>\n        ))}\n      </Flex>\n      <ActionList>\n        <ActionListItem>\n          <Button\n            data-testid={`${fieldName}-add-row`}\n            className=\"pf-v5-u-px-0 pf-v5-u-mt-sm\"\n            variant=\"link\"\n            icon={<PlusCircleIcon />}\n            onClick={() => appendNew()}\n          >\n            {t(\"addAttribute\", { label })}\n          </Button>\n        </ActionListItem>\n      </ActionList>\n    </FormGroup>\n  ) : (\n    <EmptyState\n      data-testid={`${name}-empty-state`}\n      className=\"pf-v5-u-p-0\"\n      variant=\"xs\"\n    >\n      <EmptyStateBody>{t(\"missingAttributes\", { label })}</EmptyStateBody>\n      <EmptyStateFooter>\n        <Button\n          data-testid={`${name}-add-row`}\n          variant=\"link\"\n          icon={<PlusCircleIcon />}\n          size=\"sm\"\n          onClick={appendNew}\n          isDisabled={isDisabled}\n        >\n          {t(\"addAttribute\", { label })}\n        </Button>\n      </EmptyStateFooter>\n    </EmptyState>\n  );\n};\n","import {\n  HelpItem,\n  KeycloakSelect,\n  SelectVariant,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { FormGroup, SelectOption } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { convertToName } from \"./DynamicComponents\";\nimport type { ComponentProps } from \"./components\";\n\nfunction stringToMultiline(value?: string): string[] {\n  return typeof value === \"string\" && value.length > 0 ? value.split(\"##\") : [];\n}\n\nfunction toStringValue(formValue: string[]): string {\n  return formValue.join(\"##\");\n}\n\nexport const MultiValuedListComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  options,\n  isDisabled = false,\n  stringify,\n  required,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n      isRequired={required}\n    >\n      <Controller\n        name={convertToName(name!)}\n        control={control}\n        defaultValue={\n          stringify ? defaultValue || \"\" : defaultValue ? [defaultValue] : []\n        }\n        render={({ field }) => (\n          <KeycloakSelect\n            toggleId={name}\n            data-testid={name}\n            isDisabled={isDisabled}\n            chipGroupProps={{\n              numChips: 3,\n              expandedText: t(\"hide\"),\n              collapsedText: t(\"showRemaining\"),\n            }}\n            variant={SelectVariant.typeaheadMulti}\n            typeAheadAriaLabel=\"Select\"\n            onToggle={(isOpen) => setOpen(isOpen)}\n            selections={\n              stringify ? stringToMultiline(field.value) : field.value\n            }\n            onSelect={(v) => {\n              const option = v.toString();\n              const values = stringify\n                ? stringToMultiline(field.value)\n                : field.value;\n              let newValue;\n              if (values.includes(option)) {\n                newValue = values.filter((item: string) => item !== option);\n              } else {\n                newValue = [...values, option];\n              }\n              field.onChange(stringify ? toStringValue(newValue) : newValue);\n            }}\n            onClear={() => {\n              field.onChange(stringify ? \"\" : []);\n            }}\n            isOpen={open}\n            aria-label={t(label!)}\n          >\n            {options?.map((option) => (\n              <SelectOption key={option} value={option}>\n                {option}\n              </SelectOption>\n            ))}\n          </KeycloakSelect>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { FormGroup } from \"@patternfly/react-core\";\n\nimport type { ComponentProps } from \"./components\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { MultiLineInput } from \"../multi-line-input/MultiLineInput\";\nimport { convertToName } from \"./DynamicComponents\";\n\nfunction convertDefaultValue(formValue?: any): string[] {\n  return formValue && Array.isArray(formValue) ? formValue : [formValue];\n}\n\nexport const MultiValuedStringComponent = ({\n  name,\n  label,\n  defaultValue,\n  helpText,\n  stringify,\n  required,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const fieldName = convertToName(name!);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n      isRequired={required}\n    >\n      <MultiLineInput\n        aria-label={t(label!)}\n        name={fieldName}\n        isDisabled={isDisabled}\n        defaultValue={convertDefaultValue(defaultValue)}\n        addButtonLabel={t(\"addMultivaluedLabel\", {\n          fieldLabel: t(label!).toLowerCase(),\n        })}\n        stringify={stringify}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { PasswordControl } from \"@keycloak/keycloak-ui-shared\";\nimport { convertToName } from \"./DynamicComponents\";\nimport type { ComponentProps } from \"./components\";\n\nexport const PasswordComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  required,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <PasswordControl\n      name={convertToName(name!)}\n      label={t(label!)}\n      labelIcon={t(helpText!)}\n      isDisabled={isDisabled}\n      defaultValue={defaultValue?.toString()}\n      rules={{\n        required: { value: !!required, message: t(\"required\") },\n      }}\n    />\n  );\n};\n","import {\n  Button,\n  Chip,\n  FormGroup,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport useToggle from \"../../utils/useToggle\";\nimport { FormErrorText, HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { AddRoleMappingModal } from \"../role-mapping/AddRoleMappingModal\";\nimport { Row, ServiceRole } from \"../role-mapping/RoleMapping\";\nimport { convertToName } from \"./DynamicComponents\";\nimport type { ComponentProps } from \"./components\";\n\nconst parseValue = (value: any) =>\n  value?.includes(\".\") ? value.split(\".\") : [\"\", value || \"\"];\n\nconst parseRow = (value: Row) =>\n  value.client?.clientId\n    ? `${value.client.clientId}.${value.role.name}`\n    : value.role.name;\n\nexport const RoleComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  required,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n\n  const [openModal, toggleModal] = useToggle();\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext();\n\n  const fieldName = convertToName(name!);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n      isRequired={required}\n    >\n      <Controller\n        name={fieldName}\n        defaultValue={defaultValue || \"\"}\n        control={control}\n        render={({ field }) => (\n          <Split>\n            {openModal && (\n              <AddRoleMappingModal\n                id=\"id\"\n                type=\"roles\"\n                name={name}\n                onAssign={(rows) => field.onChange(parseRow(rows[0]))}\n                onClose={toggleModal}\n                isRadio\n              />\n            )}\n\n            {field.value !== \"\" && (\n              <SplitItem>\n                <Chip textMaxWidth=\"500px\" onClick={() => field.onChange(\"\")}>\n                  <ServiceRole\n                    role={{ name: parseValue(field.value)[1] }}\n                    client={{ clientId: parseValue(field.value)[0] }}\n                  />\n                </Chip>\n              </SplitItem>\n            )}\n            <SplitItem>\n              <Button\n                onClick={toggleModal}\n                variant=\"secondary\"\n                data-testid=\"add-roles\"\n                disabled={isDisabled}\n              >\n                {t(\"selectRole.label\")}\n              </Button>\n            </SplitItem>\n          </Split>\n        )}\n      />\n      {errors[fieldName] && <FormErrorText message={t(\"required\")} />}\n    </FormGroup>\n  );\n};\n","import { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport { FormGroup } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const ScriptComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  required,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem\n          helpText={<span style={{ whiteSpace: \"pre-wrap\" }}>{helpText}</span>}\n          fieldLabelId={`${label}`}\n        />\n      }\n      fieldId={name!}\n      isRequired={required}\n    >\n      <Controller\n        name={convertToName(name!)}\n        defaultValue={defaultValue}\n        control={control}\n        render={({ field }) => (\n          <CodeEditor\n            id={name!}\n            data-testid={name}\n            isReadOnly={isDisabled}\n            type=\"text\"\n            onChange={field.onChange}\n            code={Array.isArray(field.value) ? field.value[0] : field.value}\n            height=\"600px\"\n            language={Language.javascript}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { useTranslation } from \"react-i18next\";\nimport { convertToName } from \"./DynamicComponents\";\nimport type { ComponentProps } from \"./components\";\n\nexport const StringComponent = ({\n  name,\n  label,\n  helpText,\n  ...props\n}: ComponentProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <TextControl\n      name={convertToName(name!)}\n      label={t(label!)}\n      labelIcon={t(helpText!)}\n      data-testid={name}\n      {...props}\n    />\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { KeycloakTextArea, HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { convertToName } from \"./DynamicComponents\";\nimport type { ComponentProps } from \"./components\";\n\nexport const TextComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  required,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const { register } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n      required={required}\n    >\n      <KeycloakTextArea\n        id={name!}\n        data-testid={name}\n        isDisabled={isDisabled}\n        defaultValue={defaultValue?.toString()}\n        {...register(convertToName(name!))}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport type { ComponentProps } from \"./components\";\nimport { FormattedLink } from \"../external-link/FormattedLink\";\n\nimport \"./url-component.css\";\n\nexport const UrlComponent = ({ name, label, helpText }: ComponentProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  const { value } = useWatch({\n    control,\n    name: name!,\n    defaultValue: \"\",\n  });\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      fieldId={name!}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      className=\"keycloak__identity-providers__url_component\"\n    >\n      <FormattedLink title={t(helpText!)} href={value} isInline />\n    </FormGroup>\n  );\n};\n","import type { UserProfileConfig } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport {\n  FormErrorText,\n  HelpItem,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { FormGroup } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { KeySelect } from \"../key-value-form/KeySelect\";\nimport { convertToName } from \"./DynamicComponents\";\nimport type { ComponentProps } from \"./components\";\n\nexport const UserProfileAttributeListComponent = ({\n  name,\n  label,\n  helpText,\n  required = false,\n}: ComponentProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const {\n    formState: { errors },\n  } = useFormContext();\n\n  const [config, setConfig] = useState<UserProfileConfig>();\n  const convertedName = convertToName(name!);\n\n  useFetch(\n    () => adminClient.users.getProfile(),\n    (cfg) => setConfig(cfg),\n    [],\n  );\n\n  const convert = (config?: UserProfileConfig) => {\n    if (!config?.attributes) return [];\n\n    return config.attributes.map((option) => ({\n      key: option.name!,\n      label: option.name!,\n    }));\n  };\n\n  if (!config) return null;\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      isRequired={required}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={label!} />}\n      fieldId={convertedName!}\n    >\n      <KeySelect\n        name={convertedName}\n        rules={required ? { required: true } : {}}\n        selectItems={convert(config)}\n      />\n      {errors[convertedName!] && <FormErrorText message={t(\"required\")} />}\n    </FormGroup>\n  );\n};\n","import type { ConfigPropertyRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigInfoRepresentation\";\nimport { FunctionComponent } from \"react\";\n\nimport { BooleanComponent } from \"./BooleanComponent\";\nimport { ClientSelectComponent } from \"./ClientSelectComponent\";\nimport { FileComponent } from \"./FileComponent\";\nimport { GroupComponent } from \"./GroupComponent\";\nimport { ListComponent } from \"./ListComponent\";\nimport { MapComponent } from \"./MapComponent\";\nimport { MultiValuedListComponent } from \"./MultivaluedListComponent\";\nimport { MultiValuedStringComponent } from \"./MultivaluedStringComponent\";\nimport { PasswordComponent } from \"./PasswordComponent\";\nimport { RoleComponent } from \"./RoleComponent\";\nimport { ScriptComponent } from \"./ScriptComponent\";\nimport { StringComponent } from \"./StringComponent\";\nimport { TextComponent } from \"./TextComponent\";\nimport { UrlComponent } from \"./UrlComponent\";\nimport { UserProfileAttributeListComponent } from \"./UserProfileAttributeListComponent\";\n\nexport type ComponentProps = Omit<ConfigPropertyRepresentation, \"type\"> & {\n  isDisabled?: boolean;\n  isNew?: boolean;\n  stringify?: boolean;\n};\n\ntype ComponentType =\n  | \"String\"\n  | \"Text\"\n  | \"boolean\"\n  | \"List\"\n  | \"Role\"\n  | \"Script\"\n  | \"Map\"\n  | \"Group\"\n  | \"MultivaluedList\"\n  | \"ClientList\"\n  | \"UserProfileAttributeList\"\n  | \"MultivaluedString\"\n  | \"File\"\n  | \"Password\"\n  | \"Url\";\n\nexport const COMPONENTS: {\n  [index in ComponentType]: FunctionComponent<ComponentProps>;\n} = {\n  String: StringComponent,\n  Text: TextComponent,\n  boolean: BooleanComponent,\n  List: ListComponent,\n  Role: RoleComponent,\n  Script: ScriptComponent,\n  Map: MapComponent,\n  Group: GroupComponent,\n  ClientList: ClientSelectComponent,\n  UserProfileAttributeList: UserProfileAttributeListComponent,\n  MultivaluedList: MultiValuedListComponent,\n  MultivaluedString: MultiValuedStringComponent,\n  File: FileComponent,\n  Password: PasswordComponent,\n  Url: UrlComponent,\n} as const;\n\nexport const isValidComponentType = (value: string): value is ComponentType =>\n  value in COMPONENTS;\n","import type { ConfigPropertyRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigInfoRepresentation\";\n\nimport { COMPONENTS, isValidComponentType } from \"./components\";\nimport { convertAttributeNameToForm } from \"../../util\";\n\ntype DynamicComponentProps = {\n  properties: ConfigPropertyRepresentation[];\n  stringify?: boolean;\n  isNew?: boolean;\n};\n\nexport const DynamicComponents = ({\n  properties,\n  ...rest\n}: DynamicComponentProps) => (\n  <>\n    {properties.map((property) => {\n      const componentType = property.type!;\n      if (isValidComponentType(componentType)) {\n        const Component = COMPONENTS[componentType];\n        return <Component key={property.name} {...property} {...rest} />;\n      } else {\n        console.warn(`There is no editor registered for ${componentType}`);\n      }\n    })}\n  </>\n);\n\nexport const convertToName = (name: string): string =>\n  convertAttributeNameToForm(`config.${name}`);\n"],"names":["BooleanComponent","name","label","helpText","isDisabled","defaultValue","isNew","t","useTranslation","control","useFormContext","jsx","FormGroup","HelpItem","Controller","convertToName","field","Switch","_event","value","ClientSelectComponent","props","ClientSelect","FileComponent","required","filename","setFilename","useState","isLoading","setIsLoading","FileUpload","_","file","GroupComponent","open","setOpen","groups","setGroups","jsxs","Fragment","GroupPickerDialog","InputGroup","InputGroupItem","ChipGroup","Chip","Button","ListComponent","options","KeycloakSelect","toggle","SelectVariant","option","SelectOption","MapComponent","getValues","setValue","register","map","setMap","fieldName","useEffect","values","generateId","appendNew","update","val","e","id","entry","updateKey","index","key","updateEntry","updateValue","remove","Flex","FlexItem","attribute","TextInput","MinusCircleIcon","ActionList","ActionListItem","PlusCircleIcon","EmptyState","EmptyStateBody","EmptyStateFooter","stringToMultiline","toStringValue","formValue","MultiValuedListComponent","stringify","isOpen","v","newValue","item","convertDefaultValue","MultiValuedStringComponent","MultiLineInput","PasswordComponent","PasswordControl","parseValue","parseRow","RoleComponent","openModal","toggleModal","useToggle","errors","Split","AddRoleMappingModal","rows","SplitItem","ServiceRole","FormErrorText","ScriptComponent","CodeEditor","Language","StringComponent","TextControl","TextComponent","KeycloakTextArea","UrlComponent","useWatch","FormattedLink","UserProfileAttributeListComponent","adminClient","useAdminClient","config","setConfig","convertedName","useFetch","cfg","convert","KeySelect","COMPONENTS","isValidComponentType","DynamicComponents","properties","rest","property","componentType","Component","convertAttributeNameToForm"],"mappings":"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"}