{"version":3,"file":"ClientDescription-CDXwCqe-.js","sources":["../../../../../../../src/clients/add/CapabilityConfig.tsx","../../../../../../../src/clients/ClientDescription.tsx"],"sourcesContent":["import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport {\n  Checkbox,\n  FormGroup,\n  Grid,\n  GridItem,\n  InputGroup,\n  Switch,\n  InputGroupItem,\n} from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport useIsFeatureEnabled, { Feature } from \"../../utils/useIsFeatureEnabled\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype CapabilityConfigProps = {\n  unWrap?: boolean;\n  protocol?: string;\n};\n\nexport const CapabilityConfig = ({\n  unWrap,\n  protocol: type,\n}: CapabilityConfigProps) => {\n  const { t } = useTranslation();\n  const { control, watch, setValue } = useFormContext<FormFields>();\n  const protocol = type || watch(\"protocol\");\n  const clientAuthentication = watch(\"publicClient\");\n  const authorization = watch(\"authorizationServicesEnabled\");\n  const isFeatureEnabled = useIsFeatureEnabled();\n\n  return (\n    <FormAccess\n      isHorizontal\n      role=\"manage-clients\"\n      unWrap={unWrap}\n      className=\"keycloak__capability-config__form\"\n      data-testid=\"capability-config-form\"\n    >\n      {protocol === \"openid-connect\" && (\n        <>\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"clientAuthentication\")}\n            fieldId=\"kc-authentication\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"authenticationHelp\")}\n                fieldLabelId=\"authentication\"\n              />\n            }\n          >\n            <Controller\n              name=\"publicClient\"\n              defaultValue={false}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  data-testid=\"authentication\"\n                  id=\"kc-authentication-switch\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={!field.value}\n                  onChange={(_event, value) => {\n                    field.onChange(!value);\n                    if (!value) {\n                      setValue(\"authorizationServicesEnabled\", false);\n                      setValue(\"serviceAccountsEnabled\", false);\n                      setValue(\n                        convertAttributeNameToForm<FormFields>(\n                          \"attributes.oidc.ciba.grant.enabled\",\n                        ),\n                        false,\n                      );\n                    }\n                  }}\n                  aria-label={t(\"clientAuthentication\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"clientAuthorization\")}\n            fieldId=\"kc-authorization\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"authorizationHelp\")}\n                fieldLabelId=\"authorization\"\n              />\n            }\n          >\n            <Controller\n              name=\"authorizationServicesEnabled\"\n              defaultValue={false}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  data-testid=\"authorization\"\n                  id=\"kc-authorization-switch\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value && !clientAuthentication}\n                  onChange={(_event, value) => {\n                    field.onChange(value);\n                    if (value) {\n                      setValue(\"serviceAccountsEnabled\", true);\n                    }\n                  }}\n                  isDisabled={clientAuthentication}\n                  aria-label={t(\"clientAuthorization\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"authenticationFlow\")}\n            fieldId=\"kc-flow\"\n          >\n            <Grid id=\"authenticationFlowGrid\" hasGutter>\n              <GridItem lg={4} sm={6}>\n                <Controller\n                  name=\"standardFlowEnabled\"\n                  defaultValue={true}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <InputGroupItem>\n                        <Checkbox\n                          data-testid=\"standard\"\n                          label={t(\"standardFlow\")}\n                          id=\"kc-flow-standard\"\n                          isChecked={field.value?.toString() === \"true\"}\n                          onChange={field.onChange}\n                        />\n                      </InputGroupItem>\n                      <InputGroupItem>\n                        <HelpItem\n                          helpText={t(\"standardFlowHelp\")}\n                          fieldLabelId=\"standardFlow\"\n                        />\n                      </InputGroupItem>\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n              <GridItem lg={8} sm={6}>\n                <Controller\n                  name=\"directAccessGrantsEnabled\"\n                  defaultValue={true}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <InputGroupItem>\n                        <Checkbox\n                          data-testid=\"direct\"\n                          label={t(\"directAccess\")}\n                          id=\"kc-flow-direct\"\n                          isChecked={field.value}\n                          onChange={field.onChange}\n                        />\n                      </InputGroupItem>\n                      <InputGroupItem>\n                        <HelpItem\n                          helpText={t(\"directAccessHelp\")}\n                          fieldLabelId=\"directAccess\"\n                        />\n                      </InputGroupItem>\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n              <GridItem lg={4} sm={6}>\n                <Controller\n                  name=\"implicitFlowEnabled\"\n                  defaultValue={true}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <InputGroupItem>\n                        <Checkbox\n                          data-testid=\"implicit\"\n                          label={t(\"implicitFlow\")}\n                          id=\"kc-flow-implicit\"\n                          isChecked={field.value?.toString() === \"true\"}\n                          onChange={field.onChange}\n                        />\n                      </InputGroupItem>\n                      <InputGroupItem>\n                        <HelpItem\n                          helpText={t(\"implicitFlowHelp\")}\n                          fieldLabelId=\"implicitFlow\"\n                        />\n                      </InputGroupItem>\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n              <GridItem lg={8} sm={6}>\n                <Controller\n                  name=\"serviceAccountsEnabled\"\n                  defaultValue={false}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <InputGroupItem>\n                        <Checkbox\n                          data-testid=\"service-account\"\n                          label={t(\"serviceAccount\")}\n                          id=\"kc-flow-service-account\"\n                          isChecked={\n                            field.value?.toString() === \"true\" ||\n                            (clientAuthentication && authorization)\n                          }\n                          onChange={field.onChange}\n                          isDisabled={\n                            (clientAuthentication && !authorization) ||\n                            (!clientAuthentication && authorization)\n                          }\n                        />\n                      </InputGroupItem>\n                      <InputGroupItem>\n                        <HelpItem\n                          helpText={t(\"serviceAccountHelp\")}\n                          fieldLabelId=\"serviceAccount\"\n                        />\n                      </InputGroupItem>\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n              {isFeatureEnabled(Feature.DeviceFlow) && (\n                <GridItem lg={8} sm={6}>\n                  <Controller\n                    name={convertAttributeNameToForm<\n                      Required<ClientRepresentation[\"attributes\"]>\n                    >(\"attributes.oauth2.device.authorization.grant.enabled\")}\n                    defaultValue={false}\n                    control={control}\n                    render={({ field }) => (\n                      <InputGroup>\n                        <InputGroupItem>\n                          <Checkbox\n                            data-testid=\"oauth-device-authorization-grant\"\n                            label={t(\"oauthDeviceAuthorizationGrant\")}\n                            id=\"kc-oauth-device-authorization-grant\"\n                            name=\"oauth2.device.authorization.grant.enabled\"\n                            isChecked={field.value.toString() === \"true\"}\n                            onChange={field.onChange}\n                          />\n                        </InputGroupItem>\n                        <InputGroupItem>\n                          <HelpItem\n                            helpText={t(\"oauthDeviceAuthorizationGrantHelp\")}\n                            fieldLabelId=\"oauthDeviceAuthorizationGrant\"\n                          />\n                        </InputGroupItem>\n                      </InputGroup>\n                    )}\n                  />\n                </GridItem>\n              )}\n              <GridItem lg={8} sm={6}>\n                <Controller\n                  name={convertAttributeNameToForm<FormFields>(\n                    \"attributes.oidc.ciba.grant.enabled\",\n                  )}\n                  defaultValue={false}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <InputGroupItem>\n                        <Checkbox\n                          data-testid=\"oidc-ciba-grant\"\n                          label={t(\"oidcCibaGrant\")}\n                          id=\"kc-oidc-ciba-grant\"\n                          name=\"oidc.ciba.grant.enabled\"\n                          isChecked={field.value.toString() === \"true\"}\n                          onChange={field.onChange}\n                          isDisabled={clientAuthentication}\n                        />\n                      </InputGroupItem>\n                      <InputGroupItem>\n                        <HelpItem\n                          helpText={t(\"oidcCibaGrantHelp\")}\n                          fieldLabelId=\"oidcCibaGrant\"\n                        />\n                      </InputGroupItem>\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n            </Grid>\n          </FormGroup>\n        </>\n      )}\n      {protocol === \"saml\" && (\n        <>\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.saml.encrypt\",\n            )}\n            label={t(\"encryptAssertions\")}\n            labelIcon={t(\"encryptAssertionsHelp\")}\n          />\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.saml.client.signature\",\n            )}\n            label={t(\"clientSignature\")}\n            labelIcon={t(\"clientSignatureHelp\")}\n          />\n        </>\n      )}\n    </FormAccess>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { TextControl, TextAreaControl } from \"@keycloak/keycloak-ui-shared\";\n\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { DefaultSwitchControl } from \"../components/SwitchControl\";\n\ntype ClientDescriptionProps = {\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const ClientDescription = ({\n  hasConfigureAccess: configure,\n}: ClientDescriptionProps) => {\n  const { t } = useTranslation();\n  return (\n    <FormAccess role=\"manage-clients\" fineGrainedAccess={configure} unWrap>\n      <TextControl\n        name=\"clientId\"\n        label={t(\"clientId\")}\n        labelIcon={t(\"clientIdHelp\")}\n        rules={{ required: { value: true, message: t(\"required\") } }}\n      />\n      <TextControl\n        name=\"name\"\n        label={t(\"name\")}\n        labelIcon={t(\"clientNameHelp\")}\n      />\n      <TextAreaControl\n        name=\"description\"\n        label={t(\"description\")}\n        labelIcon={t(\"clientDescriptionHelp\")}\n        rules={{\n          maxLength: {\n            value: 255,\n            message: t(\"maxLength\", { length: 255 }),\n          },\n        }}\n      />\n      <DefaultSwitchControl\n        name=\"alwaysDisplayInConsole\"\n        label={t(\"alwaysDisplayInUI\")}\n        labelIcon={t(\"alwaysDisplayInUIHelp\")}\n      />\n    </FormAccess>\n  );\n};\n"],"names":["CapabilityConfig","unWrap","type","t","useTranslation","control","watch","setValue","useFormContext","protocol","clientAuthentication","authorization","isFeatureEnabled","useIsFeatureEnabled","jsxs","FormAccess","Fragment","jsx","FormGroup","HelpItem","Controller","field","Switch","_event","value","convertAttributeNameToForm","Grid","GridItem","InputGroup","InputGroupItem","Checkbox","Feature","DefaultSwitchControl","ClientDescription","configure","TextControl","TextAreaControl"],"mappings":"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"}