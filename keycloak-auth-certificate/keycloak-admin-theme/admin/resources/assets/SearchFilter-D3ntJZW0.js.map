{"version":3,"file":"SearchFilter-D3ntJZW0.js","sources":["../../../../../../../src/client-scopes/ChangeTypeDropdown.tsx","../../../../../../../src/client-scopes/details/SearchFilter.tsx"],"sourcesContent":["import {\n  AlertVariant,\n  MenuToggle,\n  Select,\n  SelectList,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport type { Row } from \"../clients/scopes/ClientScopes\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ClientScope,\n  allClientScopeTypes,\n  changeClientScope,\n  changeScope,\n  clientScopeTypesSelectOptions,\n} from \"../components/client-scope/ClientScopeTypes\";\n\ntype ChangeTypeDropdownProps = {\n  clientId?: string;\n  selectedRows: Row[];\n  refresh: () => void;\n};\n\nexport const ChangeTypeDropdown = ({\n  clientId,\n  selectedRows,\n  refresh,\n}: ChangeTypeDropdownProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  const { addAlert, addError } = useAlerts();\n\n  return (\n    <Select\n      aria-label=\"change-type-to\"\n      onOpenChange={(isOpen) => setOpen(isOpen)}\n      isOpen={open}\n      toggle={(ref) => (\n        <MenuToggle\n          id=\"change-type-dropdown\"\n          isDisabled={selectedRows.length === 0}\n          ref={ref}\n          onClick={() => setOpen(!open)}\n          isExpanded={open}\n        >\n          {t(\"changeTypeTo\")}\n        </MenuToggle>\n      )}\n      onSelect={async (_, value) => {\n        try {\n          await Promise.all(\n            selectedRows.map((row) => {\n              return clientId\n                ? changeClientScope(\n                    adminClient,\n                    clientId,\n                    row,\n                    row.type,\n                    value as ClientScope,\n                  )\n                : changeScope(adminClient, row, value as ClientScope);\n            }),\n          );\n          setOpen(false);\n          refresh();\n          addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n        } catch (error) {\n          addError(\"clientScopeError\", error);\n        }\n      }}\n    >\n      <SelectList>\n        {clientScopeTypesSelectOptions(\n          t,\n          !clientId ? allClientScopeTypes : undefined,\n        )}\n      </SelectList>\n    </Select>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  Select,\n  SelectList,\n  SelectOption,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\n\nimport {\n  AllClientScopes,\n  AllClientScopeType,\n  clientScopeTypesSelectOptions,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport type { Row } from \"../../clients/scopes/ClientScopes\";\n\nexport type SearchType = \"name\" | \"type\" | \"protocol\";\nexport const PROTOCOLS = [\"all\", \"saml\", \"openid-connect\"] as const;\nexport type ProtocolType = (typeof PROTOCOLS)[number];\n\nexport const nameFilter =\n  (search = \"\") =>\n  (scope: Row) =>\n    scope.name?.includes(search);\nexport const typeFilter = (type: AllClientScopeType) => (scope: Row) =>\n  type === AllClientScopes.none || scope.type === type;\n\nexport const protocolFilter = (protocol: ProtocolType) => (scope: Row) =>\n  protocol === \"all\" || scope.protocol === protocol;\n\ntype SearchToolbarProps = Omit<SearchDropdownProps, \"withProtocol\"> & {\n  type: AllClientScopeType;\n  onType: (value: AllClientScopes) => void;\n  protocol?: ProtocolType;\n  onProtocol?: (value: ProtocolType) => void;\n};\n\ntype SearchDropdownProps = {\n  searchType: SearchType;\n  onSelect: (value: SearchType) => void;\n  withProtocol?: boolean;\n};\n\nexport const SearchDropdown = ({\n  searchType,\n  withProtocol = false,\n  onSelect,\n}: SearchDropdownProps) => {\n  const { t } = useTranslation();\n  const [searchToggle, setSearchToggle] = useState(false);\n\n  const createDropdown = (searchType: SearchType) => (\n    <DropdownItem\n      key={searchType}\n      onClick={() => {\n        onSelect(searchType);\n        setSearchToggle(false);\n      }}\n    >\n      {t(`clientScopeSearch.${searchType}`)}\n    </DropdownItem>\n  );\n  const options = [createDropdown(\"name\"), createDropdown(\"type\")];\n  if (withProtocol) {\n    options.push(createDropdown(\"protocol\"));\n  }\n\n  return (\n    <Dropdown\n      onOpenChange={(isOpen) => setSearchToggle(isOpen)}\n      toggle={(ref) => (\n        <MenuToggle\n          data-testid=\"clientScopeSearch\"\n          ref={ref}\n          id=\"toggle-id\"\n          onClick={() => setSearchToggle(!searchToggle)}\n        >\n          <FilterIcon /> {t(`clientScopeSearch.${searchType}`)}\n        </MenuToggle>\n      )}\n      isOpen={searchToggle}\n    >\n      <DropdownList>{options}</DropdownList>\n    </Dropdown>\n  );\n};\n\nexport const SearchToolbar = ({\n  searchType,\n  onSelect,\n  type,\n  onType,\n  protocol,\n  onProtocol,\n}: SearchToolbarProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      {searchType === \"type\" && (\n        <>\n          <ToolbarItem>\n            <SearchDropdown\n              searchType={searchType}\n              onSelect={onSelect}\n              withProtocol={!!protocol}\n            />\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              toggle={(ref) => (\n                <MenuToggle\n                  data-testid=\"clientScopeSearchType\"\n                  ref={ref}\n                  isExpanded={open}\n                  onClick={() => setOpen(!open)}\n                >\n                  {type === AllClientScopes.none\n                    ? t(\"allTypes\")\n                    : t(`clientScopeTypes.${type}`)}\n                </MenuToggle>\n              )}\n              onOpenChange={(val) => setOpen(val)}\n              isOpen={open}\n              selected={\n                type === AllClientScopes.none\n                  ? t(\"allTypes\")\n                  : t(`clientScopeTypes.${type}`)\n              }\n              onSelect={(_, value) => {\n                onType(value as AllClientScopes);\n                setOpen(false);\n              }}\n            >\n              <SelectList>\n                <SelectOption value={AllClientScopes.none}>\n                  {t(\"allTypes\")}\n                </SelectOption>\n                {clientScopeTypesSelectOptions(t)}\n              </SelectList>\n            </Select>\n          </ToolbarItem>\n        </>\n      )}\n      {searchType === \"protocol\" && !!protocol && (\n        <>\n          <ToolbarItem>\n            <SearchDropdown\n              searchType={searchType}\n              onSelect={onSelect}\n              withProtocol\n            />\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              toggle={(ref) => (\n                <MenuToggle\n                  data-testid=\"clientScopeSearchProtocol\"\n                  ref={ref}\n                  isExpanded={open}\n                  onClick={() => setOpen(!open)}\n                >\n                  {t(`protocolTypes.${protocol}`)}\n                </MenuToggle>\n              )}\n              onOpenChange={(val) => setOpen(val)}\n              isOpen={open}\n              selected={t(`protocolTypes.${protocol}`)}\n              onSelect={(_, value) => {\n                onProtocol?.(value as ProtocolType);\n                setOpen(false);\n              }}\n            >\n              <SelectList>\n                {PROTOCOLS.map((type) => (\n                  <SelectOption key={type} value={type}>\n                    {t(`protocolTypes.${type}`)}\n                  </SelectOption>\n                ))}\n              </SelectList>\n            </Select>\n          </ToolbarItem>\n        </>\n      )}\n    </>\n  );\n};\n"],"names":["ChangeTypeDropdown","clientId","selectedRows","refresh","adminClient","useAdminClient","t","useTranslation","open","setOpen","useState","addAlert","addError","useAlerts","jsx","Select","isOpen","ref","MenuToggle","_","value","row","changeClientScope","changeScope","AlertVariant","error","SelectList","clientScopeTypesSelectOptions","allClientScopeTypes","PROTOCOLS","nameFilter","search","scope","typeFilter","type","AllClientScopes","protocolFilter","protocol","SearchDropdown","searchType","withProtocol","onSelect","searchToggle","setSearchToggle","createDropdown","DropdownItem","options","Dropdown","jsxs","FilterIcon","DropdownList","SearchToolbar","onType","onProtocol","Fragment","ToolbarItem","val","SelectOption"],"mappings":"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"}