{"version":3,"file":"UserForm--6_Ea0DI.js","sources":["../../../../../../../src/user/FederatedUserLink.tsx","../../../../../../../src/user/form-state.ts","../../../../../../../src/user/user-credentials/RequiredActionMultiSelect.tsx","../../../../../../../src/user/UserForm.tsx"],"sourcesContent":["import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { Button } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toCustomUserFederation } from \"../user-federation/routes/CustomUserFederation\";\n\ntype FederatedUserLinkProps = {\n  user: UserRepresentation;\n};\n\nexport const FederatedUserLink = ({ user }: FederatedUserLinkProps) => {\n  const { adminClient } = useAdminClient();\n\n  const access = useAccess();\n  const { realm } = useRealm();\n\n  const [component, setComponent] = useState<ComponentRepresentation>();\n\n  useFetch(\n    () =>\n      access.hasAccess(\"view-realm\")\n        ? adminClient.components.findOne({\n            id: user.federationLink!,\n          })\n        : adminClient.userStorageProvider.name({\n            id: user.federationLink!,\n          }),\n    setComponent,\n    [],\n  );\n\n  if (!component) return null;\n\n  if (!access.hasAccess(\"view-realm\")) return <span>{component.name}</span>;\n\n  return (\n    <Button\n      variant=\"link\"\n      component={(props) => (\n        <Link\n          {...props}\n          to={toCustomUserFederation({\n            id: component.id!,\n            providerId: component.providerId!,\n            realm,\n          })}\n        />\n      )}\n    >\n      {component.name}\n    </Button>\n  );\n};\n","import UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  KeyValueType,\n  arrayToKeyValue,\n  keyValueToArray,\n} from \"../components/key-value-form/key-value-convert\";\nimport { beerify, debeerify } from \"../util\";\n\nexport type UserFormFields = Omit<\n  UIUserRepresentation,\n  \"attributes\" | \"userProfileMetadata\" | \"unmanagedAttributes\"\n> & {\n  attributes?: KeyValueType[] | Record<string, string | string[]>;\n  unmanagedAttributes?: KeyValueType[] | Record<string, string | string[]>;\n};\n\nexport interface UIUserRepresentation extends UserRepresentation {\n  unmanagedAttributes?: Record<string, string[]>;\n}\n\nexport function toUserFormFields(data: UIUserRepresentation): UserFormFields {\n  const attributes: Record<string, string | string[]> = {};\n  Object.entries(data.attributes || {}).forEach(\n    ([k, v]) => (attributes[beerify(k)] = v),\n  );\n\n  const unmanagedAttributes = arrayToKeyValue(data.unmanagedAttributes);\n  return { ...data, attributes, unmanagedAttributes };\n}\n\nexport function toUserRepresentation(\n  data: UserFormFields,\n): UIUserRepresentation {\n  const username = data.username?.trim();\n  const attributes = Array.isArray(data.attributes)\n    ? keyValueToArray(data.attributes)\n    : Object.fromEntries(\n        Object.entries(data.attributes || {}).map(([k, v]) => [\n          debeerify(k),\n          v,\n        ]),\n      );\n  const unmanagedAttributes = Array.isArray(data.unmanagedAttributes)\n    ? keyValueToArray(data.unmanagedAttributes)\n    : data.unmanagedAttributes;\n\n  for (const key in unmanagedAttributes) {\n    if (attributes && Object.hasOwn(attributes, key)) {\n      throw Error(\n        `Attribute ${key} is a managed attribute and is already available from the user details.`,\n      );\n    }\n  }\n\n  return {\n    ...data,\n    username,\n    attributes: { ...unmanagedAttributes, ...attributes },\n    unmanagedAttributes: undefined,\n  };\n}\n\nexport function filterManagedAttributes(\n  attributes: Record<string, string[]> = {},\n  unmanagedAttributes: Record<string, string[]> = {},\n) {\n  return Object.fromEntries(\n    Object.entries(attributes).filter(\n      ([key]) => !Object.hasOwn(unmanagedAttributes, key),\n    ),\n  );\n}\n","import type RequiredActionProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport {\n  SelectControl,\n  SelectVariant,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { useState } from \"react\";\nimport { FieldPathByValue, FieldValues } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\n\nexport type RequiredActionMultiSelectProps<\n  T extends FieldValues,\n  P extends FieldPathByValue<T, string[] | undefined>,\n> = {\n  name: P;\n  label: string;\n  help: string;\n};\n\nexport const RequiredActionMultiSelect = <\n  T extends FieldValues,\n  P extends FieldPathByValue<T, string[] | undefined>,\n>({\n  name,\n  label,\n  help,\n}: RequiredActionMultiSelectProps<T, P>) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [requiredActions, setRequiredActions] = useState<\n    RequiredActionProviderRepresentation[]\n  >([]);\n\n  useFetch(\n    () => adminClient.authenticationManagement.getRequiredActions(),\n    (actions) => {\n      const enabledUserActions = actions.filter((action) => {\n        return action.enabled;\n      });\n      setRequiredActions(enabledUserActions);\n    },\n    [],\n  );\n\n  return (\n    <SelectControl\n      name={name}\n      label={t(label)}\n      labelIcon={t(help)}\n      controller={{ defaultValue: [] }}\n      isScrollable\n      maxMenuHeight=\"375px\"\n      variant={SelectVariant.typeaheadMulti}\n      chipGroupProps={{\n        numChips: 3,\n      }}\n      placeholderText={t(\"requiredActionPlaceholder\")}\n      menuAppendTo=\"parent\"\n      options={requiredActions.map(({ alias, name }) => ({\n        key: alias!,\n        value: name || alias!,\n      }))}\n    />\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { UserProfileMetadata } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  FormErrorText,\n  HelpItem,\n  SwitchControl,\n  TextControl,\n  UserProfileFields,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  InputGroup,\n  InputGroupItem,\n  Switch,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { TFunction } from \"i18next\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, FormProvider, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { DefaultSwitchControl } from \"../components/SwitchControl\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { GroupPickerDialog } from \"../components/group/GroupPickerDialog\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useWhoAmI } from \"../context/whoami/WhoAmI\";\nimport { emailRegexPattern } from \"../util\";\nimport useFormatDate from \"../utils/useFormatDate\";\nimport { FederatedUserLink } from \"./FederatedUserLink\";\nimport { UserFormFields, toUserFormFields } from \"./form-state\";\nimport { toUsers } from \"./routes/Users\";\nimport { FixedButtonsGroup } from \"../components/form/FixedButtonGroup\";\nimport { RequiredActionMultiSelect } from \"./user-credentials/RequiredActionMultiSelect\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport type BruteForced = {\n  isBruteForceProtected?: boolean;\n  isLocked?: boolean;\n};\n\nexport type UserFormProps = {\n  form: UseFormReturn<UserFormFields>;\n  realm: RealmRepresentation;\n  user?: UserRepresentation;\n  bruteForce?: BruteForced;\n  userProfileMetadata?: UserProfileMetadata;\n  save: (user: UserFormFields) => void;\n  refresh?: () => void;\n  onGroupsUpdate?: (groups: GroupRepresentation[]) => void;\n};\n\nexport const UserForm = ({\n  form,\n  realm,\n  user,\n  bruteForce: { isBruteForceProtected, isLocked } = {\n    isBruteForceProtected: false,\n    isLocked: false,\n  },\n  userProfileMetadata,\n  save,\n  refresh,\n  onGroupsUpdate,\n}: UserFormProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const formatDate = useFormatDate();\n  const { addAlert, addError } = useAlerts();\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\");\n  const canViewFederationLink = hasAccess(\"view-realm\");\n  const { whoAmI } = useWhoAmI();\n  const currentLocale = whoAmI.getLocale();\n\n  const { handleSubmit, setValue, control, reset, formState } = form;\n  const { errors } = formState;\n\n  const [selectedGroups, setSelectedGroups] = useState<GroupRepresentation[]>(\n    [],\n  );\n  const [open, setOpen] = useState(false);\n  const [locked, setLocked] = useState(isLocked);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    setValue(\"requiredActions\", user?.requiredActions || []);\n  }, [user, setValue]);\n\n  const unLockUser = async () => {\n    try {\n      await adminClient.users.update({ id: user!.id! }, { enabled: true });\n      addAlert(t(\"unlockSuccess\"), AlertVariant.success);\n      if (refresh) {\n        refresh();\n      }\n    } catch (error) {\n      addError(\"unlockError\", error);\n    }\n  };\n\n  const deleteItem = (id: string) => {\n    setSelectedGroups(selectedGroups.filter((item) => item.name !== id));\n    onGroupsUpdate?.(selectedGroups);\n  };\n\n  const addChips = async (groups: GroupRepresentation[]): Promise<void> => {\n    setSelectedGroups([...selectedGroups!, ...groups]);\n    onGroupsUpdate?.([...selectedGroups!, ...groups]);\n  };\n\n  const addGroups = async (groups: GroupRepresentation[]): Promise<void> => {\n    const newGroups = groups;\n\n    newGroups.forEach(async (group) => {\n      try {\n        await adminClient.users.addToGroup({\n          id: user!.id!,\n          groupId: group.id!,\n        });\n        addAlert(t(\"addedGroupMembership\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"addedGroupMembershipError\", error);\n      }\n    });\n  };\n\n  const toggleModal = () => {\n    setOpen(!open);\n  };\n\n  const onFormReset = () => {\n    if (user?.id) {\n      reset(toUserFormFields(user));\n    } else {\n      navigate(toUsers({ realm: realm.realm! }));\n    }\n  };\n\n  const allFieldsReadOnly = () =>\n    user?.userProfileMetadata?.attributes &&\n    !user?.userProfileMetadata?.attributes\n      ?.map((a) => a.readOnly)\n      .reduce((p, c) => p && c, true);\n\n  return (\n    <FormAccess\n      isHorizontal\n      onSubmit={handleSubmit(save)}\n      role=\"query-users\"\n      fineGrainedAccess={user?.access?.manage}\n      className=\"pf-v5-u-mt-lg\"\n    >\n      <FormProvider {...form}>\n        {open && (\n          <GroupPickerDialog\n            type=\"selectMany\"\n            text={{\n              title: \"selectGroups\",\n              ok: \"join\",\n            }}\n            canBrowse={isManager}\n            onConfirm={(groups) => {\n              if (user?.id) {\n                addGroups(groups || []);\n              } else {\n                addChips(groups || []);\n              }\n\n              setOpen(false);\n            }}\n            onClose={() => setOpen(false)}\n            filterGroups={selectedGroups}\n          />\n        )}\n        {user?.id && (\n          <>\n            <FormGroup label={t(\"id\")} fieldId=\"kc-id\" isRequired>\n              <TextInput\n                id={user.id}\n                aria-label={t(\"userID\")}\n                value={user.id}\n                readOnly\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"createdAt\")}\n              fieldId=\"kc-created-at\"\n              isRequired\n            >\n              <TextInput\n                value={formatDate(new Date(user.createdTimestamp!))}\n                id=\"kc-created-at\"\n                readOnly\n              />\n            </FormGroup>\n          </>\n        )}\n        <RequiredActionMultiSelect\n          name=\"requiredActions\"\n          label=\"requiredUserActions\"\n          help=\"requiredUserActionsHelp\"\n        />\n        {user?.federationLink && canViewFederationLink && (\n          <FormGroup\n            label={t(\"federationLink\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"federationLinkHelp\")}\n                fieldLabelId=\"federationLink\"\n              />\n            }\n          >\n            <FederatedUserLink user={user} />\n          </FormGroup>\n        )}\n        {userProfileMetadata ? (\n          <>\n            <DefaultSwitchControl\n              name=\"emailVerified\"\n              label={t(\"emailVerified\")}\n              labelIcon={t(\"emailVerifiedHelp\")}\n            />\n            <UserProfileFields\n              form={form}\n              userProfileMetadata={userProfileMetadata}\n              hideReadOnly={!user}\n              supportedLocales={realm.supportedLocales || []}\n              currentLocale={currentLocale}\n              t={\n                ((key: unknown, params) =>\n                  t(key as string, params as any)) as TFunction\n              }\n            />\n          </>\n        ) : (\n          <>\n            {!realm.registrationEmailAsUsername && (\n              <TextControl\n                name=\"username\"\n                label={t(\"username\")}\n                readOnly={\n                  !!user?.id &&\n                  !realm.editUsernameAllowed &&\n                  realm.editUsernameAllowed !== undefined\n                }\n                rules={{\n                  required: t(\"required\"),\n                }}\n              />\n            )}\n            <TextControl\n              name=\"email\"\n              label={t(\"email\")}\n              type=\"email\"\n              rules={{\n                pattern: {\n                  value: emailRegexPattern,\n                  message: t(\"emailInvalid\"),\n                },\n              }}\n            />\n            <SwitchControl\n              name=\"emailVerified\"\n              label={t(\"emailVerified\")}\n              labelIcon={t(\"emailVerifiedHelp\")}\n              labelOn={t(\"yes\")}\n              labelOff={t(\"no\")}\n            />\n            <TextControl name=\"firstName\" label={t(\"firstName\")} />\n            <TextControl name=\"lastName\" label={t(\"lastName\")} />\n          </>\n        )}\n        {isBruteForceProtected && (\n          <FormGroup\n            label={t(\"temporaryLocked\")}\n            fieldId=\"temporaryLocked\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"temporaryLockedHelp\")}\n                fieldLabelId=\"temporaryLocked\"\n              />\n            }\n          >\n            <Switch\n              data-testid=\"user-locked-switch\"\n              id=\"temporaryLocked\"\n              onChange={(_event, value) => {\n                unLockUser();\n                setLocked(value);\n              }}\n              isChecked={locked}\n              isDisabled={!locked}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n            />\n          </FormGroup>\n        )}\n        {!user?.id && (\n          <FormGroup\n            label={t(\"groups\")}\n            fieldId=\"kc-groups\"\n            labelIcon={\n              <HelpItem helpText={t(\"groupsHelp\")} fieldLabelId=\"groups\" />\n            }\n          >\n            <Controller\n              name=\"groups\"\n              defaultValue={[]}\n              control={control}\n              render={() => (\n                <InputGroup>\n                  <InputGroupItem>\n                    <ChipGroup categoryName={\" \"}>\n                      {selectedGroups.map((currentChip) => (\n                        <Chip\n                          key={currentChip.id}\n                          onClick={() => deleteItem(currentChip.name!)}\n                        >\n                          {currentChip.path}\n                        </Chip>\n                      ))}\n                    </ChipGroup>\n                  </InputGroupItem>\n                  <InputGroupItem>\n                    <Button\n                      id=\"kc-join-groups-button\"\n                      onClick={toggleModal}\n                      variant=\"secondary\"\n                      data-testid=\"join-groups-button\"\n                    >\n                      {t(\"joinGroups\")}\n                    </Button>\n                  </InputGroupItem>\n                </InputGroup>\n              )}\n            />\n            {errors.requiredActions && (\n              <FormErrorText message={t(\"required\")} />\n            )}\n          </FormGroup>\n        )}\n      </FormProvider>\n      <FixedButtonsGroup\n        name=\"user-creation\"\n        saveText={user?.id ? t(\"save\") : t(\"create\")}\n        reset={onFormReset}\n        resetText={user?.id ? t(\"revert\") : t(\"cancel\")}\n        isDisabled={allFieldsReadOnly()}\n        isSubmit\n      />\n    </FormAccess>\n  );\n};\n"],"names":["FederatedUserLink","user","adminClient","useAdminClient","access","useAccess","realm","useRealm","component","setComponent","useState","useFetch","jsx","Button","props","Link","toCustomUserFederation","toUserFormFields","data","attributes","k","v","beerify","unmanagedAttributes","arrayToKeyValue","toUserRepresentation","username","keyValueToArray","debeerify","key","filterManagedAttributes","RequiredActionMultiSelect","name","label","help","t","useTranslation","requiredActions","setRequiredActions","actions","enabledUserActions","action","SelectControl","SelectVariant","alias","UserForm","form","isBruteForceProtected","isLocked","userProfileMetadata","save","refresh","onGroupsUpdate","formatDate","useFormatDate","addAlert","addError","useAlerts","hasAccess","isManager","canViewFederationLink","whoAmI","useWhoAmI","currentLocale","handleSubmit","setValue","control","reset","formState","errors","selectedGroups","setSelectedGroups","open","setOpen","locked","setLocked","navigate","useNavigate","useEffect","unLockUser","AlertVariant","error","deleteItem","id","item","addChips","groups","addGroups","group","toggleModal","onFormReset","toUsers","allFieldsReadOnly","a","p","jsxs","FormAccess","FormProvider","GroupPickerDialog","Fragment","FormGroup","TextInput","HelpItem","DefaultSwitchControl","UserProfileFields","params","TextControl","emailRegexPattern","SwitchControl","Switch","_event","value","Controller","InputGroup","InputGroupItem","ChipGroup","currentChip","Chip","FormErrorText","FixedButtonsGroup"],"mappings":"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"}