{"version":3,"file":"ClientDetails-BdnLveuz.js","sources":["../../../../../../../../../../node_modules/.pnpm/@patternfly+react-styles@5.4.0/node_modules/@patternfly/react-styles/css/components/CodeBlock/code-block.mjs","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlock.js","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlockAction.js","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelHeader.js","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/Text/TextList.js","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/Text/TextListItem.js","../../../../../../../src/components/download-dialog/DownloadDialog.tsx","../../../../../../../src/clients/advanced/TokenLifespan.tsx","../../../../../../../src/clients/advanced/AdvancedSettings.tsx","../../../../../../../src/clients/advanced/AuthenticationOverrides.tsx","../../../../../../../src/components/time-selector/TimeSelectorForm.tsx","../../../../../../../src/clients/advanced/AddHostDialog.tsx","../../../../../../../src/clients/advanced/ClusteringPanel.tsx","../../../../../../../src/clients/advanced/ApplicationUrls.tsx","../../../../../../../src/clients/advanced/FineGrainOpenIdConnect.tsx","../../../../../../../src/clients/advanced/FineGrainSamlEndpointConfig.tsx","../../../../../../../src/clients/advanced/OpenIdConnectCompatibilityModes.tsx","../../../../../../../src/clients/AdvancedTab.tsx","../../../../../../../src/clients/ClientSessions.tsx","../../../../../../../src/clients/add/AccessSettings.tsx","../../../../../../../src/clients/add/LoginSettingsPanel.tsx","../../../../../../../src/clients/add/LogoutPanel.tsx","../../../../../../../src/clients/add/SamlConfig.tsx","../../../../../../../src/clients/add/SamlSignature.tsx","../../../../../../../src/clients/ClientSettings.tsx","../../../../../../../src/clients/authorization/KeyBasedAttributeInput.tsx","../../../../../../../src/clients/authorization/AuthorizationDataModal.tsx","../../../../../../../src/clients/authorization/AuthorizationEvaluateResourcePolicies.tsx","../../../../../../../src/clients/authorization/AuthorizationEvaluateResource.tsx","../../../../../../../src/clients/authorization/evaluate/Results.tsx","../../../../../../../src/clients/authorization/AuthorizationEvaluate.tsx","../../../../../../../src/clients/authorization/AuthorizationExport.tsx","../../../../../../../src/clients/authorization/DetailDescription.tsx","../../../../../../../src/clients/authorization/EmptyPermissionsState.tsx","../../../../../../../src/clients/authorization/MoreLabel.tsx","../../../../../../../src/clients/authorization/SearchDropdown.tsx","../../../../../../../src/clients/authorization/Permissions.tsx","../../../../../../../src/clients/authorization/Policies.tsx","../../../../../../../src/clients/authorization/DetailCell.tsx","../../../../../../../src/clients/authorization/Resources.tsx","../../../../../../../src/clients/authorization/Scopes.tsx","../../../../../../../src/clients/authorization/ImportDialog.tsx","../../../../../../../src/clients/authorization/Settings.tsx","../../../../../../../src/utils/useQueryPermission.ts","../../../../../../../src/clients/scopes/CopyToClipboardButton.tsx","../../../../../../../src/clients/credentials/ClientSecret.tsx","../../../../../../../src/clients/credentials/SignedJWT.tsx","../../../../../../../src/clients/credentials/X509.tsx","../../../../../../../src/clients/credentials/Credentials.tsx","../../../../../../../src/clients/keys/Certificate.tsx","../../../../../../../src/clients/keys/StoreSettings.tsx","../../../../../../../src/clients/keys/GenerateKeyDialog.tsx","../../../../../../../src/clients/keys/ImportKeyDialog.tsx","../../../../../../../src/clients/keys/Keys.tsx","../../../../../../../src/clients/keys/ExportSamlKeyDialog.tsx","../../../../../../../src/clients/keys/SamlKeysDialog.tsx","../../../../../../../src/clients/keys/SamlImportKeyDialog.tsx","../../../../../../../src/clients/keys/SamlKeys.tsx","../../../../../../../src/clients/scopes/ClientScopes.tsx","../../../../../../../src/clients/scopes/GeneratedCodeTab.tsx","../../../../../../../src/clients/scopes/EvaluateScopes.tsx","../../../../../../../src/clients/service-account/ServiceAccount.tsx","../../../../../../../src/clients/ClientDetails.tsx"],"sourcesContent":["import './code-block.css';\nexport default {\n  \"codeBlock\": \"pf-v5-c-code-block\",\n  \"codeBlockActions\": \"pf-v5-c-code-block__actions\",\n  \"codeBlockCode\": \"pf-v5-c-code-block__code\",\n  \"codeBlockContent\": \"pf-v5-c-code-block__content\",\n  \"codeBlockHeader\": \"pf-v5-c-code-block__header\",\n  \"codeBlockPre\": \"pf-v5-c-code-block__pre\"\n};","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/CodeBlock/code-block.mjs';\nimport { css } from '@patternfly/react-styles';\nexport const CodeBlock = (_a) => {\n    var { children = null, className, actions = null } = _a, props = __rest(_a, [\"children\", \"className\", \"actions\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.codeBlock, className) }, props),\n        actions && (React.createElement(\"div\", { className: css(styles.codeBlockHeader) },\n            React.createElement(\"div\", { className: css(styles.codeBlockActions) }, actions))),\n        React.createElement(\"div\", { className: css(styles.codeBlockContent) }, children)));\n};\nCodeBlock.displayName = 'CodeBlock';\n//# sourceMappingURL=CodeBlock.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/CodeBlock/code-block.mjs';\nexport const CodeBlockAction = (_a) => {\n    var { children = null, className } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(`${styles.codeBlockActions}-item`, className) }, props), children));\n};\nCodeBlockAction.displayName = 'CodeBlockAction';\n//# sourceMappingURL=CodeBlockAction.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Panel/panel.mjs';\nimport { css } from '@patternfly/react-styles';\nexport const PanelHeader = (_a) => {\n    var { className, children } = _a, props = __rest(_a, [\"className\", \"children\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.panelHeader, className) }, props), children));\n};\nPanelHeader.displayName = 'PanelHeader';\n//# sourceMappingURL=PanelHeader.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Content/content.mjs';\nimport { css } from '@patternfly/react-styles';\nexport var TextListVariants;\n(function (TextListVariants) {\n    TextListVariants[\"ul\"] = \"ul\";\n    TextListVariants[\"ol\"] = \"ol\";\n    TextListVariants[\"dl\"] = \"dl\";\n})(TextListVariants || (TextListVariants = {}));\nexport const TextList = (_a) => {\n    var { children = null, className = '', component = TextListVariants.ul, isPlain = false } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"isPlain\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(isPlain && styles.modifiers.plain, className) }), children));\n};\nTextList.displayName = 'TextList';\n//# sourceMappingURL=TextList.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nexport var TextListItemVariants;\n(function (TextListItemVariants) {\n    TextListItemVariants[\"li\"] = \"li\";\n    TextListItemVariants[\"dt\"] = \"dt\";\n    TextListItemVariants[\"dd\"] = \"dd\";\n})(TextListItemVariants || (TextListItemVariants = {}));\nexport const TextListItem = (_a) => {\n    var { children = null, className = '', component = TextListItemVariants.li } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(className) }), children));\n};\nTextListItem.displayName = 'TextListItem';\n//# sourceMappingURL=TextListItem.js.map","import { fetchWithError } from \"@keycloak/keycloak-admin-client\";\nimport { HelpItem, useFetch, useHelp } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Form,\n  FormGroup,\n  MenuToggle,\n  ModalVariant,\n  Select,\n  SelectList,\n  SelectOption,\n  Stack,\n  StackItem,\n  TextArea,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { addTrailingSlash, prettyPrintJSON } from \"../../util\";\nimport { getAuthorizationHeaders } from \"../../utils/getAuthorizationHeaders\";\nimport { ConfirmDialogModal } from \"../confirm-dialog/ConfirmDialog\";\n\ntype DownloadDialogProps = {\n  id: string;\n  protocol?: string;\n  open: boolean;\n  toggleDialog: () => void;\n};\n\nexport const DownloadDialog = ({\n  id,\n  open,\n  toggleDialog,\n  protocol = \"openid-connect\",\n}: DownloadDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { realm } = useRealm();\n  const { t } = useTranslation();\n  const { enabled } = useHelp();\n  const serverInfo = useServerInfo();\n\n  const configFormats = serverInfo.clientInstallations![protocol];\n  const [selected, setSelected] = useState(\n    configFormats[configFormats.length - 1].id,\n  );\n  const [snippet, setSnippet] = useState<string | ArrayBuffer>();\n  const [openType, setOpenType] = useState(false);\n\n  const selectedConfig = useMemo(\n    () => configFormats.find((config) => config.id === selected) ?? null,\n    [selected],\n  );\n\n  const sanitizeSnippet = (snippet: string) =>\n    snippet.replace(\n      /<PrivateKeyPem>.*<\\/PrivateKeyPem>/gs,\n      `<PrivateKeyPem>${t(\"privateKeyMask\")}</PrivateKeyPem>`,\n    );\n\n  useFetch(\n    async () => {\n      if (selectedConfig?.mediaType === \"application/zip\") {\n        const response = await fetchWithError(\n          `${addTrailingSlash(\n            adminClient.baseUrl,\n          )}admin/realms/${realm}/clients/${id}/installation/providers/${selected}`,\n          {\n            method: \"GET\",\n            headers: getAuthorizationHeaders(\n              await adminClient.getAccessToken(),\n            ),\n          },\n        );\n\n        return response.arrayBuffer();\n      } else {\n        const snippet = await adminClient.clients.getInstallationProviders({\n          id,\n          providerId: selected,\n        });\n        if (typeof snippet === \"string\") {\n          return sanitizeSnippet(snippet);\n        } else {\n          return prettyPrintJSON(snippet);\n        }\n      }\n    },\n    (snippet) => setSnippet(snippet),\n    [id, selected],\n  );\n\n  // Clear snippet when selected config changes, this prevents old snippets from being displayed during fetch.\n  useEffect(() => setSnippet(\"\"), [id, selected]);\n\n  return (\n    <ConfirmDialogModal\n      titleKey={t(\"downloadAdaptorTitle\")}\n      continueButtonLabel={t(\"download\")}\n      onConfirm={() => {\n        saveAs(\n          new Blob([snippet!], { type: selectedConfig?.mediaType }),\n          selectedConfig?.filename,\n        );\n      }}\n      open={open}\n      toggleDialog={toggleDialog}\n      variant={ModalVariant.medium}\n    >\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <FormGroup\n              fieldId=\"type\"\n              label={t(\"formatOption\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"downloadType\")}\n                  fieldLabelId=\"formatOption\"\n                />\n              }\n            >\n              <Select\n                isOpen={openType}\n                onOpenChange={(isOpen) => setOpenType(isOpen)}\n                toggle={(ref) => (\n                  <MenuToggle\n                    id=\"type\"\n                    ref={ref}\n                    onClick={() => setOpenType(!openType)}\n                    isExpanded={openType}\n                  >\n                    {selected}\n                  </MenuToggle>\n                )}\n                selected={selected}\n                onSelect={(_, value) => {\n                  setSelected(value?.toString() || \"\");\n                  setOpenType(false);\n                }}\n                aria-label={t(\"selectOne\")}\n                popperProps={{\n                  appendTo: document.body,\n                }}\n              >\n                <SelectList>\n                  {configFormats.map((configFormat) => (\n                    <SelectOption\n                      key={configFormat.id}\n                      value={configFormat.id}\n                      isSelected={selected === configFormat.id}\n                      description={enabled ? configFormat.helpText : undefined}\n                    >\n                      {configFormat.displayType}\n                    </SelectOption>\n                  ))}\n                </SelectList>\n              </Select>\n            </FormGroup>\n          </StackItem>\n          {!selectedConfig?.downloadOnly && (\n            <StackItem isFilled>\n              <FormGroup\n                fieldId=\"details\"\n                label={t(\"details\")}\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"detailsHelp\")}\n                    fieldLabelId=\"details\"\n                  />\n                }\n              >\n                <TextArea\n                  id=\"details\"\n                  readOnly\n                  rows={12}\n                  resizeOrientation=\"vertical\"\n                  value={snippet && typeof snippet === \"string\" ? snippet : \"\"}\n                  aria-label=\"text area example\"\n                />\n              </FormGroup>\n            </StackItem>\n          )}\n        </Stack>\n      </Form>\n    </ConfirmDialogModal>\n  );\n};\n","import {\n  FormGroup,\n  MenuToggle,\n  Select,\n  SelectList,\n  SelectOption,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  TimeSelector,\n  Unit,\n} from \"../../components/time-selector/TimeSelector\";\n\ntype TokenLifespanProps = {\n  id: string;\n  name: string;\n  defaultValue?: number;\n  units?: Unit[];\n};\n\nconst inherited = \"tokenLifespan.inherited\";\nconst expires = \"tokenLifespan.expires\";\n\nexport const TokenLifespan = ({\n  id,\n  name,\n  defaultValue,\n  units,\n}: TokenLifespanProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  const [focused, setFocused] = useState(false);\n  const onFocus = () => setFocused(true);\n  const onBlur = () => setFocused(false);\n\n  const { control } = useFormContext();\n  const isExpireSet = (value: string | number) =>\n    typeof value === \"number\" ||\n    (typeof value === \"string\" && value !== \"\") ||\n    focused;\n\n  return (\n    <FormGroup\n      label={t(id)}\n      fieldId={id}\n      labelIcon={<HelpItem helpText={t(`${id}Help`)} fieldLabelId={id} />}\n      data-testid={`token-lifespan-${id}`}\n    >\n      <Controller\n        name={name}\n        defaultValue=\"\"\n        control={control}\n        render={({ field }) => (\n          <Split hasGutter>\n            <SplitItem>\n              <Select\n                toggle={(ref) => (\n                  <MenuToggle\n                    ref={ref}\n                    onClick={() => setOpen(!open)}\n                    isExpanded={open}\n                  >\n                    {isExpireSet(field.value) ? t(expires) : t(inherited)}\n                  </MenuToggle>\n                )}\n                isOpen={open}\n                onOpenChange={(isOpen) => setOpen(isOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value);\n                  setOpen(false);\n                }}\n                selected={isExpireSet(field.value) ? t(expires) : t(inherited)}\n              >\n                <SelectList>\n                  <SelectOption value=\"\">{t(inherited)}</SelectOption>\n                  <SelectOption value={60}>{t(expires)}</SelectOption>\n                </SelectList>\n              </Select>\n            </SplitItem>\n            <SplitItem hidden={!isExpireSet(field.value)}>\n              <TimeSelector\n                validated={\n                  isExpireSet(field.value) && field.value! < 1\n                    ? \"warning\"\n                    : \"default\"\n                }\n                units={units}\n                value={field.value === \"\" ? defaultValue : field.value}\n                onChange={field.onChange}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                min={1}\n                isDisabled={!isExpireSet(field.value)}\n              />\n            </SplitItem>\n          </Split>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  MenuToggle,\n  Select,\n  SelectList,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeyValueInput } from \"../../components/key-value-form/KeyValueInput\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport useIsFeatureEnabled, { Feature } from \"../../utils/useIsFeatureEnabled\";\nimport { FormFields } from \"../ClientDetails\";\nimport { TokenLifespan } from \"./TokenLifespan\";\n\ntype AdvancedSettingsProps = {\n  save: () => void;\n  reset: () => void;\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const AdvancedSettings = ({\n  save,\n  reset,\n  protocol,\n  hasConfigureAccess,\n}: AdvancedSettingsProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  const { realmRepresentation: realm } = useRealm();\n\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const isDPoPEnabled = isFeatureEnabled(Feature.DPoP);\n\n  const { control } = useFormContext();\n  return (\n    <FormAccess\n      role=\"manage-realm\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      {protocol !== \"openid-connect\" && (\n        <FormGroup\n          label={t(\"assertionLifespan\")}\n          fieldId=\"assertionLifespan\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"assertionLifespanHelp\")}\n              fieldLabelId=\"assertionLifespan\"\n            />\n          }\n        >\n          <Controller\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.saml.assertion.lifespan\",\n            )}\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <TimeSelector\n                units={[\"minute\", \"day\", \"hour\"]}\n                value={field.value}\n                onChange={field.onChange}\n              />\n            )}\n          />\n        </FormGroup>\n      )}\n      {protocol === \"openid-connect\" && (\n        <>\n          <TokenLifespan\n            id=\"accessTokenLifespan\"\n            name={convertAttributeNameToForm(\n              \"attributes.access.token.lifespan\",\n            )}\n            defaultValue={realm?.accessTokenLifespan}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n          <TokenLifespan\n            id=\"clientSessionIdle\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.session.idle.timeout\",\n            )}\n            defaultValue={realm?.clientSessionIdleTimeout}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n          <TokenLifespan\n            id=\"clientSessionMax\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.session.max.lifespan\",\n            )}\n            defaultValue={realm?.clientSessionMaxLifespan}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n          <TokenLifespan\n            id=\"clientOfflineSessionIdle\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.offline.session.idle.timeout\",\n            )}\n            defaultValue={realm?.offlineSessionIdleTimeout}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          {realm?.offlineSessionMaxLifespanEnabled && (\n            <TokenLifespan\n              id=\"clientOfflineSessionMax\"\n              name={convertAttributeNameToForm(\n                \"attributes.client.offline.session.max.lifespan\",\n              )}\n              defaultValue={\n                realm?.offlineSessionMaxLifespanEnabled\n                  ? realm.offlineSessionMaxLifespan\n                  : undefined\n              }\n              units={[\"minute\", \"day\", \"hour\"]}\n            />\n          )}\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.tls.client.certificate.bound.access.tokens\",\n            )}\n            label={t(\"oAuthMutual\")}\n            labelIcon={t(\"oAuthMutualHelp\")}\n            stringify\n          />\n          {isDPoPEnabled && (\n            <DefaultSwitchControl\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.dpop.bound.access.tokens\",\n              )}\n              label={t(\"oAuthDPoP\")}\n              labelIcon={t(\"oAuthDPoPHelp\")}\n              stringify\n            />\n          )}\n          <FormGroup\n            label={t(\"keyForCodeExchange\")}\n            fieldId=\"keyForCodeExchange\"\n            hasNoPaddingTop\n            labelIcon={\n              <HelpItem\n                helpText={t(\"keyForCodeExchangeHelp\")}\n                fieldLabelId=\"keyForCodeExchange\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.pkce.code.challenge.method\",\n              )}\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggle={(ref) => (\n                    <MenuToggle\n                      id=\"keyForCodeExchange\"\n                      ref={ref}\n                      onClick={() => setOpen(!open)}\n                      isExpanded={open}\n                    >\n                      {[field.value || t(\"choose\")]}\n                    </MenuToggle>\n                  )}\n                  isOpen={open}\n                  onOpenChange={(isOpen) => setOpen(isOpen)}\n                  onSelect={(_, value) => {\n                    field.onChange(value);\n                    setOpen(false);\n                  }}\n                  selected={field.value}\n                >\n                  <SelectList>\n                    {[\"\", \"S256\", \"plain\"].map((v) => (\n                      <SelectOption key={v} value={v}>\n                        {v || t(\"choose\")}\n                      </SelectOption>\n                    ))}\n                  </SelectList>\n                </Select>\n              )}\n            />\n          </FormGroup>\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.require.pushed.authorization.requests\",\n            )}\n            label={t(\"pushedAuthorizationRequestRequired\")}\n            labelIcon={t(\"pushedAuthorizationRequestRequiredHelp\")}\n            stringify\n          />\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.client.use.lightweight.access.token.enabled\",\n            )}\n            label={t(\"lightweightAccessToken\")}\n            labelIcon={t(\"lightweightAccessTokenHelp\")}\n            stringify\n          />\n\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.client.introspection.response.allow.jwt.claim.enabled\",\n            )}\n            label={t(\"supportJwtClaimInIntrospectionResponse\")}\n            labelIcon={t(\"supportJwtClaimInIntrospectionResponseHelp\")}\n            stringify\n          />\n          <FormGroup\n            label={t(\"acrToLoAMapping\")}\n            fieldId=\"acrToLoAMapping\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"acrToLoAMappingHelp\")}\n                fieldLabelId=\"acrToLoAMapping\"\n              />\n            }\n          >\n            <KeyValueInput\n              label={t(\"acrToLoAMapping\")}\n              name={convertAttributeNameToForm(\"attributes.acr.loa.map\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"defaultACRValues\")}\n            fieldId=\"defaultACRValues\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"defaultACRValuesHelp\")}\n                fieldLabelId=\"defaultACRValues\"\n              />\n            }\n          >\n            <MultiLineInput\n              id=\"defaultACRValues\"\n              aria-label=\"defaultACRValues\"\n              name={convertAttributeNameToForm(\"attributes.default.acr.values\")}\n              stringify\n            />\n          </FormGroup>\n        </>\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCAdvancedSave\"\n        >\n          {t(\"save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset} data-testid=\"OIDCAdvancedRevert\">\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport { SelectControl, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { ActionGroup, Button } from \"@patternfly/react-core\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\n\ntype AuthenticationOverridesProps = {\n  save: () => void;\n  reset: () => void;\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const AuthenticationOverrides = ({\n  protocol,\n  save,\n  reset,\n  hasConfigureAccess,\n}: AuthenticationOverridesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [flows, setFlows] = useState<AuthenticationFlowRepresentation[]>([]);\n\n  useFetch(\n    () => adminClient.authenticationManagement.getFlows(),\n    (flows) => {\n      let filteredFlows = [\n        ...flows.filter((flow) => flow.providerId !== \"client-flow\"),\n      ];\n      filteredFlows = sortBy(filteredFlows, [(f) => f.alias]);\n      setFlows(filteredFlows);\n    },\n    [],\n  );\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <SelectControl\n        name=\"authenticationFlowBindingOverrides.browser\"\n        label={t(\"browserFlow\")}\n        labelIcon={t(\"browserFlowHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={[\n          { key: \"\", value: t(\"choose\") },\n          ...flows.map(({ id, alias }) => ({ key: id!, value: alias! })),\n        ]}\n      />\n      {protocol === \"openid-connect\" && (\n        <SelectControl\n          name=\"authenticationFlowBindingOverrides.direct_grant\"\n          label={t(\"directGrant\")}\n          labelIcon={t(\"directGrantHelp\")}\n          controller={{\n            defaultValue: \"\",\n          }}\n          options={[\n            { key: \"\", value: t(\"choose\") },\n            ...flows.map(({ id, alias }) => ({ key: id!, value: alias! })),\n          ]}\n        />\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCAuthFlowOverrideSave\"\n        >\n          {t(\"save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          onClick={reset}\n          data-testid=\"OIDCAuthFlowOverrideRevert\"\n        >\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { useController } from \"react-hook-form\";\nimport { TimeSelector, TimeSelectorProps } from \"./TimeSelector\";\n\ntype TimeSelectorFormProps = TimeSelectorProps & {\n  name: string;\n};\n\nexport const TimeSelectorForm = (props: TimeSelectorFormProps) => {\n  const { field } = useController(props);\n\n  return <TimeSelector {...props} {...field} />;\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\n\ntype FormFields = {\n  node: string;\n};\n\ntype AddHostDialogProps = {\n  clientId: string;\n  isOpen: boolean;\n  onAdded: (host: string) => void;\n  onClose: () => void;\n};\n\nexport const AddHostDialog = ({\n  clientId: id,\n  isOpen,\n  onAdded,\n  onClose,\n}: AddHostDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const form = useForm<FormFields>();\n  const {\n    handleSubmit,\n    formState: { isDirty, isValid },\n  } = form;\n  const { addAlert, addError } = useAlerts();\n\n  async function onSubmit({ node }: FormFields) {\n    try {\n      await adminClient.clients.addClusterNode({\n        id,\n        node,\n      });\n      onAdded(node);\n      addAlert(t(\"addedNodeSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"addedNodeFail\", error);\n    }\n\n    onClose();\n  }\n\n  return (\n    <Modal\n      title={t(\"addNode\")}\n      isOpen={isOpen}\n      onClose={onClose}\n      variant=\"small\"\n      actions={[\n        <Button\n          key=\"confirm\"\n          id=\"add-node-confirm\"\n          type=\"submit\"\n          form=\"add-host-form\"\n          isDisabled={!isDirty || !isValid}\n        >\n          {t(\"save\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          id=\"add-node-cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <Form id=\"add-host-form\" onSubmit={handleSubmit(onSubmit)} isHorizontal>\n          <TextControl\n            name=\"node\"\n            label={t(\"nodeHost\")}\n            rules={{\n              required: t(\"required\"),\n            }}\n          />\n        </Form>\n      </FormProvider>\n    </Modal>\n  );\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  ExpandableSection,\n  FormGroup,\n  Split,\n  SplitItem,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { Action, KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { TimeSelectorForm } from \"../../components/time-selector/TimeSelectorForm\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../../utils/useFormatDate\";\nimport { AddHostDialog } from \".././advanced/AddHostDialog\";\nimport { AdvancedProps, parseResult } from \"../AdvancedTab\";\n\ntype Node = {\n  host: string;\n  registration: string;\n};\n\nexport const ClusteringPanel = ({\n  save,\n  client: { id, registeredNodes, access },\n}: AdvancedProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const formatDate = useFormatDate();\n\n  const [nodes, setNodes] = useState(registeredNodes || {});\n  const [expanded, setExpanded] = useState(false);\n  const [selectedNode, setSelectedNode] = useState(\"\");\n  const [addNodeOpen, setAddNodeOpen] = useState(false);\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n\n  const testCluster = async () => {\n    const result = await adminClient.clients.testNodesAvailable({ id: id! });\n    parseResult(result, \"testCluster\", addAlert, t);\n  };\n\n  const [toggleDeleteNodeConfirm, DeleteNodeConfirm] = useConfirmDialog({\n    titleKey: \"deleteNode\",\n    messageKey: t(\"deleteNodeBody\", {\n      node: selectedNode,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.deleteClusterNode({\n          id: id!,\n          node: selectedNode,\n        });\n        setNodes({\n          ...Object.keys(nodes).reduce((object: any, key) => {\n            if (key !== selectedNode) {\n              object[key] = nodes[key];\n            }\n            return object;\n          }, {}),\n        });\n        refresh();\n        addAlert(t(\"deleteNodeSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"deleteNodeFail\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <FormAccess\n        role=\"manage-clients\"\n        fineGrainedAccess={access?.configure}\n        isHorizontal\n      >\n        <FormGroup\n          label={t(\"nodeReRegistrationTimeout\")}\n          fieldId=\"kc-node-reregistration-timeout\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"nodeReRegistrationTimeoutHelp\")}\n              fieldLabelId=\"nodeReRegistrationTimeout\"\n            />\n          }\n        >\n          <Split hasGutter>\n            <SplitItem>\n              <TimeSelectorForm name=\"nodeReRegistrationTimeout\" />\n            </SplitItem>\n            <SplitItem>\n              <Button variant={ButtonVariant.secondary} onClick={() => save()}>\n                {t(\"save\")}\n              </Button>\n            </SplitItem>\n          </Split>\n        </FormGroup>\n      </FormAccess>\n      <>\n        <DeleteNodeConfirm />\n        <AddHostDialog\n          clientId={id!}\n          isOpen={addNodeOpen}\n          onAdded={(node) => {\n            nodes[node] = Date.now() / 1000;\n            refresh();\n          }}\n          onClose={() => setAddNodeOpen(false)}\n        />\n        <ExpandableSection\n          toggleText={t(\"registeredClusterNodes\")}\n          onToggle={(_event, val) => setExpanded(val)}\n          isExpanded={expanded}\n        >\n          <KeycloakDataTable\n            key={key}\n            ariaLabelKey=\"registeredClusterNodes\"\n            loader={() =>\n              Promise.resolve<Node[]>(\n                Object.entries(nodes || {}).map((entry) => {\n                  return { host: entry[0], registration: entry[1] };\n                }),\n              )\n            }\n            toolbarItem={\n              <>\n                <ToolbarItem>\n                  <Button\n                    id=\"testClusterAvailability\"\n                    onClick={testCluster}\n                    variant={ButtonVariant.secondary}\n                    isDisabled={Object.keys(nodes).length === 0}\n                  >\n                    {t(\"testClusterAvailability\")}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    id=\"registerNodeManually\"\n                    onClick={() => setAddNodeOpen(true)}\n                    variant={ButtonVariant.tertiary}\n                  >\n                    {t(\"registerNodeManually\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            }\n            actions={[\n              {\n                title: t(\"delete\"),\n                onRowClick: (node) => {\n                  setSelectedNode(node.host);\n                  toggleDeleteNodeConfirm();\n                },\n              } as Action<Node>,\n            ]}\n            columns={[\n              {\n                name: \"host\",\n                displayKey: \"nodeHost\",\n              },\n              {\n                name: \"registration\",\n                displayKey: \"lastRegistration\",\n                cellFormatters: [\n                  (value) =>\n                    value\n                      ? formatDate(\n                          new Date(parseInt(value.toString()) * 1000),\n                          FORMAT_DATE_AND_TIME,\n                        )\n                      : \"\",\n                ],\n              },\n            ]}\n            emptyState={\n              <ListEmptyState\n                message={t(\"noNodes\")}\n                instructions={t(\"noNodesInstructions\")}\n                primaryActionText={t(\"registerNodeManually\")}\n                onPrimaryAction={() => setAddNodeOpen(true)}\n              />\n            }\n          />\n        </ExpandableSection>\n      </>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\n\ntype ApplicationUrlsProps = {\n  isDisabled?: boolean;\n};\n\nexport const ApplicationUrls = (props: ApplicationUrlsProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <TextControl\n        name=\"attributes.logoUri\"\n        label={t(\"logoUrl\")}\n        labelIcon={t(\"logoUrlHelp\")}\n        type=\"url\"\n        {...props}\n      />\n      <TextControl\n        name=\"attributes.policyUri\"\n        label={t(\"policyUrl\")}\n        labelIcon={t(\"policyUrlHelp\")}\n        type=\"url\"\n        {...props}\n      />\n      <TextControl\n        name=\"attributes.tosUri\"\n        label={t(\"termsOfServiceUrl\")}\n        labelIcon={t(\"termsOfServiceUrlHelp\")}\n        type=\"url\"\n        {...props}\n      />\n    </>\n  );\n};\n","import { ProviderRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\nimport { ActionGroup, Button, FormGroup } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem, SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm, sortProviders } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport { ApplicationUrls } from \"./ApplicationUrls\";\n\ntype FineGrainOpenIdConnectProps = {\n  save: () => void;\n  reset: () => void;\n  hasConfigureAccess?: boolean;\n};\n\nexport const FineGrainOpenIdConnect = ({\n  save,\n  reset,\n  hasConfigureAccess,\n}: FineGrainOpenIdConnectProps) => {\n  const { t } = useTranslation();\n  const providers = useServerInfo().providers;\n  const clientSignatureProviders = providers?.clientSignature.providers;\n  const contentEncryptionProviders = providers?.contentencryption.providers;\n  const cekManagementProviders = providers?.cekmanagement.providers;\n  const signatureProviders = providers?.signature.providers;\n\n  const convert = (list: { [index: string]: ProviderRepresentation }) =>\n    sortProviders(list).map((i) => ({ key: i, value: i }));\n\n  const prependEmpty = (list: { [index: string]: ProviderRepresentation }) => [\n    { key: \"\", value: t(\"choose\") },\n    ...convert(list),\n  ];\n\n  const prependAny = (list: { [index: string]: ProviderRepresentation }) => [\n    { key: \"any\", value: t(\"any\") },\n    ...convert(list),\n  ];\n\n  const prependNone = (list: { [index: string]: ProviderRepresentation }) => [\n    { key: \"none\", value: t(\"none\") },\n    ...convert(list),\n  ];\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <ApplicationUrls />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.access.token.signed.response.alg\",\n        )}\n        label={t(\"accessTokenSignatureAlgorithm\")}\n        labelIcon={t(\"accessTokenSignatureAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(clientSignatureProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.id.token.signed.response.alg\",\n        )}\n        label={t(\"idTokenSignatureAlgorithm\")}\n        labelIcon={t(\"idTokenSignatureAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(clientSignatureProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.id.token.encrypted.response.alg\",\n        )}\n        label={t(\"idTokenEncryptionKeyManagementAlgorithm\")}\n        labelIcon={t(\"idTokenEncryptionKeyManagementAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(cekManagementProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.id.token.encrypted.response.enc\",\n        )}\n        label={t(\"idTokenEncryptionContentEncryptionAlgorithm\")}\n        labelIcon={t(\"idTokenEncryptionContentEncryptionAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(contentEncryptionProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.user.info.response.signature.alg\",\n        )}\n        label={t(\"userInfoSignedResponseAlgorithm\")}\n        labelIcon={t(\"userInfoSignedResponseAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(signatureProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.user.info.encrypted.response.alg\",\n        )}\n        label={t(\"userInfoResponseEncryptionKeyManagementAlgorithm\")}\n        labelIcon={t(\"userInfoResponseEncryptionKeyManagementAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(cekManagementProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.user.info.encrypted.response.enc\",\n        )}\n        label={t(\"userInfoResponseEncryptionContentEncryptionAlgorithm\")}\n        labelIcon={t(\n          \"userInfoResponseEncryptionContentEncryptionAlgorithmHelp\",\n        )}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(contentEncryptionProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.request.object.signature.alg\",\n        )}\n        label={t(\"requestObjectSignatureAlgorithm\")}\n        labelIcon={t(\"requestObjectSignatureAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={[\n          { key: \"any\", value: t(\"any\") },\n          ...prependNone(clientSignatureProviders!),\n        ]}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.request.object.encryption.alg\",\n        )}\n        label={t(\"requestObjectEncryption\")}\n        labelIcon={t(\"requestObjectEncryptionHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependAny(cekManagementProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.request.object.encryption.enc\",\n        )}\n        label={t(\"requestObjectEncoding\")}\n        labelIcon={t(\"requestObjectEncodingHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependAny(contentEncryptionProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.request.object.required\",\n        )}\n        label={t(\"requestObjectRequired\")}\n        labelIcon={t(\"requestObjectRequiredHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={[\n          \"not required\",\n          \"request or request_uri\",\n          \"request only\",\n          \"request_uri only\",\n        ].map((p) => ({\n          key: p,\n          value: t(`requestObject.${p}`),\n        }))}\n      />\n      <FormGroup\n        label={t(\"validRequestURIs\")}\n        fieldId=\"validRequestURIs\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"validRequestURIsHelp\")}\n            fieldLabelId=\"validRequestURIs\"\n          />\n        }\n      >\n        <MultiLineInput\n          name={convertAttributeNameToForm(\"attributes.request.uris\")}\n          aria-label={t(\"validRequestURIs\")}\n          addButtonLabel=\"addRequestUri\"\n          stringify\n        />\n      </FormGroup>\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.authorization.signed.response.alg\",\n        )}\n        label={t(\"authorizationSignedResponseAlg\")}\n        labelIcon={t(\"authorizationSignedResponseAlgHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(signatureProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.authorization.encrypted.response.alg\",\n        )}\n        label={t(\"authorizationEncryptedResponseAlg\")}\n        labelIcon={t(\"authorizationEncryptedResponseAlgHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(cekManagementProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.authorization.encrypted.response.enc\",\n        )}\n        label={t(\"authorizationEncryptedResponseEnc\")}\n        labelIcon={t(\"authorizationEncryptedResponseEncHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(contentEncryptionProviders!)}\n      />\n      <ActionGroup>\n        <Button variant=\"secondary\" id=\"fineGrainSave\" onClick={save}>\n          {t(\"save\")}\n        </Button>\n        <Button id=\"fineGrainRevert\" variant=\"link\" onClick={reset}>\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { ActionGroup, Button } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { ApplicationUrls } from \"./ApplicationUrls\";\n\ntype FineGrainSamlEndpointConfigProps = {\n  save: () => void;\n  reset: () => void;\n};\n\nexport const FineGrainSamlEndpointConfig = ({\n  save,\n  reset,\n}: FineGrainSamlEndpointConfigProps) => {\n  const { t } = useTranslation();\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <ApplicationUrls />\n      <TextControl\n        name=\"attributes.saml_assertion_consumer_url_post\"\n        label={t(\"assertionConsumerServicePostBindingURL\")}\n        labelIcon={t(\"assertionConsumerServicePostBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_assertion_consumer_url_redirect\"\n        label={t(\"assertionConsumerServiceRedirectBindingURL\")}\n        labelIcon={t(\"assertionConsumerServiceRedirectBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_post\"\n        label={t(\"logoutServicePostBindingURL\")}\n        labelIcon={t(\"logoutServicePostBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_redirect\"\n        label={t(\"logoutServiceRedirectBindingURL\")}\n        labelIcon={t(\"logoutServiceRedirectBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_soap\"\n        label={t(\"logoutServiceSoapBindingUrl\")}\n        labelIcon={t(\"logoutServiceSoapBindingUrlHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_artifact\"\n        label={t(\"logoutServiceArtifactBindingUrl\")}\n        labelIcon={t(\"logoutServiceArtifactBindingUrlHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_artifact_binding_url\"\n        label={t(\"artifactBindingUrl\")}\n        labelIcon={t(\"artifactBindingUrlHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_artifact_resolution_service_url\"\n        label={t(\"artifactResolutionService\")}\n        labelIcon={t(\"artifactResolutionServiceHelp\")}\n        type=\"url\"\n      />\n\n      <ActionGroup>\n        <Button variant=\"tertiary\" onClick={save} data-testid=\"fineGrainSave\">\n          {t(\"save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset} data-testid=\"fineGrainRevert\">\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { ActionGroup, Button, FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype OpenIdConnectCompatibilityModesProps = {\n  save: () => void;\n  reset: () => void;\n  hasConfigureAccess?: boolean;\n};\n\nexport const OpenIdConnectCompatibilityModes = ({\n  save,\n  reset,\n  hasConfigureAccess,\n}: OpenIdConnectCompatibilityModesProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <FormGroup\n        label={t(\"excludeSessionStateFromAuthenticationResponse\")}\n        fieldId=\"excludeSessionStateFromAuthenticationResponse\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"excludeSessionStateFromAuthenticationResponseHelp\")}\n            fieldLabelId=\"excludeSessionStateFromAuthenticationResponse\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.exclude.session.state.from.auth.response\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"excludeSessionStateFromAuthenticationResponse-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"excludeSessionStateFromAuthenticationResponse\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"excludeIssuerFromAuthenticationResponse\")}\n        fieldId=\"excludeIssuerFromAuthenticationResponse\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"excludeIssuerFromAuthenticationResponseHelp\")}\n            fieldLabelId=\"excludeIssuerFromAuthenticationResponse\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.exclude.issuer.from.auth.response\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"excludeIssuerFromAuthenticationResponse-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"excludeIssuerFromAuthenticationResponse\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useRefreshTokens\")}\n        fieldId=\"useRefreshTokens\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"useRefreshTokensHelp\")}\n            fieldLabelId=\"useRefreshTokens\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.use.refresh.tokens\",\n          )}\n          defaultValue=\"true\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useRefreshTokens\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"useRefreshTokens\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useRefreshTokenForClientCredentialsGrant\")}\n        fieldId=\"useRefreshTokenForClientCredentialsGrant\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"useRefreshTokenForClientCredentialsGrantHelp\")}\n            fieldLabelId=\"useRefreshTokenForClientCredentialsGrant\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.client_credentials.use_refresh_token\",\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useRefreshTokenForClientCredentialsGrant\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"useRefreshTokenForClientCredentialsGrant\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useLowerCaseBearerType\")}\n        fieldId=\"useLowerCaseBearerType\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"useLowerCaseBearerTypeHelp\")}\n            fieldLabelId=\"useLowerCaseBearerType\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.token.response.type.bearer.lower-case\",\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useLowerCaseBearerType\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"useLowerCaseBearerType\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCCompatabilitySave\"\n        >\n          {t(\"save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          onClick={reset}\n          data-testid=\"OIDCCompatabilityRevert\"\n        >\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type GlobalRequestResult from \"@keycloak/keycloak-admin-client/lib/defs/globalRequestResult\";\nimport { AlertVariant, PageSection, Text } from \"@patternfly/react-core\";\nimport type { TFunction } from \"i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ScrollForm } from \"@keycloak/keycloak-ui-shared\";\nimport type { AddAlertFunction } from \"@keycloak/keycloak-ui-shared\";\nimport { convertAttributeNameToForm, toUpperCase } from \"../util\";\nimport type { FormFields, SaveOptions } from \"./ClientDetails\";\nimport { AdvancedSettings } from \"./advanced/AdvancedSettings\";\nimport { AuthenticationOverrides } from \"./advanced/AuthenticationOverrides\";\nimport { ClusteringPanel } from \"./advanced/ClusteringPanel\";\nimport { FineGrainOpenIdConnect } from \"./advanced/FineGrainOpenIdConnect\";\nimport { FineGrainSamlEndpointConfig } from \"./advanced/FineGrainSamlEndpointConfig\";\nimport { OpenIdConnectCompatibilityModes } from \"./advanced/OpenIdConnectCompatibilityModes\";\n\nexport const parseResult = (\n  result: GlobalRequestResult,\n  prefixKey: string,\n  addAlert: AddAlertFunction,\n  t: TFunction,\n) => {\n  const successCount = result.successRequests?.length || 0;\n  const failedCount = result.failedRequests?.length || 0;\n\n  if (successCount === 0 && failedCount === 0) {\n    addAlert(t(\"noAdminUrlSet\"), AlertVariant.warning);\n  } else if (failedCount > 0) {\n    addAlert(\n      t(prefixKey + \"Success\", { successNodes: result.successRequests }),\n      AlertVariant.success,\n    );\n    addAlert(\n      t(prefixKey + \"Fail\", { failedNodes: result.failedRequests }),\n      AlertVariant.danger,\n    );\n  } else {\n    addAlert(\n      t(prefixKey + \"Success\", { successNodes: result.successRequests }),\n      AlertVariant.success,\n    );\n  }\n};\n\nexport type AdvancedProps = {\n  save: (options?: SaveOptions) => void;\n  client: ClientRepresentation;\n};\n\nexport const AdvancedTab = ({ save, client }: AdvancedProps) => {\n  const { t } = useTranslation();\n  const openIdConnect = \"openid-connect\";\n\n  const { setValue } = useFormContext();\n  const {\n    publicClient,\n    attributes,\n    protocol,\n    authenticationFlowBindingOverrides,\n  } = client;\n\n  const resetFields = (names: string[]) => {\n    for (const name of names) {\n      setValue(\n        convertAttributeNameToForm<FormFields>(`attributes.${name}`),\n        attributes?.[name] || \"\",\n      );\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-py-0\">\n      <ScrollForm\n        label={t(\"jumpToSection\")}\n        sections={[\n          {\n            title: t(\"clustering\"),\n            isHidden: !publicClient,\n            panel: <ClusteringPanel client={client} save={save} />,\n          },\n          {\n            title: t(\"fineGrainOpenIdConnectConfiguration\"),\n            isHidden: protocol !== openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"fineGrainOpenIdConnectConfigurationHelp\")}\n                </Text>\n                <FineGrainOpenIdConnect\n                  save={save}\n                  reset={() => {\n                    resetFields([\n                      \"logoUri\",\n                      \"policyUri\",\n                      \"tosUri\",\n                      \"access.token.signed.response.alg\",\n                      \"id.token.signed.response.alg\",\n                      \"id.token.encrypted.response.alg\",\n                      \"id.token.encrypted.response.enc\",\n                      \"user.info.response.signature.alg\",\n                      \"user.info.encrypted.response.alg\",\n                      \"user.info.encrypted.response.enc\",\n                      \"request.object.signature.alg\",\n                      \"request.object.encryption.alg\",\n                      \"request.object.encryption.enc\",\n                      \"request.object.required\",\n                      \"request.uris\",\n                      \"authorization.signed.response.alg\",\n                      \"authorization.encrypted.response.alg\",\n                      \"authorization.encrypted.response.enc\",\n                    ]);\n                  }}\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"openIdConnectCompatibilityModes\"),\n            isHidden: protocol !== openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"openIdConnectCompatibilityModesHelp\")}\n                </Text>\n                <OpenIdConnectCompatibilityModes\n                  save={() => save()}\n                  reset={() =>\n                    resetFields([\n                      \"exclude.session.state.from.auth.response\",\n                      \"use.refresh.tokens\",\n                      \"client_credentials.use_refresh_token\",\n                      \"token.response.type.bearer.lower-case\",\n                    ])\n                  }\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"fineGrainSamlEndpointConfig\"),\n            isHidden: protocol === openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"fineGrainSamlEndpointConfigHelp\")}\n                </Text>\n                <FineGrainSamlEndpointConfig\n                  save={() => save()}\n                  reset={() =>\n                    resetFields([\n                      \"logoUri\",\n                      \"policyUri\",\n                      \"tosUri\",\n                      \"saml_assertion_consumer_url_post\",\n                      \"saml_assertion_consumer_url_redirect\",\n                      \"saml_single_logout_service_url_post\",\n                      \"saml_single_logout_service_url_redirect\",\n                      \"saml_single_logout_service_url_artifact\",\n                      \"saml_artifact_binding_url\",\n                      \"saml_artifact_resolution_service_url\",\n                    ])\n                  }\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"advancedSettings\"),\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"advancedSettings\" + toUpperCase(protocol || \"\"))}\n                </Text>\n                <AdvancedSettings\n                  protocol={protocol}\n                  save={() => save()}\n                  reset={() => {\n                    resetFields([\n                      \"saml.assertion.lifespan\",\n                      \"access.token.lifespan\",\n                      \"tls.client.certificate.bound.access.tokens\",\n                      \"pkce.code.challenge.method\",\n                    ]);\n                  }}\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"authenticationOverrides\"),\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"authenticationOverridesHelp\")}\n                </Text>\n                <AuthenticationOverrides\n                  protocol={protocol}\n                  save={() => save()}\n                  reset={() => {\n                    setValue(\n                      \"authenticationFlowBindingOverrides.browser\",\n                      authenticationFlowBindingOverrides?.browser,\n                    );\n                    setValue(\n                      \"authenticationFlowBindingOverrides.direct_grant\",\n                      authenticationFlowBindingOverrides?.direct_grant,\n                    );\n                  }}\n                />\n              </>\n            ),\n          },\n        ]}\n        borders\n      />\n    </PageSection>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type UserSessionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userSessionRepresentation\";\nimport { PageSection } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport type { LoaderFunction } from \"@keycloak/keycloak-ui-shared\";\nimport SessionsTable from \"../sessions/SessionsTable\";\n\ntype ClientSessionsProps = {\n  client: ClientRepresentation;\n};\n\nexport const ClientSessions = ({ client }: ClientSessionsProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n\n  const loader: LoaderFunction<UserSessionRepresentation> = async (\n    first,\n    max,\n  ) => {\n    const mapSessionsToType =\n      (type: string) => (sessions: UserSessionRepresentation[]) =>\n        sessions.map((session) => ({\n          type,\n          ...session,\n        }));\n\n    const allSessions = await Promise.all([\n      adminClient.clients\n        .listSessions({ id: client.id!, first, max })\n        .then(mapSessionsToType(t(\"sessionsType.regularSSO\"))),\n      adminClient.clients\n        .listOfflineSessions({\n          id: client.id!,\n          first,\n          max,\n        })\n        .then(mapSessionsToType(t(\"sessionsType.offline\"))),\n    ]);\n\n    return allSessions.flat();\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <SessionsTable\n        loader={loader}\n        hiddenColumns={[\"clients\"]}\n        emptyInstructions={t(\"noSessionsForClient\")}\n      />\n    </PageSection>\n  );\n};\n","import { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\n\nimport { FixedButtonsGroup } from \"../../components/form/FixedButtonGroup\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { FormFields } from \"../ClientDetails\";\nimport type { ClientSettingsProps } from \"../ClientSettings\";\nimport { LoginSettings } from \"./LoginSettings\";\n\nexport const AccessSettings = ({\n  client,\n  save,\n  reset,\n}: ClientSettingsProps) => {\n  const { t } = useTranslation();\n  const { watch } = useFormContext<FormFields>();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  const protocol = watch(\"protocol\");\n\n  return (\n    <FormAccess\n      isHorizontal\n      fineGrainedAccess={client.access?.configure}\n      role=\"manage-clients\"\n    >\n      {!client.bearerOnly && <LoginSettings protocol={protocol} />}\n      {protocol !== \"saml\" && (\n        <TextControl\n          type=\"url\"\n          name=\"adminUrl\"\n          label={t(\"adminURL\")}\n          labelIcon={t(\"adminURLHelp\")}\n        />\n      )}\n      {client.bearerOnly && (\n        <FixedButtonsGroup\n          name=\"settings\"\n          save={save}\n          reset={reset}\n          isDisabled={isManager}\n        />\n      )}\n    </FormAccess>\n  );\n};\n","import { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectControl, TextAreaControl } from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const LoginSettingsPanel = ({ access }: { access?: boolean }) => {\n  const { t } = useTranslation();\n  const { watch } = useFormContext<FormFields>();\n\n  const loginThemes = useServerInfo().themes![\"login\"];\n  const consentRequired = watch(\"consentRequired\");\n  const displayOnConsentScreen: string = watch(\n    convertAttributeNameToForm<FormFields>(\n      \"attributes.display.on.consent.screen\",\n    ),\n  );\n\n  return (\n    <FormAccess isHorizontal fineGrainedAccess={access} role=\"manage-clients\">\n      <SelectControl\n        name=\"attributes.login_theme\"\n        label={t(\"loginTheme\")}\n        labelIcon={t(\"loginThemeHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={[\n          { key: \"\", value: t(\"choose\") },\n          ...loginThemes.map(({ name }) => ({ key: name, value: name })),\n        ]}\n      />\n      <DefaultSwitchControl\n        name=\"consentRequired\"\n        label={t(\"consentRequired\")}\n        labelIcon={t(\"consentRequiredHelp\")}\n      />\n      <DefaultSwitchControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.display.on.consent.screen\",\n        )}\n        label={t(\"displayOnClient\")}\n        labelIcon={t(\"displayOnClientHelp\")}\n        isDisabled={!consentRequired}\n        stringify\n      />\n      <TextAreaControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.consent.screen.text\",\n        )}\n        label={t(\"consentScreenText\")}\n        labelIcon={t(\"consentScreenTextHelp\")}\n        isDisabled={!(consentRequired && displayOnConsentScreen === \"true\")}\n      />\n    </FormAccess>\n  );\n};\n","import { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem, TextControl } from \"@keycloak/keycloak-ui-shared\";\n\nimport { FixedButtonsGroup } from \"../../components/form/FixedButtonGroup\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport type { ClientSettingsProps } from \"../ClientSettings\";\n\nconst validateUrl = (uri: string | undefined, error: string) =>\n  ((uri?.startsWith(\"https://\") || uri?.startsWith(\"http://\")) &&\n    !uri.includes(\"*\")) ||\n  uri === \"\" ||\n  error;\n\nexport const LogoutPanel = ({\n  save,\n  reset,\n  client: { access },\n}: ClientSettingsProps) => {\n  const { t } = useTranslation();\n  const { control, watch } = useFormContext<FormFields>();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || access?.configure;\n\n  const protocol = watch(\"protocol\");\n  const frontchannelLogout = watch(\"frontchannelLogout\");\n\n  return (\n    <FormAccess\n      isHorizontal\n      fineGrainedAccess={access?.configure}\n      role=\"manage-clients\"\n    >\n      <FormGroup\n        label={t(\"frontchannelLogout\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"frontchannelLogoutHelp\")}\n            fieldLabelId=\"frontchannelLogout\"\n          />\n        }\n        fieldId=\"kc-frontchannelLogout\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name=\"frontchannelLogout\"\n          defaultValue={true}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-frontchannelLogout-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value}\n              onChange={field.onChange}\n              aria-label={t(\"frontchannelLogout\")}\n            />\n          )}\n        />\n      </FormGroup>\n      {protocol === \"openid-connect\" && frontchannelLogout && (\n        <TextControl\n          data-testid=\"frontchannelLogoutUrl\"\n          type=\"url\"\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.frontchannel.logout.url\",\n          )}\n          label={t(\"frontchannelLogoutUrl\")}\n          labelIcon={t(\"frontchannelLogoutUrlHelp\")}\n          rules={{\n            validate: (uri) =>\n              validateUrl(uri, t(\"frontchannelUrlInvalid\").toString()),\n          }}\n        />\n      )}\n      {protocol === \"openid-connect\" && (\n        <>\n          <TextControl\n            data-testid=\"backchannelLogoutUrl\"\n            type=\"url\"\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.backchannel.logout.url\",\n            )}\n            label={t(\"backchannelLogoutUrl\")}\n            labelIcon={t(\"backchannelLogoutUrlHelp\")}\n            rules={{\n              validate: (uri) =>\n                validateUrl(uri, t(\"backchannelUrlInvalid\").toString()),\n            }}\n          />\n          <FormGroup\n            label={t(\"backchannelLogoutSessionRequired\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"backchannelLogoutSessionRequiredHelp\")}\n                fieldLabelId=\"backchannelLogoutSessionRequired\"\n              />\n            }\n            fieldId=\"backchannelLogoutSessionRequired\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.backchannel.logout.session.required\",\n              )}\n              defaultValue=\"true\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"backchannelLogoutSessionRequired\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(_event, value) => field.onChange(value.toString())}\n                  aria-label={t(\"backchannelLogoutSessionRequired\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"backchannelLogoutRevokeOfflineSessions\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"backchannelLogoutRevokeOfflineSessionsHelp\")}\n                fieldLabelId=\"backchannelLogoutRevokeOfflineSessions\"\n              />\n            }\n            fieldId=\"backchannelLogoutRevokeOfflineSessions\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.backchannel.logout.revoke.offline.tokens\",\n              )}\n              defaultValue=\"false\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"backchannelLogoutRevokeOfflineSessions\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(_event, value) => field.onChange(value.toString())}\n                  aria-label={t(\"backchannelLogoutRevokeOfflineSessions\")}\n                />\n              )}\n            />\n          </FormGroup>\n        </>\n      )}\n      <FixedButtonsGroup\n        name=\"settings\"\n        save={save}\n        reset={reset}\n        isDisabled={!isManager}\n      />\n    </FormAccess>\n  );\n};\n","import { Path, PathValue } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype ToggleProps = {\n  name: PathValue<FormFields, Path<FormFields>>;\n  label: string;\n};\nexport const Toggle = ({ name, label }: ToggleProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <DefaultSwitchControl\n      name={name}\n      label={t(label)}\n      labelIcon={t(`${label}Help`)}\n      stringify\n    />\n  );\n};\n\nexport const SamlConfig = () => {\n  const { t } = useTranslation();\n\n  return (\n    <FormAccess\n      isHorizontal\n      role=\"manage-clients\"\n      className=\"keycloak__capability-config__form\"\n    >\n      <SelectControl\n        name=\"attributes.saml_name_id_format\"\n        label={t(\"nameIdFormat\")}\n        labelIcon={t(\"nameIdFormatHelp\")}\n        controller={{\n          defaultValue: \"username\",\n        }}\n        options={[\"username\", \"email\", \"transient\", \"persistent\"]}\n      />\n      <Toggle\n        name=\"attributes.saml_force_name_id_format\"\n        label=\"forceNameIdFormat\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.force.post.binding\")}\n        label=\"forcePostBinding\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.artifact.binding\")}\n        label=\"forceArtifactBinding\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.authnstatement\")}\n        label=\"includeAuthnStatement\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\n          \"attributes.saml.onetimeuse.condition\",\n        )}\n        label=\"includeOneTimeUseCondition\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\n          \"attributes.saml.server.signature.keyinfo.ext\",\n        )}\n        label=\"optimizeLookup\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.allow.ecp.flow\")}\n        label=\"allowEcpFlow\"\n      />\n    </FormAccess>\n  );\n};\n","import { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Toggle } from \"./SamlConfig\";\n\nconst SIGNATURE_ALGORITHMS = [\n  \"RSA_SHA1\",\n  \"RSA_SHA256\",\n  \"RSA_SHA256_MGF1\",\n  \"RSA_SHA512\",\n  \"RSA_SHA512_MGF1\",\n  \"DSA_SHA1\",\n] as const;\n\nconst KEYNAME_TRANSFORMER = [\"NONE\", \"KEY_ID\", \"CERT_SUBJECT\"] as const;\n\nconst CANONICALIZATION = [\n  { name: \"EXCLUSIVE\", value: \"http://www.w3.org/2001/10/xml-exc-c14n#\" },\n  {\n    name: \"EXCLUSIVE_WITH_COMMENTS\",\n    value: \"http://www.w3.org/2001/10/xml-exc-c14n#WithComments\",\n  },\n  {\n    name: \"INCLUSIVE\",\n    value: \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\",\n  },\n  {\n    name: \"INCLUSIVE_WITH_COMMENTS\",\n    value: \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\",\n  },\n] as const;\n\nexport const SamlSignature = () => {\n  const { t } = useTranslation();\n  const { watch } = useFormContext<FormFields>();\n\n  const signDocs = watch(\n    convertAttributeNameToForm<FormFields>(\"attributes.saml.server.signature\"),\n  );\n  const signAssertion = watch(\n    convertAttributeNameToForm<FormFields>(\n      \"attributes.saml.assertion.signature\",\n    ),\n  );\n\n  return (\n    <FormAccess\n      isHorizontal\n      role=\"manage-clients\"\n      className=\"keycloak__capability-config__form\"\n    >\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.server.signature\")}\n        label=\"signDocuments\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.assertion.signature\")}\n        label=\"signAssertions\"\n      />\n      {(signDocs === \"true\" || signAssertion === \"true\") && (\n        <>\n          <SelectControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.saml.signature.algorithm\",\n            )}\n            label={t(\"signatureAlgorithm\")}\n            labelIcon={t(\"signatureAlgorithmHelp\")}\n            controller={{\n              defaultValue: SIGNATURE_ALGORITHMS[0],\n            }}\n            options={[...SIGNATURE_ALGORITHMS]}\n          />\n          <SelectControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.saml.server.signature.keyinfo.xmlSigKeyInfoKeyNameTransformer\",\n            )}\n            label={t(\"signatureKeyName\")}\n            labelIcon={t(\"signatureKeyNameHelp\")}\n            controller={{\n              defaultValue: KEYNAME_TRANSFORMER[0],\n            }}\n            options={[...KEYNAME_TRANSFORMER]}\n          />\n          <SelectControl\n            name=\"attributes.saml_signature_canonicalization_method\"\n            label={t(\"canonicalization\")}\n            labelIcon={t(\"canonicalizationHelp\")}\n            controller={{\n              defaultValue: CANONICALIZATION[0].value,\n            }}\n            options={CANONICALIZATION.map(({ name, value }) => ({\n              key: value,\n              value: name,\n            }))}\n          />\n        </>\n      )}\n    </FormAccess>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { Form } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ScrollForm } from \"@keycloak/keycloak-ui-shared\";\nimport { ClientDescription } from \"./ClientDescription\";\nimport { FormFields } from \"./ClientDetails\";\nimport { AccessSettings } from \"./add/AccessSettings\";\nimport { CapabilityConfig } from \"./add/CapabilityConfig\";\nimport { LoginSettingsPanel } from \"./add/LoginSettingsPanel\";\nimport { LogoutPanel } from \"./add/LogoutPanel\";\nimport { SamlConfig } from \"./add/SamlConfig\";\nimport { SamlSignature } from \"./add/SamlSignature\";\n\nexport type ClientSettingsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n  reset: () => void;\n};\n\nexport const ClientSettings = (props: ClientSettingsProps) => {\n  const { t } = useTranslation();\n\n  const { watch } = useFormContext<FormFields>();\n  const protocol = watch(\"protocol\");\n\n  const { client } = props;\n\n  return (\n    <ScrollForm\n      label={t(\"jumpToSection\")}\n      className=\"pf-v5-u-px-lg pf-v5-u-pb-lg\"\n      sections={[\n        {\n          title: t(\"generalSettings\"),\n          panel: (\n            <Form isHorizontal>\n              <ClientDescription\n                protocol={client.protocol}\n                hasConfigureAccess={client.access?.configure}\n              />\n            </Form>\n          ),\n        },\n        {\n          title: t(\"accessSettings\"),\n          panel: <AccessSettings {...props} />,\n        },\n        {\n          title: t(\"samlCapabilityConfig\"),\n          isHidden: protocol !== \"saml\" || client.bearerOnly,\n          panel: <SamlConfig />,\n        },\n        {\n          title: t(\"signatureAndEncryption\"),\n          isHidden: protocol !== \"saml\" || client.bearerOnly,\n          panel: <SamlSignature />,\n        },\n        {\n          title: t(\"capabilityConfig\"),\n          isHidden: protocol !== \"openid-connect\" || client.bearerOnly,\n          panel: <CapabilityConfig />,\n        },\n        {\n          title: t(\"loginSettings\"),\n          isHidden: client.bearerOnly,\n          panel: <LoginSettingsPanel access={client.access?.configure} />,\n        },\n        {\n          title: t(\"logoutSettings\"),\n          isHidden: client.bearerOnly,\n          panel: <LogoutPanel {...props} />,\n        },\n      ]}\n    />\n  );\n};\n","import type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport { KeycloakSelect, SelectVariant } from \"@keycloak/keycloak-ui-shared\";\nimport { Button, SelectOption, TextInput } from \"@patternfly/react-core\";\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { camelCase } from \"lodash-es\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { Controller, useFieldArray, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { defaultContextAttributes } from \"../utils\";\n\nimport \"./key-based-attribute-input.css\";\n\nexport type AttributeType = {\n  key?: string;\n  name: string;\n  custom?: boolean;\n  values?: {\n    [key: string]: string;\n  }[];\n};\n\ntype AttributeInputProps = {\n  name: string;\n  selectableValues?: AttributeType[];\n  resources?: ResourceRepresentation[];\n};\n\ntype ValueInputProps = {\n  name: string;\n  rowIndex: number;\n  attribute: any;\n  selectableValues?: AttributeType[];\n  resources?: ResourceRepresentation[];\n};\n\nconst ValueInput = ({\n  name,\n  rowIndex,\n  attribute,\n  selectableValues,\n  resources,\n}: ValueInputProps) => {\n  const { t } = useTranslation();\n  const { control, register, getValues } = useFormContext();\n  const [isValueOpenArray, setIsValueOpenArray] = useState([false]);\n\n  const toggleValueSelect = (rowIndex: number, open: boolean) => {\n    const arr = [...isValueOpenArray];\n    arr[rowIndex] = open;\n    setIsValueOpenArray(arr);\n  };\n\n  const attributeValues = useMemo(() => {\n    let values: AttributeType[] | undefined = [];\n\n    if (selectableValues) {\n      values = defaultContextAttributes.find(\n        (attr) => attr.key === getValues().context?.[rowIndex]?.key,\n      )?.values;\n    }\n\n    return values;\n  }, [getValues]);\n\n  const renderSelectOptionType = () => {\n    const scopeValues = resources?.find(\n      (resource) => resource.name === getValues().resources?.[rowIndex]?.key,\n    )?.scopes;\n\n    if (attributeValues?.length && !resources) {\n      return attributeValues.map((attr) => (\n        <SelectOption key={attr.key} value={attr.key}>\n          {attr.name}\n        </SelectOption>\n      ));\n    } else if (scopeValues?.length) {\n      return scopeValues.map((scope) => (\n        <SelectOption key={scope.name} value={scope.name}>\n          {scope.name}\n        </SelectOption>\n      ));\n    }\n  };\n\n  const getMessageBundleKey = (attributeName: string) =>\n    camelCase(attributeName).replace(/\\W/g, \"\");\n\n  return (\n    <Td>\n      {resources || attributeValues?.length ? (\n        <Controller\n          name={`${name}.${rowIndex}.value`}\n          defaultValue={[]}\n          control={control}\n          render={({ field }) => (\n            <KeycloakSelect\n              toggleId={`${attribute.id}-value`}\n              className=\"kc-attribute-value-selectable\"\n              chipGroupProps={{\n                numChips: 1,\n                expandedText: t(\"hide\"),\n                collapsedText: t(\"showRemaining\"),\n              }}\n              onToggle={(open) => toggleValueSelect(rowIndex, open)}\n              isOpen={isValueOpenArray[rowIndex]}\n              variant={SelectVariant.typeahead}\n              typeAheadAriaLabel={t(\"selectOrTypeAKey\")}\n              placeholderText={t(\"selectOrTypeAKey\")}\n              selections={field.value}\n              onSelect={(v) => {\n                field.onChange(v);\n\n                toggleValueSelect(rowIndex, false);\n              }}\n            >\n              {renderSelectOptionType()}\n            </KeycloakSelect>\n          )}\n        />\n      ) : (\n        <TextInput\n          id={`${getMessageBundleKey(attribute.key)}-value`}\n          className=\"value-input\"\n          defaultValue={attribute.value}\n          data-testid=\"attribute-value-input\"\n          aria-label={t(\"value\")}\n          {...register(`${name}.${rowIndex}.value`)}\n        />\n      )}\n    </Td>\n  );\n};\n\nexport const KeyBasedAttributeInput = ({\n  name,\n  selectableValues,\n  resources,\n}: AttributeInputProps) => {\n  const { t } = useTranslation();\n  const { control, watch } = useFormContext();\n  const { fields, append, remove } = useFieldArray({\n    control: control,\n    name,\n  });\n\n  const [isKeyOpenArray, setIsKeyOpenArray] = useState([false]);\n  const toggleKeySelect = (rowIndex: number, open: boolean) => {\n    const arr = [...isKeyOpenArray];\n    arr[rowIndex] = open;\n    setIsKeyOpenArray(arr);\n  };\n\n  useEffect(() => {\n    if (!fields.length) {\n      append({ key: \"\", value: \"\" }, { shouldFocus: false });\n    }\n  }, [fields]);\n\n  const watchLastValue = watch(`${name}.${fields.length - 1}.value`, \"\");\n\n  return (\n    <Table\n      className=\"kc-attributes__table\"\n      aria-label=\"Role attribute keys and values\"\n      variant=\"compact\"\n    >\n      <Thead>\n        <Tr>\n          <Th width={40}>{t(\"key\")}</Th>\n          <Th width={40}>{t(\"value\")}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {fields.map((attribute, rowIndex) => (\n          <Tr key={attribute.id} data-testid=\"attribute-row\">\n            <Td>\n              <Controller\n                name={`${name}.${rowIndex}.key`}\n                defaultValue=\"\"\n                control={control}\n                render={({ field }) => (\n                  <KeycloakSelect\n                    toggleId={`${name}.${rowIndex}.key`}\n                    className=\"kc-attribute-key-selectable\"\n                    onToggle={(open) => toggleKeySelect(rowIndex, open)}\n                    isOpen={isKeyOpenArray[rowIndex]}\n                    variant={SelectVariant.typeahead}\n                    typeAheadAriaLabel={t(\"selectOrTypeAKey\")}\n                    placeholderText={t(\"selectOrTypeAKey\")}\n                    selections={field.value}\n                    onSelect={(v) => {\n                      field.onChange(v.toString());\n\n                      toggleKeySelect(rowIndex, false);\n                    }}\n                  >\n                    {selectableValues?.map((attribute) => (\n                      <SelectOption\n                        selected={attribute.name === field.value}\n                        key={attribute.key}\n                        value={resources ? attribute.name : attribute.key}\n                      >\n                        {attribute.name}\n                      </SelectOption>\n                    ))}\n                  </KeycloakSelect>\n                )}\n              />\n            </Td>\n            <ValueInput\n              name={name}\n              attribute={attribute}\n              rowIndex={rowIndex}\n              selectableValues={selectableValues}\n              resources={resources}\n            />\n            <Td>\n              <Button\n                id={`${name}-minus-button-${rowIndex}`}\n                variant=\"link\"\n                className=\"kc-attributes__minus-icon\"\n                onClick={() => remove(rowIndex)}\n                aria-label={t(\"remove\")}\n              >\n                <MinusCircleIcon />\n              </Button>\n            </Td>\n          </Tr>\n        ))}\n        <Tr>\n          <Td>\n            <Button\n              aria-label={t(\"addAttribute\", { label: t(\"attribute\") })}\n              id={`${name}-plus-icon`}\n              variant=\"link\"\n              className=\"kc-attributes__plus-icon\"\n              onClick={() => {\n                append({ key: \"\", value: \"\" });\n                setIsKeyOpenArray([...isKeyOpenArray, false]);\n              }}\n              icon={<PlusCircleIcon />}\n              isDisabled={!watchLastValue}\n              data-testid=\"attribute-add-row\"\n            >\n              {t(\"addAttribute\", { label: t(\"attribute\") })}\n            </Button>\n          </Td>\n        </Tr>\n      </Tbody>\n    </Table>\n  );\n};\n","import type AccessTokenRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/accessTokenRepresentation\";\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Text,\n  TextArea,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { prettyPrintJSON } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\n\ntype AuthorizationDataModalProps = {\n  data: AccessTokenRepresentation;\n};\n\nexport const AuthorizationDataModal = ({\n  data,\n}: AuthorizationDataModalProps) => {\n  const { t } = useTranslation();\n  const [show, toggle] = useToggle();\n\n  return (\n    <>\n      <Button\n        data-testid=\"authorization-revert\"\n        onClick={toggle}\n        variant=\"secondary\"\n      >\n        {t(\"showAuthData\")}\n      </Button>\n      <Modal\n        variant={ModalVariant.medium}\n        isOpen={show}\n        aria-label={t(\"authData\")}\n        header={\n          <TextContent>\n            <Text component={TextVariants.h1}>{t(\"authData\")}</Text>\n            <Text>{t(\"authDataDescription\")}</Text>\n          </TextContent>\n        }\n        onClose={toggle}\n        actions={[\n          <Button\n            data-testid=\"cancel\"\n            id=\"modal-cancel\"\n            key=\"cancel\"\n            onClick={toggle}\n          >\n            {t(\"cancel\")}\n          </Button>,\n        ]}\n      >\n        <TextArea readOnly rows={20} value={prettyPrintJSON(data)} />\n      </Modal>\n    </>\n  );\n};\n","import type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport { DecisionEffect } from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type PolicyResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyResultRepresentation\";\nimport {\n  capitalize,\n  DescriptionList,\n  TextContent,\n  TextList,\n  TextListItem,\n} from \"@patternfly/react-core\";\nimport { ExpandableRowContent, Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useParams } from \"../../utils/useParams\";\nimport type { ClientParams } from \"../routes/Client\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\n\ntype Props = {\n  idx: number;\n  rowIndex: number;\n  outerPolicy: PolicyResultRepresentation;\n  resource: EvaluationResultRepresentation;\n};\n\nexport const AuthorizationEvaluateResourcePolicies = ({\n  idx,\n  rowIndex,\n  outerPolicy,\n  resource,\n}: Props) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const { clientId } = useParams<ClientParams>();\n\n  return (\n    <Tbody key={idx} isExpanded={expanded}>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex,\n            isExpanded: expanded,\n            onToggle: () => setExpanded((prev) => !prev),\n          }}\n        />\n        <Td data-testid={`name-column-${resource.resource}`}>\n          <Link\n            to={toPermissionDetails({\n              realm,\n              id: clientId,\n              permissionType: outerPolicy.policy?.type!,\n              permissionId: outerPolicy.policy?.id!,\n            })}\n          >\n            {outerPolicy.policy?.name}\n          </Link>\n        </Td>\n        <Td id={outerPolicy.status?.toLowerCase()}>\n          {t(outerPolicy.status?.toLowerCase() as string)}\n        </Td>\n        <Td>{t(`${outerPolicy.policy?.decisionStrategy?.toLowerCase()}`)}</Td>\n        <Td>\n          {outerPolicy.status === DecisionEffect.Permit\n            ? resource.policies?.[rowIndex]?.scopes?.join(\", \")\n            : \"-\"}\n        </Td>\n        <Td>\n          {outerPolicy.status === DecisionEffect.Deny &&\n          resource.policies?.[rowIndex]?.scopes?.length\n            ? resource.policies[rowIndex].scopes?.join(\", \")\n            : \"-\"}\n        </Td>\n      </Tr>\n      <Tr key={`child-${resource.resource}`} isExpanded={expanded}>\n        <Td />\n        <Td colSpan={5}>\n          {expanded && (\n            <ExpandableRowContent>\n              <DescriptionList\n                isHorizontal\n                className=\"keycloak_resource_details\"\n              >\n                <TextContent>\n                  <TextList>\n                    {outerPolicy.associatedPolicies?.map((item) => (\n                      <TextListItem key=\"policyDetails\">\n                        <Link\n                          to={toPolicyDetails({\n                            realm,\n                            id: clientId,\n                            policyType: item.policy?.type!,\n                            policyId: item.policy?.id!,\n                          })}\n                        >\n                          {item.policy?.name}\n                        </Link>\n\n                        {t(\"votedToStatus\", {\n                          status: capitalize(item.status as string),\n                        })}\n                      </TextListItem>\n                    ))}\n                  </TextList>\n                </TextContent>\n              </DescriptionList>\n            </ExpandableRowContent>\n          )}\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n","import { useState } from \"react\";\nimport {\n  ExpandableRowContent,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { DescriptionList } from \"@patternfly/react-core/dist/esm/components\";\nimport { useTranslation } from \"react-i18next\";\nimport { AuthorizationEvaluateResourcePolicies } from \"./AuthorizationEvaluateResourcePolicies\";\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyResultRepresentation\";\n\ntype Props = {\n  rowIndex: number;\n  resource: EvaluationResultRepresentation;\n  evaluateResults: any;\n};\n\nexport const AuthorizationEvaluateResource = ({\n  rowIndex,\n  resource,\n  evaluateResults,\n}: Props) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n  const { t } = useTranslation();\n\n  return (\n    <Tbody isExpanded={expanded}>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex,\n            isExpanded: expanded,\n            onToggle: () => setExpanded((prev) => !prev),\n          }}\n        />\n        <Td data-testid={`name-column-${resource.resource}`}>\n          {resource.resource?.name}\n        </Td>\n        <Td id={resource.status?.toLowerCase()}>\n          {t(`${resource.status?.toLowerCase()}`)}\n        </Td>\n        <Td>\n          {resource.allowedScopes?.length\n            ? resource.allowedScopes.map((item) => item.name)\n            : \"-\"}\n        </Td>\n      </Tr>\n      <Tr key={`child-${resource.resource}`} isExpanded={expanded}>\n        <Td />\n        <Td colSpan={5}>\n          <ExpandableRowContent>\n            {expanded && (\n              <DescriptionList\n                isHorizontal\n                className=\"keycloak_resource_details\"\n              >\n                <Table aria-label={t(\"evaluationResults\")}>\n                  <Thead>\n                    <Tr>\n                      <Th aria-hidden=\"true\" />\n                      <Th>{t(\"permission\")}</Th>\n                      <Th>{t(\"results\")}</Th>\n                      <Th>{t(\"decisionStrategy\")}</Th>\n                      <Th>{t(\"grantedScopes\")}</Th>\n                      <Th>{t(\"deniedScopes\")}</Th>\n                      <Th aria-hidden=\"true\" />\n                    </Tr>\n                  </Thead>\n                  {Object.values(evaluateResults[rowIndex].policies).map(\n                    (outerPolicy, idx) => (\n                      <AuthorizationEvaluateResourcePolicies\n                        key={idx}\n                        idx={idx}\n                        rowIndex={rowIndex}\n                        outerPolicy={outerPolicy as PolicyResultRepresentation}\n                        resource={resource}\n                      />\n                    ),\n                  )}\n                </Table>\n              </DescriptionList>\n            )}\n          </ExpandableRowContent>\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Divider,\n  Form,\n  InputGroup,\n  PageSection,\n  TextInput,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  InputGroupItem,\n  Select,\n  MenuToggle,\n  SelectList,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport { Table, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { KeyboardEvent, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyEvaluationResponse from \"@keycloak/keycloak-admin-client/lib/defs/policyEvaluationResponse\";\nimport { FixedButtonsGroup } from \"../../../components/form/FixedButtonGroup\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport useToggle from \"../../../utils/useToggle\";\nimport { AuthorizationDataModal } from \"../AuthorizationDataModal\";\nimport { AuthorizationEvaluateResource } from \"../AuthorizationEvaluateResource\";\n\ntype ResultProps = {\n  evaluateResult: PolicyEvaluationResponse;\n  refresh: () => void;\n  back: () => void;\n};\n\nenum ResultsFilter {\n  All = \"ALL\",\n  StatusDenied = \"STATUS_DENIED\",\n  StatusPermitted = \"STATUS_PERMITTED\",\n}\n\nfunction filterResults(\n  results: EvaluationResultRepresentation[],\n  filter: ResultsFilter,\n) {\n  switch (filter) {\n    case ResultsFilter.StatusPermitted:\n      return results.filter(({ status }) => status === \"PERMIT\");\n    case ResultsFilter.StatusDenied:\n      return results.filter(({ status }) => status === \"DENY\");\n    default:\n      return results;\n  }\n}\n\nexport const Results = ({ evaluateResult, refresh, back }: ResultProps) => {\n  const { t } = useTranslation();\n\n  const [filterDropdownOpen, toggleFilterDropdown] = useToggle();\n\n  const [filter, setFilter] = useState(ResultsFilter.All);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  const confirmSearchQuery = () => {\n    setSearchQuery(searchInput);\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      confirmSearchQuery();\n    }\n  };\n\n  const filteredResources = useMemo(\n    () =>\n      filterResults(evaluateResult.results!, filter).filter(\n        ({ resource }) => resource?.name?.includes(searchQuery) ?? false,\n      ),\n    [evaluateResult.results, filter, searchQuery],\n  );\n\n  const noEvaluatedData = evaluateResult.results!.length === 0;\n  const noFilteredData = filteredResources.length === 0;\n\n  return (\n    <PageSection>\n      <Toolbar>\n        <ToolbarGroup className=\"providers-toolbar\">\n          <ToolbarItem>\n            <InputGroup>\n              <InputGroupItem isFill>\n                <TextInput\n                  name={\"inputGroupName\"}\n                  id={\"inputGroupName\"}\n                  type=\"search\"\n                  aria-label={t(\"search\")}\n                  placeholder={t(\"search\")}\n                  onChange={(_event, val) => setSearchInput(val)}\n                  onKeyDown={handleKeyDown}\n                />\n              </InputGroupItem>\n              <InputGroupItem>\n                <Button\n                  variant={ButtonVariant.control}\n                  aria-label={t(\"search\")}\n                  onClick={() => confirmSearchQuery()}\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroupItem>\n            </InputGroup>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              data-testid=\"filter-type-select\"\n              isOpen={filterDropdownOpen}\n              className=\"kc-filter-type-select\"\n              toggle={(ref) => (\n                <MenuToggle\n                  ref={ref}\n                  onClick={toggleFilterDropdown}\n                  isExpanded={filterDropdownOpen}\n                  style={{ width: \"300px\" }}\n                >\n                  {filter}\n                </MenuToggle>\n              )}\n              onSelect={(_, value) => {\n                setFilter(value as ResultsFilter);\n                toggleFilterDropdown();\n                refresh();\n              }}\n              selected={filter}\n            >\n              <SelectList>\n                <SelectOption\n                  data-testid=\"all-results-option\"\n                  value={ResultsFilter.All}\n                >\n                  {t(\"allResults\")}\n                </SelectOption>\n                <SelectOption\n                  data-testid=\"result-permit-option\"\n                  value={ResultsFilter.StatusPermitted}\n                >\n                  {t(\"resultPermit\")}\n                </SelectOption>\n                <SelectOption\n                  data-testid=\"result-deny-option\"\n                  value={ResultsFilter.StatusDenied}\n                >\n                  {t(\"resultDeny\")}\n                </SelectOption>\n              </SelectList>\n            </Select>\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n      {!noFilteredData && (\n        <Table aria-label={t(\"evaluationResults\")}>\n          <Thead>\n            <Tr>\n              <Th aria-hidden=\"true\" />\n              <Th>{t(\"resource\")}</Th>\n              <Th>{t(\"overallResults\")}</Th>\n              <Th>{t(\"scopes\")}</Th>\n              <Th aria-hidden=\"true\" />\n            </Tr>\n          </Thead>\n          {filteredResources.map((resource, rowIndex) => (\n            <AuthorizationEvaluateResource\n              key={rowIndex}\n              rowIndex={rowIndex}\n              resource={resource}\n              evaluateResults={evaluateResult.results}\n            />\n          ))}\n        </Table>\n      )}\n      {(noFilteredData || noEvaluatedData) && (\n        <>\n          <Divider />\n          <ListEmptyState\n            isSearchVariant\n            message={t(\"noSearchResults\")}\n            instructions={t(\"noSearchResultsInstructions\")}\n          />\n        </>\n      )}\n      <Form>\n        <FixedButtonsGroup name=\"authorization\">\n          <Button data-testid=\"authorization-eval\" id=\"back-btn\" onClick={back}>\n            {t(\"back\")}\n          </Button>{\" \"}\n          <Button\n            data-testid=\"authorization-reevaluate\"\n            id=\"reevaluate-btn\"\n            variant=\"secondary\"\n            onClick={refresh}\n          >\n            {t(\"reevaluate\")}\n          </Button>{\" \"}\n          <AuthorizationDataModal data={evaluateResult.rpt!} />\n        </FixedButtonsGroup>\n      </Form>\n    </PageSection>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyEvaluationResponse from \"@keycloak/keycloak-admin-client/lib/defs/policyEvaluationResponse\";\nimport type ResourceEvaluation from \"@keycloak/keycloak-admin-client/lib/defs/resourceEvaluation\";\nimport type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\nimport {\n  HelpItem,\n  SelectControl,\n  TextControl,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  ExpandableSection,\n  FormGroup,\n  PageSection,\n  Panel,\n  PanelHeader,\n  PanelMainBody,\n  Switch,\n  Title,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ForbiddenSection } from \"../../ForbiddenSection\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { ClientSelect } from \"../../components/client/ClientSelect\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport {\n  KeyValueType,\n  keyValueToArray,\n} from \"../../components/key-value-form/key-value-convert\";\nimport { UserSelect } from \"../../components/users/UserSelect\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { FormFields } from \"../ClientDetails\";\nimport { defaultContextAttributes } from \"../utils\";\nimport { KeyBasedAttributeInput } from \"./KeyBasedAttributeInput\";\nimport { Results } from \"./evaluate/Results\";\n\ninterface EvaluateFormInputs\n  extends Omit<ResourceEvaluation, \"context\" | \"resources\"> {\n  alias: string;\n  authScopes: string[];\n  context: {\n    attributes: Record<string, string>[];\n  };\n  resources?: Record<string, string>[];\n  client: FormFields;\n  user: string[];\n}\n\nexport type AttributeType = {\n  key: string;\n  name: string;\n  custom?: boolean;\n  values?: {\n    [key: string]: string;\n  }[];\n};\n\ntype ClientSettingsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n};\n\nexport type AttributeForm = Omit<\n  EvaluateFormInputs,\n  \"context\" | \"resources\"\n> & {\n  context: {\n    attributes?: KeyValueType[];\n  };\n  resources?: KeyValueType[];\n};\n\ntype Props = ClientSettingsProps & EvaluationResultRepresentation;\n\nexport const AuthorizationEvaluate = (props: Props) => {\n  const { hasAccess } = useAccess();\n\n  if (!hasAccess(\"view-users\")) {\n    return <ForbiddenSection permissionNeeded=\"view-users\" />;\n  }\n\n  return <AuthorizationEvaluateContent {...props} />;\n};\n\nconst AuthorizationEvaluateContent = ({ client }: Props) => {\n  const { adminClient } = useAdminClient();\n\n  const form = useForm<EvaluateFormInputs>({ mode: \"onChange\" });\n  const {\n    control,\n    reset,\n    trigger,\n    formState: { isValid },\n  } = form;\n  const { t } = useTranslation();\n  const { addError } = useAlerts();\n  const realm = useRealm();\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [applyToResourceType, setApplyToResourceType] = useState(false);\n  const [resources, setResources] = useState<ResourceRepresentation[]>([]);\n  const [scopes, setScopes] = useState<ScopeRepresentation[]>([]);\n  const [evaluateResult, setEvaluateResult] =\n    useState<PolicyEvaluationResponse>();\n  const [clientRoles, setClientRoles] = useState<RoleRepresentation[]>([]);\n\n  useFetch(\n    () => adminClient.roles.find(),\n    (roles) => {\n      setClientRoles(roles);\n    },\n    [],\n  );\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.clients.listResources({\n          id: client.id!,\n        }),\n        adminClient.clients.listAllScopes({\n          id: client.id!,\n        }),\n      ]),\n    ([resources, scopes]) => {\n      setResources(resources);\n      setScopes(scopes);\n    },\n    [],\n  );\n\n  const evaluate = async () => {\n    if (!(await trigger())) {\n      return;\n    }\n    const formValues = form.getValues();\n    const keys = keyValueToArray(formValues.resources as KeyValueType[]);\n    const resEval: ResourceEvaluation = {\n      roleIds: formValues.roleIds ?? [],\n      clientId: formValues.client.id!,\n      userId: formValues.user![0],\n      resources: resources\n        .filter((resource) => Object.keys(keys).includes(resource.name!))\n        .map((r) => ({\n          ...r,\n          scopes: r.scopes?.filter((s) =>\n            Object.values(keys)\n              .flatMap((v) => v)\n              .includes(s.name!),\n          ),\n        })),\n      entitlements: false,\n      context: {\n        attributes: Object.fromEntries(\n          formValues.context.attributes\n            .filter((item) => item.key || item.value !== \"\")\n            .map(({ key, value }) => [key, value]),\n        ),\n      },\n    };\n\n    try {\n      const evaluation = await adminClient.clients.evaluateResource(\n        { id: client.id!, realm: realm.realm },\n        resEval,\n      );\n\n      setEvaluateResult(evaluation);\n    } catch (error) {\n      addError(\"evaluateError\", error);\n    }\n  };\n\n  const user = useWatch({ control, name: \"user\", defaultValue: [] });\n  const roles = useWatch({ control, name: \"roleIds\", defaultValue: [] });\n\n  if (evaluateResult) {\n    return (\n      <Results\n        evaluateResult={evaluateResult}\n        refresh={evaluate}\n        back={() => setEvaluateResult(undefined)}\n      />\n    );\n  }\n\n  return (\n    <PageSection>\n      <FormProvider {...form}>\n        <Panel>\n          <PanelHeader>\n            <Title headingLevel=\"h2\">{t(\"identityInformation\")}</Title>\n          </PanelHeader>\n          <PanelMainBody>\n            <FormAccess isHorizontal role=\"view-clients\">\n              <ClientSelect\n                name=\"client\"\n                label=\"client\"\n                helpText={\"clientHelp\"}\n                defaultValue={client.clientId}\n              />\n              <UserSelect\n                name=\"user\"\n                label=\"users\"\n                helpText={t(\"selectUser\")}\n                defaultValue={[]}\n                variant=\"typeahead\"\n                isRequired={roles?.length === 0}\n              />\n              <SelectControl\n                name=\"roleIds\"\n                label={t(\"roles\")}\n                labelIcon={t(\"rolesHelp\")}\n                variant=\"typeaheadMulti\"\n                placeholderText={t(\"selectARole\")}\n                controller={{\n                  defaultValue: [],\n                  rules: {\n                    required: {\n                      value: user.length === 0,\n                      message: t(\"required\"),\n                    },\n                  },\n                }}\n                options={clientRoles.map((role) => role.name!)}\n              />\n            </FormAccess>\n          </PanelMainBody>\n        </Panel>\n        <Panel>\n          <PanelHeader>\n            <Title headingLevel=\"h2\">{t(\"permissions\")}</Title>\n          </PanelHeader>\n          <PanelMainBody>\n            <FormAccess isHorizontal role=\"view-clients\">\n              <FormGroup\n                label={t(\"applyToResourceType\")}\n                fieldId=\"applyToResourceType\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"applyToResourceTypeHelp\")}\n                    fieldLabelId=\"applyToResourceType\"\n                  />\n                }\n              >\n                <Switch\n                  id=\"applyToResource-switch\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={applyToResourceType}\n                  onChange={(_event, val) => setApplyToResourceType(val)}\n                  aria-label={t(\"applyToResourceType\")}\n                />\n              </FormGroup>\n              {!applyToResourceType ? (\n                <FormGroup\n                  label={t(\"resourcesAndScopes\")}\n                  id=\"resourcesAndScopes\"\n                  labelIcon={\n                    <HelpItem\n                      helpText={t(\"contextualAttributesHelp\")}\n                      fieldLabelId={`resourcesAndScopes`}\n                    />\n                  }\n                  fieldId=\"resourcesAndScopes\"\n                >\n                  <KeyBasedAttributeInput\n                    selectableValues={resources.map<AttributeType>((item) => ({\n                      name: item.name!,\n                      key: item._id!,\n                    }))}\n                    resources={resources}\n                    name=\"resources\"\n                  />\n                </FormGroup>\n              ) : (\n                <>\n                  <TextControl\n                    name=\"alias\"\n                    label={t(\"resourceType\")}\n                    labelIcon={t(\"resourceTypeHelp\")}\n                    rules={{ required: t(\"required\") }}\n                  />\n                  <SelectControl\n                    name=\"authScopes\"\n                    label={t(\"authScopes\")}\n                    labelIcon={t(\"scopesSelect\")}\n                    controller={{\n                      defaultValue: [],\n                    }}\n                    variant=\"typeaheadMulti\"\n                    options={scopes.map((s) => s.name!)}\n                  />\n                </>\n              )}\n              <ExpandableSection\n                toggleText={t(\"contextualInfo\")}\n                onToggle={() => setIsExpanded(!isExpanded)}\n                isExpanded={isExpanded}\n              >\n                <FormGroup\n                  label={t(\"contextualAttributes\")}\n                  id=\"contextualAttributes\"\n                  labelIcon={\n                    <HelpItem\n                      helpText={t(\"contextualAttributesHelp\")}\n                      fieldLabelId={`contextualAttributes`}\n                    />\n                  }\n                  fieldId=\"contextualAttributes\"\n                >\n                  <KeyBasedAttributeInput\n                    selectableValues={defaultContextAttributes}\n                    name=\"context.attributes\"\n                  />\n                </FormGroup>\n              </ExpandableSection>\n            </FormAccess>\n          </PanelMainBody>\n        </Panel>\n        <ActionGroup>\n          <Button\n            data-testid=\"authorization-eval\"\n            id=\"authorization-eval\"\n            className=\"pf-v5-u-mr-md\"\n            isDisabled={!isValid}\n            onClick={() => evaluate()}\n          >\n            {t(\"evaluate\")}\n          </Button>\n          <Button\n            data-testid=\"authorization-revert\"\n            id=\"authorization-revert\"\n            className=\"pf-v5-u-mr-md\"\n            variant=\"link\"\n            onClick={() => reset()}\n          >\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormProvider>\n    </PageSection>\n  );\n};\n","import type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport {\n  TextAreaControl,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { useParams } from \"../../utils/useParams\";\nimport type { ClientParams } from \"../routes/Client\";\n\nexport const AuthorizationExport = () => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { clientId } = useParams<ClientParams>();\n  const { addAlert, addError } = useAlerts();\n\n  const [code, setCode] = useState<string>();\n  const [authorizationDetails, setAuthorizationDetails] =\n    useState<ResourceServerRepresentation>();\n\n  useFetch(\n    () =>\n      adminClient.clients.exportResource({\n        id: clientId,\n      }),\n\n    (authDetails) => {\n      setCode(JSON.stringify(authDetails, null, 2));\n      setAuthorizationDetails(authDetails);\n    },\n    [],\n  );\n\n  const exportAuthDetails = () => {\n    try {\n      saveAs(\n        new Blob([prettyPrintJSON(authorizationDetails)], {\n          type: \"application/json\",\n        }),\n        \"test-authz-config.json\",\n      );\n      addAlert(t(\"exportAuthDetailsSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"exportAuthDetailsError\", error);\n    }\n  };\n\n  if (!code) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection>\n      <FormAccess\n        isHorizontal\n        role=\"manage-authorization\"\n        className=\"pf-v5-u-mt-lg\"\n      >\n        <TextAreaControl\n          name=\"authDetails\"\n          label={t(\"authDetails\")}\n          labelIcon={t(\"authDetailsHelp\")}\n          resizeOrientation=\"vertical\"\n          defaultValue={code!}\n          readOnly\n          rows={10}\n        />\n        <ActionGroup>\n          <Button\n            data-testid=\"authorization-export-download\"\n            onClick={() => exportAuthDetails()}\n          >\n            {t(\"download\")}\n          </Button>\n          <Button\n            data-testid=\"authorization-export-copy\"\n            variant=\"secondary\"\n            onClick={async () => {\n              try {\n                await navigator.clipboard.writeText(code!);\n                addAlert(t(\"copied\"), AlertVariant.success);\n              } catch (error) {\n                addError(\"copyError\", error);\n              }\n            }}\n          >\n            {t(\"copy\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import {\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, Path } from \"react-router-dom\";\n\ntype DetailDescriptionProps<T> = {\n  name: string;\n  array?: string[] | T[];\n  convert?: (obj: T) => string;\n};\n\nexport function DetailDescription<T>(props: DetailDescriptionProps<T>) {\n  return <DetailDescriptionLink {...props} />;\n}\n\ntype DetailDescriptionLinkProps<T> = DetailDescriptionProps<T> & {\n  link?: (element: T) => Partial<Path>;\n};\n\nexport function DetailDescriptionLink<T>({\n  name,\n  array,\n  convert,\n  link,\n}: DetailDescriptionLinkProps<T>) {\n  const { t } = useTranslation();\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTerm>{t(name)}</DescriptionListTerm>\n      <DescriptionListDescription>\n        {array?.map((element) => {\n          const value =\n            typeof element === \"string\" ? element : convert!(element);\n          return link ? (\n            <Link key={value} to={link(element as T)} className=\"pf-v5-u-pr-sm\">\n              {value}\n            </Link>\n          ) : (\n            <span key={value} className=\"pf-v5-u-pr-sm\">\n              {value}\n            </span>\n          );\n        })}\n        {array?.length === 0 && <i>{t(\"none\")}</i>}\n      </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n}\n","import { useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Button,\n  Tooltip,\n  EmptyStateHeader,\n  EmptyStateFooter,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\n\nimport { PermissionType, toNewPermission } from \"../routes/NewPermission\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toUpperCase } from \"../../util\";\n\ntype EmptyButtonProps = {\n  permissionType: PermissionType;\n  disabled?: boolean;\n  clientId: string;\n};\n\nconst EmptyButton = ({\n  permissionType,\n  disabled = false,\n  clientId,\n}: EmptyButtonProps) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n  return (\n    <Button\n      data-testid={`create-${permissionType}`}\n      className={\n        disabled ? \"keycloak__permissions__empty_state \" : \"\" + \"pf-v5-u-m-sm\"\n      }\n      variant=\"secondary\"\n      onClick={() =>\n        !disabled &&\n        navigate(toNewPermission({ realm, id: clientId, permissionType }))\n      }\n    >\n      {t(`create${toUpperCase(permissionType)}BasedPermission`)}\n    </Button>\n  );\n};\n\nconst TooltipEmptyButton = ({\n  permissionType,\n  disabled,\n  ...props\n}: EmptyButtonProps) => {\n  const { t } = useTranslation();\n  return disabled ? (\n    <Tooltip content={t(`no${toUpperCase(permissionType)}CreateHint`)}>\n      <EmptyButton\n        {...props}\n        disabled={disabled}\n        permissionType={permissionType}\n      />\n    </Tooltip>\n  ) : (\n    <EmptyButton\n      {...props}\n      disabled={disabled}\n      permissionType={permissionType}\n    />\n  );\n};\n\ntype EmptyPermissionsStateProps = {\n  clientId: string;\n  isResourceEnabled?: boolean;\n  isScopeEnabled?: boolean;\n};\n\nexport const EmptyPermissionsState = ({\n  clientId,\n  isResourceEnabled,\n  isScopeEnabled,\n}: EmptyPermissionsStateProps) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState data-testid=\"empty-state\" variant=\"lg\">\n      <EmptyStateHeader\n        titleText={<>{t(\"emptyPermissions\")}</>}\n        icon={<EmptyStateIcon icon={PlusCircleIcon} />}\n        headingLevel=\"h1\"\n      />\n      <EmptyStateBody>{t(\"emptyPermissionInstructions\")}</EmptyStateBody>\n      <EmptyStateFooter>\n        <TooltipEmptyButton\n          permissionType=\"resource\"\n          disabled={isResourceEnabled}\n          clientId={clientId}\n        />\n        <br />\n        <TooltipEmptyButton\n          permissionType=\"scope\"\n          disabled={isScopeEnabled}\n          clientId={clientId}\n        />\n      </EmptyStateFooter>\n    </EmptyState>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Label } from \"@patternfly/react-core\";\n\ntype MoreLabelProps = {\n  array: unknown[] | undefined;\n};\n\nexport const MoreLabel = ({ array }: MoreLabelProps) => {\n  const { t } = useTranslation();\n\n  if (!array || array.length <= 1) {\n    return null;\n  }\n  return <Label color=\"blue\">{t(\"more\", { count: array.length - 1 })}</Label>;\n};\n","import type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { SelectControl, TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  Dropdown,\n  Form,\n  MenuToggle,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport useToggle from \"../../utils/useToggle\";\n\nimport \"./search-dropdown.css\";\n\nexport type SearchForm = {\n  name?: string;\n  resource?: string;\n  scope?: string;\n  type?: string;\n  uri?: string;\n  owner?: string;\n};\n\ntype SearchDropdownProps = {\n  types?: PolicyProviderRepresentation[] | PolicyProviderRepresentation[];\n  search: SearchForm;\n  onSearch: (form: SearchForm) => void;\n  type: \"resource\" | \"policy\" | \"permission\";\n};\n\nexport const SearchDropdown = ({\n  types,\n  search,\n  onSearch,\n  type,\n}: SearchDropdownProps) => {\n  const { t } = useTranslation();\n  const form = useForm<SearchForm>({ mode: \"onChange\" });\n  const {\n    reset,\n    formState: { isDirty },\n    handleSubmit,\n  } = form;\n\n  const [open, toggle] = useToggle();\n\n  const submit = (form: SearchForm) => {\n    toggle();\n    onSearch(form);\n  };\n\n  useEffect(() => reset(search), [search]);\n\n  return (\n    <Dropdown\n      onOpenChange={toggle}\n      toggle={(ref) => (\n        <MenuToggle\n          data-testid=\"searchdropdown_dorpdown\"\n          ref={ref}\n          onClick={toggle}\n          className=\"keycloak__client_authentication__searchdropdown\"\n        >\n          {type === \"resource\" && t(\"searchClientAuthorizationResource\")}\n          {type === \"policy\" && t(\"searchClientAuthorizationPolicy\")}\n          {type === \"permission\" && t(\"searchClientAuthorizationPermission\")}\n        </MenuToggle>\n      )}\n      isOpen={open}\n    >\n      <FormProvider {...form}>\n        <Form\n          isHorizontal\n          className=\"keycloak__client_authentication__searchdropdown_form\"\n          onSubmit={handleSubmit(submit)}\n        >\n          <TextControl name=\"name\" label={t(\"name\")} />\n          {type === \"resource\" && (\n            <>\n              <TextControl name=\"type\" label={t(\"type\")} />\n              <TextControl name=\"uris\" label={t(\"uris\")} />\n              <TextControl name=\"owner\" label={t(\"owner\")} />\n            </>\n          )}\n          {type !== \"resource\" && type !== \"policy\" && (\n            <TextControl name=\"resource\" label={t(\"resource\")} />\n          )}\n          {type !== \"policy\" && <TextControl name=\"scope\" label={t(\"scope\")} />}\n          {type !== \"resource\" && (\n            <SelectControl\n              name=\"type\"\n              label={t(\"type\")}\n              controller={{\n                defaultValue: \"\",\n              }}\n              options={[\n                { key: \"\", value: t(\"allTypes\") },\n                ...(types || []).map(({ type, name }) => ({\n                  key: type!,\n                  value: name!,\n                })),\n              ]}\n            />\n          )}\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"search-btn\"\n              isDisabled={!isDirty}\n            >\n              {t(\"search\")}\n            </Button>\n            <Button\n              variant=\"link\"\n              data-testid=\"revert-btn\"\n              onClick={() => onSearch({})}\n            >\n              {t(\"clear\")}\n            </Button>\n          </ActionGroup>\n        </Form>\n      </FormProvider>\n    </Dropdown>\n  );\n};\n","import type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport {\n  ListEmptyState,\n  PaginatingTableToolbar,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Alert,\n  AlertVariant,\n  ButtonVariant,\n  DescriptionList,\n  Divider,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\nimport { EmptyPermissionsState } from \"./EmptyPermissionsState\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\n\nimport \"./permissions.css\";\n\ntype PermissionsProps = {\n  clientId: string;\n  isDisabled?: boolean;\n};\n\ntype ExpandablePolicyRepresentation = PolicyRepresentation & {\n  associatedPolicies?: PolicyRepresentation[];\n  isExpanded: boolean;\n};\n\nconst AssociatedPoliciesRenderer = ({\n  row,\n}: {\n  row: ExpandablePolicyRepresentation;\n}) => {\n  return (\n    <>\n      {row.associatedPolicies?.[0]?.name || \"—\"}{\" \"}\n      <MoreLabel array={row.associatedPolicies} />\n    </>\n  );\n};\n\nexport const AuthorizationPermissions = ({\n  clientId,\n  isDisabled = false,\n}: PermissionsProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [permissions, setPermissions] =\n    useState<ExpandablePolicyRepresentation[]>();\n  const [selectedPermission, setSelectedPermission] =\n    useState<PolicyRepresentation>();\n  const [policyProviders, setPolicyProviders] =\n    useState<PolicyProviderRepresentation[]>();\n  const [disabledCreate, setDisabledCreate] = useState<{\n    resources: boolean;\n    scopes: boolean;\n  }>();\n  const [createOpen, toggleCreate] = useToggle();\n  const [search, setSearch] = useState<SearchForm>({});\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n\n  useFetch(\n    async () => {\n      const permissions = await adminClient.clients.findPermissions({\n        first,\n        max: max + 1,\n        id: clientId,\n        ...search,\n      });\n\n      return await Promise.all(\n        permissions.map(async (permission) => {\n          const associatedPolicies =\n            await adminClient.clients.getAssociatedPolicies({\n              id: clientId,\n              permissionId: permission.id!,\n            });\n\n          return {\n            ...permission,\n            associatedPolicies,\n            isExpanded: false,\n          };\n        }),\n      );\n    },\n    setPermissions,\n    [key, search, first, max],\n  );\n\n  useFetch(\n    async () => {\n      const params = {\n        first: 0,\n        max: 1,\n      };\n      const [policies, resources, scopes] = await Promise.all([\n        adminClient.clients.listPolicyProviders({\n          id: clientId,\n        }),\n        adminClient.clients.listResources({ ...params, id: clientId }),\n        adminClient.clients.listAllScopes({ ...params, id: clientId }),\n      ]);\n      return {\n        policies: policies.filter(\n          (p) => p.type === \"resource\" || p.type === \"scope\",\n        ),\n        resources: resources.length !== 1,\n        scopes: scopes.length !== 1,\n      };\n    },\n    ({ policies, resources, scopes }) => {\n      setPolicyProviders(policies);\n      setDisabledCreate({ resources, scopes });\n    },\n    [],\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deletePermission\",\n    messageKey: t(\"deletePermissionConfirm\", {\n      permission: selectedPermission?.name,\n    }),\n    continueButtonVariant: ButtonVariant.danger,\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPermission({\n          id: clientId,\n          type: selectedPermission?.type!,\n          permissionId: selectedPermission?.id!,\n        });\n        addAlert(t(\"permissionDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"permissionDeletedError\", error);\n      }\n    },\n  });\n\n  if (!permissions) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = permissions.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={permissions.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          toolbarItem={\n            <>\n              <ToolbarItem>\n                <SearchDropdown\n                  types={policyProviders}\n                  search={search}\n                  onSearch={setSearch}\n                  type=\"permission\"\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  onOpenChange={toggleCreate}\n                  toggle={(ref) => (\n                    <MenuToggle\n                      ref={ref}\n                      onClick={toggleCreate}\n                      isDisabled={isDisabled}\n                      variant=\"primary\"\n                      data-testid=\"permissionCreateDropdown\"\n                    >\n                      {t(\"createPermission\")}\n                    </MenuToggle>\n                  )}\n                  isOpen={createOpen}\n                >\n                  <DropdownList>\n                    <DropdownItem\n                      data-testid=\"create-resource\"\n                      isDisabled={isDisabled || disabledCreate?.resources}\n                      component=\"button\"\n                      onClick={() =>\n                        navigate(\n                          toNewPermission({\n                            realm,\n                            id: clientId,\n                            permissionType: \"resource\",\n                          }),\n                        )\n                      }\n                    >\n                      {t(\"createResourceBasedPermission\")}\n                    </DropdownItem>\n                    <Divider />\n                    <DropdownItem\n                      data-testid=\"create-scope\"\n                      isDisabled={isDisabled || disabledCreate?.scopes}\n                      component=\"button\"\n                      onClick={() =>\n                        navigate(\n                          toNewPermission({\n                            realm,\n                            id: clientId,\n                            permissionType: \"scope\",\n                          }),\n                        )\n                      }\n                    >\n                      {t(\"createScopeBasedPermission\")}\n                      {disabledCreate?.scopes && (\n                        <Alert\n                          className=\"pf-v5-u-mt-sm\"\n                          variant=\"warning\"\n                          isInline\n                          isPlain\n                          title={t(\"noScopeCreateHint\")}\n                        />\n                      )}\n                    </DropdownItem>\n                  </DropdownList>\n                </Dropdown>\n              </ToolbarItem>\n            </>\n          }\n        >\n          {!noData && (\n            <Table aria-label={t(\"resources\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th aria-hidden=\"true\" />\n                  <Th>{t(\"name\")}</Th>\n                  <Th>{t(\"type\")}</Th>\n                  <Th>{t(\"associatedPolicy\")}</Th>\n                  <Th>{t(\"description\")}</Th>\n                  <Th aria-hidden=\"true\" />\n                </Tr>\n              </Thead>\n              {permissions.map((permission, rowIndex) => (\n                <Tbody key={permission.id} isExpanded={permission.isExpanded}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: permission.isExpanded,\n                        onToggle: (_, rowIndex) => {\n                          const rows = permissions.map((p, index) =>\n                            index === rowIndex\n                              ? { ...p, isExpanded: !p.isExpanded }\n                              : p,\n                          );\n                          setPermissions(rows);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${permission.name}`}>\n                      <Link\n                        to={toPermissionDetails({\n                          realm,\n                          id: clientId,\n                          permissionType: permission.type!,\n                          permissionId: permission.id!,\n                        })}\n                      >\n                        {permission.name}\n                      </Link>\n                    </Td>\n                    <Td>\n                      {\n                        policyProviders?.find((p) => p.type === permission.type)\n                          ?.name\n                      }\n                    </Td>\n                    <Td>\n                      <AssociatedPoliciesRenderer row={permission} />\n                    </Td>\n                    <Td>{permission.description || \"—\"}</Td>\n                    <Td\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"delete\"),\n                            onClick: async () => {\n                              setSelectedPermission(permission);\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    ></Td>\n                  </Tr>\n                  <Tr\n                    key={`child-${permission.id}`}\n                    isExpanded={permission.isExpanded}\n                  >\n                    <Td />\n                    <Td colSpan={5}>\n                      <ExpandableRowContent>\n                        {permission.isExpanded && (\n                          <DescriptionList\n                            isHorizontal\n                            className=\"keycloak_resource_details\"\n                          >\n                            <DetailDescriptionLink\n                              name=\"associatedPolicy\"\n                              array={permission.associatedPolicies}\n                              convert={(p) => p.name!}\n                              link={(p) =>\n                                toPolicyDetails({\n                                  id: clientId,\n                                  realm,\n                                  policyId: p.id!,\n                                  policyType: p.type!,\n                                })\n                              }\n                            />\n                          </DescriptionList>\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </Table>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && !searching && (\n        <EmptyPermissionsState\n          clientId={clientId}\n          isResourceEnabled={!isDisabled && disabledCreate?.resources}\n          isScopeEnabled={!isDisabled && disabledCreate?.scopes}\n        />\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n    </PageSection>\n  );\n};\n","import type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport {\n  ListEmptyState,\n  PaginatingTableToolbar,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  DescriptionList,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toUpperCase } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toCreatePolicy } from \"../routes/NewPolicy\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { NewPolicyDialog } from \"./NewPolicyDialog\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\n\ntype PoliciesProps = {\n  clientId: string;\n  isDisabled?: boolean;\n};\n\ntype ExpandablePolicyRepresentation = PolicyRepresentation & {\n  dependentPolicies?: PolicyRepresentation[];\n  isExpanded: boolean;\n};\n\nconst DependentPoliciesRenderer = ({\n  row,\n}: {\n  row: ExpandablePolicyRepresentation;\n}) => {\n  return (\n    <>\n      {row.dependentPolicies?.[0]?.name}{\" \"}\n      <MoreLabel array={row.dependentPolicies} />\n    </>\n  );\n};\n\nexport const AuthorizationPolicies = ({\n  clientId,\n  isDisabled = false,\n}: PoliciesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n\n  const [policies, setPolicies] = useState<ExpandablePolicyRepresentation[]>();\n  const [selectedPolicy, setSelectedPolicy] =\n    useState<ExpandablePolicyRepresentation>();\n  const [policyProviders, setPolicyProviders] =\n    useState<PolicyProviderRepresentation[]>();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState<SearchForm>({});\n  const [newDialog, toggleDialog] = useToggle();\n\n  useFetch(\n    async () => {\n      const policies = await adminClient.clients.listPolicies({\n        first,\n        max: max + 1,\n        id: clientId,\n        permission: \"false\",\n        ...search,\n      });\n\n      return await Promise.all([\n        adminClient.clients.listPolicyProviders({ id: clientId }),\n        ...(policies || []).map(async (policy) => {\n          const dependentPolicies =\n            await adminClient.clients.listDependentPolicies({\n              id: clientId,\n              policyId: policy.id!,\n            });\n\n          return {\n            ...policy,\n            dependentPolicies,\n            isExpanded: false,\n          };\n        }),\n      ]);\n    },\n    ([providers, ...policies]) => {\n      setPolicyProviders(\n        providers.filter((p) => p.type !== \"resource\" && p.type !== \"scope\"),\n      );\n      setPolicies(policies);\n    },\n    [key, search, first, max],\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deletePolicy\",\n    children: (\n      <>\n        {t(\"deletePolicyConfirm\")}\n        {selectedPolicy?.dependentPolicies &&\n          selectedPolicy.dependentPolicies.length > 0 && (\n            <Alert\n              variant=\"warning\"\n              isInline\n              isPlain\n              component=\"p\"\n              title={t(\"deletePolicyWarning\")}\n              className=\"pf-v5-u-pt-lg\"\n            >\n              <p className=\"pf-v5-u-pt-xs\">\n                {selectedPolicy.dependentPolicies.map((policy) => (\n                  <strong key={policy.id} className=\"pf-v5-u-pr-md\">\n                    {policy.name}\n                  </strong>\n                ))}\n              </p>\n            </Alert>\n          )}\n      </>\n    ),\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPolicy({\n          id: clientId,\n          policyId: selectedPolicy?.id!,\n        });\n        addAlert(t(\"policyDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"policyDeletedError\", error);\n      }\n    },\n  });\n\n  if (!policies) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = policies.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <>\n          {newDialog && (\n            <NewPolicyDialog\n              policyProviders={policyProviders}\n              onSelect={(p) =>\n                navigate(\n                  toCreatePolicy({ id: clientId, realm, policyType: p.type! }),\n                )\n              }\n              toggleDialog={toggleDialog}\n            />\n          )}\n\n          <PaginatingTableToolbar\n            count={policies.length}\n            first={first}\n            max={max}\n            onNextClick={setFirst}\n            onPreviousClick={setFirst}\n            onPerPageSelect={(first, max) => {\n              setFirst(first);\n              setMax(max);\n            }}\n            toolbarItem={\n              <>\n                <ToolbarItem>\n                  <SearchDropdown\n                    types={policyProviders}\n                    search={search}\n                    onSearch={setSearch}\n                    type=\"policy\"\n                  />\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    data-testid=\"createPolicy\"\n                    onClick={toggleDialog}\n                    isDisabled={isDisabled}\n                  >\n                    {t(\"createPolicy\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            }\n          >\n            {!noData && (\n              <Table aria-label={t(\"resources\")} variant=\"compact\">\n                <Thead>\n                  <Tr>\n                    <Th aria-hidden=\"true\" />\n                    <Th>{t(\"name\")}</Th>\n                    <Th>{t(\"type\")}</Th>\n                    <Th>{t(\"dependentPermission\")}</Th>\n                    <Th>{t(\"description\")}</Th>\n                    <Th aria-hidden=\"true\" />\n                  </Tr>\n                </Thead>\n                {policies.map((policy, rowIndex) => (\n                  <Tbody key={policy.id} isExpanded={policy.isExpanded}>\n                    <Tr>\n                      <Td\n                        expand={{\n                          rowIndex,\n                          isExpanded: policy.isExpanded,\n                          onToggle: (_, rowIndex) => {\n                            const rows = policies.map((policy, index) =>\n                              index === rowIndex\n                                ? { ...policy, isExpanded: !policy.isExpanded }\n                                : policy,\n                            );\n                            setPolicies(rows);\n                          },\n                        }}\n                      />\n                      <Td data-testid={`name-column-${policy.name}`}>\n                        <Link\n                          to={toPolicyDetails({\n                            realm,\n                            id: clientId,\n                            policyType: policy.type!,\n                            policyId: policy.id!,\n                          })}\n                        >\n                          {policy.name}\n                        </Link>\n                      </Td>\n                      <Td>{toUpperCase(policy.type!)}</Td>\n                      <Td>\n                        <DependentPoliciesRenderer row={policy} />\n                      </Td>\n                      <Td>{policy.description}</Td>\n                      {!isDisabled && (\n                        <Td\n                          actions={{\n                            items: [\n                              {\n                                title: t(\"delete\"),\n                                onClick: () => {\n                                  setSelectedPolicy(policy);\n                                  toggleDeleteDialog();\n                                },\n                              },\n                            ],\n                          }}\n                        />\n                      )}\n                    </Tr>\n                    <Tr\n                      key={`child-${policy.id}`}\n                      isExpanded={policy.isExpanded}\n                    >\n                      <Td />\n                      <Td colSpan={3 + (isDisabled ? 0 : 1)}>\n                        <ExpandableRowContent>\n                          {policy.isExpanded && (\n                            <DescriptionList\n                              isHorizontal\n                              className=\"keycloak_resource_details\"\n                            >\n                              <DetailDescriptionLink\n                                name=\"dependentPermission\"\n                                array={policy.dependentPolicies}\n                                convert={(p) => p.name!}\n                                link={(permission) =>\n                                  toPermissionDetails({\n                                    realm,\n                                    id: clientId,\n                                    permissionId: permission.id!,\n                                    permissionType: permission.type!,\n                                  })\n                                }\n                              />\n                            </DescriptionList>\n                          )}\n                        </ExpandableRowContent>\n                      </Td>\n                    </Tr>\n                  </Tbody>\n                ))}\n              </Table>\n            )}\n          </PaginatingTableToolbar>\n        </>\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          isDisabled={isDisabled}\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n      {noData && !searching && (\n        <>\n          {newDialog && (\n            <NewPolicyDialog\n              policyProviders={policyProviders?.filter(\n                (p) => p.type !== \"aggregate\",\n              )}\n              onSelect={(p) =>\n                navigate(\n                  toCreatePolicy({ id: clientId, realm, policyType: p.type! }),\n                )\n              }\n              toggleDialog={toggleDialog}\n            />\n          )}\n          <ListEmptyState\n            message={t(\"emptyPolicies\")}\n            instructions={t(\"emptyPoliciesInstructions\")}\n            isDisabled={isDisabled}\n            primaryActionText={t(\"createPolicy\")}\n            onPrimaryAction={toggleDialog}\n          />\n        </>\n      )}\n    </PageSection>\n  );\n};\n","import type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { DescriptionList } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toScopeDetails } from \"../routes/Scope\";\nimport { DetailDescription, DetailDescriptionLink } from \"./DetailDescription\";\n\nimport \"./detail-cell.css\";\n\ntype Scope = { id: string; name: string }[];\n\ntype DetailCellProps = {\n  id: string;\n  clientId: string;\n  uris?: string[];\n};\n\nexport const DetailCell = ({ id, clientId, uris }: DetailCellProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { realm } = useRealm();\n  const [scope, setScope] = useState<Scope>();\n  const [permissions, setPermissions] =\n    useState<ResourceServerRepresentation[]>();\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.clients.listScopesByResource({\n          id: clientId,\n          resourceName: id,\n        }),\n        adminClient.clients.listPermissionsByResource({\n          id: clientId,\n          resourceId: id,\n        }),\n      ]),\n    ([scopes, permissions]) => {\n      setScope(scopes);\n      setPermissions(permissions);\n    },\n    [],\n  );\n\n  if (!permissions || !scope) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <DescriptionList isHorizontal className=\"keycloak_resource_details\">\n      <DetailDescription name=\"uris\" array={uris} />\n      <DetailDescriptionLink\n        name=\"scopes\"\n        array={scope}\n        convert={(s) => s.name}\n        link={(scope) =>\n          toScopeDetails({ id: clientId, realm, scopeId: scope.id! })\n        }\n      />\n      <DetailDescriptionLink\n        name=\"associatedPermissions\"\n        array={permissions}\n        convert={(p) => p.name!}\n        link={(permission) =>\n          toPermissionDetails({\n            id: clientId,\n            realm,\n            permissionId: permission.id!,\n            permissionType: \"resource\",\n          })\n        }\n      />\n    </DescriptionList>\n  );\n};\n","import type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport {\n  ListEmptyState,\n  PaginatingTableToolbar,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  Table,\n  TableText,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toCreateResource } from \"../routes/NewResource\";\nimport { toResourceDetails } from \"../routes/Resource\";\nimport { DetailCell } from \"./DetailCell\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\n\ntype ResourcesProps = {\n  clientId: string;\n  isDisabled?: boolean;\n};\n\ntype ExpandableResourceRepresentation = ResourceRepresentation & {\n  isExpanded: boolean;\n};\n\nconst UriRenderer = ({ row }: { row: ResourceRepresentation }) => (\n  <TableText wrapModifier=\"truncate\">\n    {row.uris?.[0]} <MoreLabel array={row.uris} />\n  </TableText>\n);\n\nexport const AuthorizationResources = ({\n  clientId,\n  isDisabled = false,\n}: ResourcesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [resources, setResources] =\n    useState<ExpandableResourceRepresentation[]>();\n  const [selectedResource, setSelectedResource] =\n    useState<ResourceRepresentation>();\n  const [permissions, setPermission] =\n    useState<ResourceServerRepresentation[]>();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState<SearchForm>({});\n\n  useFetch(\n    () => {\n      const params = {\n        first,\n        max: max + 1,\n        deep: false,\n        ...search,\n      };\n      return adminClient.clients.listResources({\n        ...params,\n        id: clientId,\n      });\n    },\n    (resources) =>\n      setResources(\n        resources.map((resource) => ({ ...resource, isExpanded: false })),\n      ),\n    [key, search, first, max],\n  );\n\n  const fetchPermissions = async (id: string) => {\n    return adminClient.clients.listPermissionsByResource({\n      id: clientId,\n      resourceId: id,\n    });\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteResource\",\n    children: (\n      <>\n        {t(\"deleteResourceConfirm\")}\n        {permissions?.length && (\n          <Alert\n            variant=\"warning\"\n            isInline\n            isPlain\n            title={t(\"deleteResourceWarning\")}\n            className=\"pf-v5-u-pt-lg\"\n          >\n            <p className=\"pf-v5-u-pt-xs\">\n              {permissions.map((permission) => (\n                <strong key={permission.id} className=\"pf-v5-u-pr-md\">\n                  {permission.name}\n                </strong>\n              ))}\n            </p>\n          </Alert>\n        )}\n      </>\n    ),\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delResource({\n          id: clientId,\n          resourceId: selectedResource?._id!,\n        });\n        addAlert(t(\"resourceDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"resourceDeletedError\", error);\n      }\n    },\n  });\n\n  if (!resources) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = resources.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={resources.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          toolbarItem={\n            <>\n              <ToolbarItem>\n                <SearchDropdown\n                  search={search}\n                  onSearch={setSearch}\n                  type=\"resource\"\n                />\n              </ToolbarItem>\n\n              <ToolbarItem>\n                <Button\n                  data-testid=\"createResource\"\n                  isDisabled={isDisabled}\n                  component={(props) => (\n                    <Link\n                      {...props}\n                      to={toCreateResource({ realm, id: clientId })}\n                    />\n                  )}\n                >\n                  {t(\"createResource\")}\n                </Button>\n              </ToolbarItem>\n            </>\n          }\n        >\n          {!noData && (\n            <Table aria-label={t(\"resources\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th aria-hidden=\"true\" />\n                  <Th>{t(\"name\")}</Th>\n                  <Th>{t(\"displayName\")}</Th>\n                  <Th>{t(\"type\")}</Th>\n                  <Th>{t(\"owner\")}</Th>\n                  <Th>{t(\"uris\")}</Th>\n                  {!isDisabled && (\n                    <>\n                      <Th aria-hidden=\"true\" />\n                      <Th aria-hidden=\"true\" />\n                    </>\n                  )}\n                </Tr>\n              </Thead>\n              {resources.map((resource, rowIndex) => (\n                <Tbody key={resource._id} isExpanded={resource.isExpanded}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: resource.isExpanded,\n                        onToggle: (_, rowIndex) => {\n                          const rows = resources.map((resource, index) =>\n                            index === rowIndex\n                              ? {\n                                  ...resource,\n                                  isExpanded: !resource.isExpanded,\n                                }\n                              : resource,\n                          );\n                          setResources(rows);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${resource.name}`}>\n                      <TableText wrapModifier=\"truncate\">\n                        <Link\n                          to={toResourceDetails({\n                            realm,\n                            id: clientId,\n                            resourceId: resource._id!,\n                          })}\n                        >\n                          {resource.name}\n                        </Link>\n                      </TableText>\n                    </Td>\n                    <Td>\n                      <TableText wrapModifier=\"truncate\">\n                        {resource.displayName}\n                      </TableText>\n                    </Td>\n                    <Td>\n                      <TableText wrapModifier=\"truncate\">\n                        {resource.type}\n                      </TableText>\n                    </Td>\n                    <Td>\n                      <TableText wrapModifier=\"truncate\">\n                        {resource.owner?.name}\n                      </TableText>\n                    </Td>\n                    <Td>\n                      <UriRenderer row={resource} />\n                    </Td>\n                    {!isDisabled && (\n                      <>\n                        <Td width={10}>\n                          <Button\n                            variant=\"link\"\n                            component={(props) => (\n                              <Link\n                                {...props}\n                                to={toNewPermission({\n                                  realm,\n                                  id: clientId,\n                                  permissionType: \"resource\",\n                                  selectedId: resource._id,\n                                })}\n                              />\n                            )}\n                          >\n                            {t(\"createPermission\")}\n                          </Button>\n                        </Td>\n                        <Td\n                          actions={{\n                            items: [\n                              {\n                                title: t(\"delete\"),\n                                onClick: async () => {\n                                  setSelectedResource(resource);\n                                  setPermission(\n                                    await fetchPermissions(resource._id!),\n                                  );\n                                  toggleDeleteDialog();\n                                },\n                              },\n                            ],\n                          }}\n                        />\n                      </>\n                    )}\n                  </Tr>\n                  <Tr\n                    key={`child-${resource._id}`}\n                    isExpanded={resource.isExpanded}\n                  >\n                    <Td />\n                    <Td colSpan={4}>\n                      <ExpandableRowContent>\n                        {resource.isExpanded && (\n                          <DetailCell\n                            clientId={clientId}\n                            id={resource._id!}\n                            uris={resource.uris}\n                          />\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </Table>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n      {noData && !searching && (\n        <ListEmptyState\n          message={t(\"emptyResources\")}\n          instructions={t(\"emptyResourcesInstructions\")}\n          isDisabled={isDisabled}\n          primaryActionText={t(\"createResource\")}\n          onPrimaryAction={() =>\n            navigate(toCreateResource({ realm, id: clientId }))\n          }\n        />\n      )}\n    </PageSection>\n  );\n};\n","import type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\nimport {\n  ListEmptyState,\n  PaginatingTableToolbar,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  DescriptionList,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toNewScope } from \"../routes/NewScope\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toResourceDetails } from \"../routes/Resource\";\nimport { toScopeDetails } from \"../routes/Scope\";\nimport { DeleteScopeDialog } from \"./DeleteScopeDialog\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\n\ntype ScopesProps = {\n  clientId: string;\n  isDisabled?: boolean;\n};\n\nexport type PermissionScopeRepresentation = ScopeRepresentation & {\n  permissions?: PolicyRepresentation[];\n  isLoaded: boolean;\n};\n\ntype ExpandableRow = {\n  id: string;\n  isExpanded: boolean;\n};\n\nexport const AuthorizationScopes = ({\n  clientId,\n  isDisabled = false,\n}: ScopesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  const [deleteDialog, toggleDeleteDialog] = useToggle();\n  const [scopes, setScopes] = useState<PermissionScopeRepresentation[]>();\n  const [selectedScope, setSelectedScope] =\n    useState<PermissionScopeRepresentation>();\n  const [collapsed, setCollapsed] = useState<ExpandableRow[]>([]);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  useFetch(\n    () => {\n      const params = {\n        first,\n        max: max + 1,\n        deep: false,\n        name: search,\n      };\n      return adminClient.clients.listAllScopes({\n        ...params,\n        id: clientId,\n      });\n    },\n    (scopes) => {\n      setScopes(scopes.map((s) => ({ ...s, isLoaded: false })));\n      setCollapsed(scopes.map((s) => ({ id: s.id!, isExpanded: false })));\n    },\n    [key, search, first, max],\n  );\n\n  const getScope = (id: string) => scopes?.find((scope) => scope.id === id)!;\n  const isExpanded = (id: string | undefined) =>\n    collapsed.find((c) => c.id === id)?.isExpanded || false;\n\n  useFetch(\n    () => {\n      const newlyOpened = collapsed\n        .filter((row) => row.isExpanded)\n        .map(({ id }) => getScope(id))\n        .filter((s) => !s.isLoaded);\n\n      return Promise.all(\n        newlyOpened.map(async (scope) => {\n          const [resources, permissions] = await Promise.all([\n            adminClient.clients.listAllResourcesByScope({\n              id: clientId,\n              scopeId: scope.id!,\n            }),\n            adminClient.clients.listAllPermissionsByScope({\n              id: clientId,\n              scopeId: scope.id!,\n            }),\n          ]);\n\n          return {\n            ...scope,\n            resources,\n            permissions,\n            isLoaded: true,\n          };\n        }),\n      );\n    },\n    (resourcesScopes) => {\n      let result = [...(scopes || [])];\n      resourcesScopes.forEach((resourceScope) => {\n        const index = scopes?.findIndex(\n          (scope) => resourceScope.id === scope.id,\n        )!;\n        result = [\n          ...result.slice(0, index),\n          resourceScope,\n          ...result.slice(index + 1),\n        ];\n      });\n\n      setScopes(result);\n    },\n    [collapsed],\n  );\n\n  if (!scopes) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = scopes.length === 0;\n  const searching = search !== \"\";\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <DeleteScopeDialog\n        clientId={clientId}\n        open={deleteDialog}\n        toggleDialog={toggleDeleteDialog}\n        selectedScope={selectedScope}\n        refresh={refresh}\n      />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={scopes.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          inputGroupName=\"search\"\n          inputGroupPlaceholder={t(\"searchByName\")}\n          inputGroupOnEnter={setSearch}\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                data-testid=\"createAuthorizationScope\"\n                component={(props) => (\n                  <Link {...props} to={toNewScope({ realm, id: clientId })} />\n                )}\n              >\n                {t(\"createAuthorizationScope\")}\n              </Button>\n            </ToolbarItem>\n          }\n        >\n          {!noData && (\n            <Table aria-label={t(\"scopes\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th aria-hidden=\"true\" />\n                  <Th>{t(\"name\")}</Th>\n                  <Th>{t(\"displayName\")}</Th>\n                  <Th aria-hidden=\"true\" />\n                  <Th aria-hidden=\"true\" />\n                </Tr>\n              </Thead>\n              {scopes.map((scope, rowIndex) => (\n                <Tbody key={scope.id} isExpanded={isExpanded(scope.id)}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: isExpanded(scope.id),\n                        onToggle: (_event, index, isExpanded) => {\n                          setCollapsed([\n                            ...collapsed.slice(0, index),\n                            { id: scope.id!, isExpanded },\n                            ...collapsed.slice(index + 1),\n                          ]);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${scope.name}`}>\n                      <Link\n                        to={toScopeDetails({\n                          realm,\n                          id: clientId,\n                          scopeId: scope.id!,\n                        })}\n                      >\n                        {scope.name}\n                      </Link>\n                    </Td>\n                    <Td>{scope.displayName}</Td>\n                    <Td width={10}>\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link\n                            {...props}\n                            to={toNewPermission({\n                              realm,\n                              id: clientId,\n                              permissionType: \"scope\",\n                              selectedId: scope.id,\n                            })}\n                          />\n                        )}\n                      >\n                        {t(\"createPermission\")}\n                      </Button>\n                    </Td>\n                    <Td\n                      isActionCell\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"delete\"),\n                            onClick: () => {\n                              setSelectedScope(scope);\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    />\n                  </Tr>\n                  <Tr\n                    key={`child-${scope.id}`}\n                    isExpanded={isExpanded(scope.id)}\n                  >\n                    <Td />\n                    <Td colSpan={4}>\n                      <ExpandableRowContent>\n                        {isExpanded(scope.id) && scope.isLoaded ? (\n                          <DescriptionList\n                            isHorizontal\n                            className=\"keycloak_resource_details\"\n                          >\n                            <DetailDescriptionLink\n                              name=\"resources\"\n                              array={scope.resources}\n                              convert={(r) => r.name!}\n                              link={(r) =>\n                                toResourceDetails({\n                                  id: clientId,\n                                  realm,\n                                  resourceId: r._id!,\n                                })\n                              }\n                            />\n                            <DetailDescriptionLink\n                              name=\"associatedPermissions\"\n                              array={scope.permissions}\n                              convert={(p) => p.name!}\n                              link={(p) =>\n                                toPermissionDetails({\n                                  id: clientId,\n                                  realm,\n                                  permissionId: p.id!,\n                                  permissionType: p.type!,\n                                })\n                              }\n                            />\n                          </DescriptionList>\n                        ) : (\n                          <KeycloakSpinner />\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </Table>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && !searching && (\n        <ListEmptyState\n          message={t(\"emptyAuthorizationScopes\")}\n          instructions={t(\"emptyAuthorizationInstructions\")}\n          isDisabled={isDisabled}\n          onPrimaryAction={() => navigate(toNewScope({ id: clientId, realm }))}\n          primaryActionText={t(\"createAuthorizationScope\")}\n        />\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          isDisabled={isDisabled}\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n    </PageSection>\n  );\n};\n","import { Fragment, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Alert,\n  Button,\n  ButtonVariant,\n  Divider,\n  Form,\n  FormGroup,\n  Modal,\n  Radio,\n  Switch,\n} from \"@patternfly/react-core\";\n\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { JsonFileUpload } from \"../../components/json-file-upload/JsonFileUpload\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\n\ntype ImportDialogProps = {\n  onConfirm: (value: ResourceServerRepresentation) => void;\n  closeDialog: () => void;\n};\n\nexport const ImportDialog = ({ onConfirm, closeDialog }: ImportDialogProps) => {\n  const { t } = useTranslation();\n  const [imported, setImported] = useState<ResourceServerRepresentation>({});\n  return (\n    <Modal\n      title={t(\"import\")}\n      isOpen\n      variant=\"small\"\n      onClose={closeDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          onClick={() => {\n            onConfirm(imported);\n            closeDialog();\n          }}\n          data-testid=\"confirm\"\n        >\n          {t(\"confirm\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            closeDialog();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form>\n        <JsonFileUpload id=\"import-resource\" onChange={setImported} />\n      </Form>\n      {Object.keys(imported).length !== 0 && (\n        <>\n          <Divider />\n          <p className=\"pf-v5-u-my-lg\">{t(\"importResources\")}</p>\n          <Form isHorizontal>\n            <FormGroup\n              label={t(\"policyEnforcementMode\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"policyEnforcementModeHelp\")}\n                  fieldLabelId=\"policyEnforcementMode\"\n                />\n              }\n              fieldId=\"policyEnforcementMode\"\n              hasNoPaddingTop\n            >\n              <Radio\n                id=\"policyEnforcementMode\"\n                name=\"policyEnforcementMode\"\n                label={t(\n                  `policyEnforcementModes.${imported.policyEnforcementMode}`,\n                )}\n                isChecked\n                isDisabled\n                className=\"pf-v5-u-mb-md\"\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"decisionStrategy\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"decisionStrategyHelp\")}\n                  fieldLabelId=\"decisionStrategy\"\n                />\n              }\n              fieldId=\"decisionStrategy\"\n              hasNoPaddingTop\n            >\n              <Radio\n                id=\"decisionStrategy\"\n                name=\"decisionStrategy\"\n                isChecked\n                isDisabled\n                label={t(`decisionStrategies.${imported.decisionStrategy}`)}\n                className=\"pf-v5-u-mb-md\"\n              />\n            </FormGroup>\n            <FormGroup\n              hasNoPaddingTop\n              label={t(\"allowRemoteResourceManagement\")}\n              fieldId=\"allowRemoteResourceManagement\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"allowRemoteResourceManagement\")}\n                  fieldLabelId=\"allowRemoteResourceManagement\"\n                />\n              }\n            >\n              <Switch\n                id=\"allowRemoteResourceManagement\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                isChecked={imported.allowRemoteResourceManagement}\n                isDisabled\n                aria-label={t(\"allowRemoteResourceManagement\")}\n              />\n            </FormGroup>\n          </Form>\n          <div className=\"pf-v5-u-mt-md\">\n            {Object.entries(imported)\n              .filter(([, value]) => Array.isArray(value))\n              .map(([key, value]) => (\n                <Fragment key={key}>\n                  <Divider />\n                  <p className=\"pf-v5-u-my-sm\">\n                    <strong>\n                      {value.length} {t(key)}\n                    </strong>\n                  </p>\n                </Fragment>\n              ))}\n          </div>\n          <Divider />\n          <Alert\n            variant=\"warning\"\n            className=\"pf-v5-u-mt-lg\"\n            isInline\n            title={t(\"importWarning\")}\n          />\n        </>\n      )}\n    </Modal>\n  );\n};\n","import type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { HelpItem, useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  Divider,\n  FormGroup,\n  PageSection,\n  Radio,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { FixedButtonsGroup } from \"../../components/form/FixedButtonGroup\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { useAccess } from \"../../context/access/Access\";\nimport useToggle from \"../../utils/useToggle\";\nimport { DecisionStrategySelect } from \"./DecisionStrategySelect\";\nimport { ImportDialog } from \"./ImportDialog\";\n\nconst POLICY_ENFORCEMENT_MODES = [\n  \"ENFORCING\",\n  \"PERMISSIVE\",\n  \"DISABLED\",\n] as const;\n\nexport type FormFields = Omit<\n  ResourceServerRepresentation,\n  \"scopes\" | \"resources\"\n>;\n\nexport const AuthorizationSettings = ({ clientId }: { clientId: string }) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [resource, setResource] = useState<ResourceServerRepresentation>();\n  const [importDialog, toggleImportDialog] = useToggle();\n\n  const form = useForm<FormFields>({});\n  const { control, reset, handleSubmit } = form;\n\n  const { addAlert, addError } = useAlerts();\n  const { hasAccess } = useAccess();\n\n  const isDisabled = !hasAccess(\"manage-authorization\");\n\n  useFetch(\n    () => adminClient.clients.getResourceServer({ id: clientId }),\n    (resource) => {\n      setResource(resource);\n      reset(resource);\n    },\n    [],\n  );\n\n  const importResource = async (value: ResourceServerRepresentation) => {\n    try {\n      await adminClient.clients.importResource({ id: clientId }, value);\n      addAlert(t(\"importResourceSuccess\"), AlertVariant.success);\n      reset({ ...value });\n    } catch (error) {\n      addError(\"importResourceError\", error);\n    }\n  };\n\n  const onSubmit = async (resource: ResourceServerRepresentation) => {\n    try {\n      await adminClient.clients.updateResourceServer(\n        { id: clientId },\n        resource,\n      );\n      addAlert(t(\"updateResourceSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"resourceSaveError\", error);\n    }\n  };\n\n  if (!resource) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant=\"light\">\n      {importDialog && (\n        <ImportDialog\n          onConfirm={importResource}\n          closeDialog={toggleImportDialog}\n        />\n      )}\n      <FormAccess\n        role=\"manage-authorization\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <FormGroup\n          label={t(\"import\")}\n          fieldId=\"import\"\n          labelIcon={\n            <HelpItem helpText={t(\"importHelp\")} fieldLabelId=\"import\" />\n          }\n        >\n          <Button variant=\"secondary\" onClick={toggleImportDialog}>\n            {t(\"import\")}\n          </Button>\n        </FormGroup>\n        <Divider />\n        <FormGroup\n          label={t(\"policyEnforcementMode\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"policyEnforcementModeHelp\")}\n              fieldLabelId=\"policyEnforcementMode\"\n            />\n          }\n          fieldId=\"policyEnforcementMode\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"policyEnforcementMode\"\n            data-testid=\"policyEnforcementMode\"\n            defaultValue={POLICY_ENFORCEMENT_MODES[0]}\n            control={control}\n            render={({ field }) => (\n              <>\n                {POLICY_ENFORCEMENT_MODES.map((mode) => (\n                  <Radio\n                    id={mode}\n                    key={mode}\n                    data-testid={mode}\n                    isChecked={field.value === mode}\n                    isDisabled={isDisabled}\n                    name=\"policyEnforcementMode\"\n                    onChange={() => field.onChange(mode)}\n                    label={t(`policyEnforcementModes.${mode}`)}\n                    className=\"pf-v5-u-mb-md\"\n                  />\n                ))}\n              </>\n            )}\n          />\n        </FormGroup>\n        <FormProvider {...form}>\n          <DecisionStrategySelect isLimited />\n          <DefaultSwitchControl\n            name=\"allowRemoteResourceManagement\"\n            label={t(\"allowRemoteResourceManagement\")}\n            labelIcon={t(\"allowRemoteResourceManagementHelp\")}\n          />\n        </FormProvider>\n        <FixedButtonsGroup\n          name=\"authenticationSettings\"\n          reset={() => reset(resource)}\n          isSubmit\n        />\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import { useState, useEffect } from \"react\";\n\n/** A 'plain' object version of the permission status. */\nexport type PlainPermissionStatus = {\n  readonly name: string;\n  readonly state: PermissionState;\n};\n\nexport default function useQueryPermission(\n  name: PermissionName,\n): PlainPermissionStatus | null {\n  const [status, setStatus] = useState<PermissionStatus | null>(null);\n  const [plainStatus, setPlainStatus] = useState<PlainPermissionStatus | null>(\n    null,\n  );\n\n  function updatePlainStatus(newStatus: PermissionStatus) {\n    setPlainStatus({\n      name: newStatus.name,\n      state: newStatus.state,\n    });\n  }\n\n  // Query the permission status when the name changes.\n  useEffect(() => {\n    setStatus(null);\n    setPlainStatus(null);\n\n    navigator.permissions.query({ name }).then((newStatus) => {\n      setStatus(newStatus);\n      updatePlainStatus(newStatus);\n    });\n  }, [name]);\n\n  // Update the 'plain' status when the permission status changes.\n  useEffect(() => {\n    if (!status) {\n      return;\n    }\n\n    function onStatusChange() {\n      if (!status) {\n        return;\n      }\n\n      updatePlainStatus(status);\n    }\n\n    status.addEventListener(\"change\", onStatusChange);\n    return () => status.removeEventListener(\"change\", onStatusChange);\n  }, [status]);\n\n  return plainStatus;\n}\n","import { useSetTimeout } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ClipboardCopyButton,\n  ClipboardCopyButtonProps,\n} from \"@patternfly/react-core\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport useQueryPermission from \"../../utils/useQueryPermission\";\n\nenum CopyState {\n  Ready,\n  Copied,\n  Error,\n}\n\ntype CopyToClipboardButtonProps = Pick<ClipboardCopyButtonProps, \"variant\"> & {\n  id: string;\n  label: string;\n  text: string;\n};\n\nexport const CopyToClipboardButton = ({\n  id,\n  label,\n  text,\n  variant = \"plain\",\n}: CopyToClipboardButtonProps) => {\n  const { t } = useTranslation();\n  const setTimeout = useSetTimeout();\n  const permission = useQueryPermission(\"clipboard-write\" as PermissionName);\n  const permissionDenied = permission?.state === \"denied\";\n  const [copyState, setCopyState] = useState(CopyState.Ready);\n\n  // Determine the message to use for the copy button.\n  const copyMessageKey = useMemo(() => {\n    if (permissionDenied) {\n      return \"clipboardCopyDenied\";\n    }\n\n    switch (copyState) {\n      case CopyState.Ready:\n        return \"copyToClipboard\";\n      case CopyState.Copied:\n        return \"copySuccess\";\n      case CopyState.Error:\n        return \"clipboardCopyError\";\n    }\n  }, [permissionDenied, copyState]);\n\n  // Reset the message of the copy button after copying to the clipboard.\n  useEffect(() => {\n    if (copyState !== CopyState.Ready) {\n      return setTimeout(() => setCopyState(CopyState.Ready), 1000);\n    }\n  }, [copyState, setTimeout]);\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopyState(CopyState.Copied);\n    } catch {\n      setCopyState(CopyState.Error);\n    }\n  };\n\n  return (\n    <ClipboardCopyButton\n      id={`copy-button-${id}`}\n      textId={label}\n      aria-label={t(\"copyToClipboard\")}\n      onClick={() => copyToClipboard(text)}\n      exitDelay={600}\n      variant={variant}\n    >\n      {t(copyMessageKey)}\n    </ClipboardCopyButton>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport {\n  Alert,\n  Button,\n  FormGroup,\n  InputGroup,\n  InputGroupItem,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { PasswordInput } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { useAccess } from \"../../context/access/Access\";\nimport useFormatDate from \"../../utils/useFormatDate\";\nimport { CopyToClipboardButton } from \"../scopes/CopyToClipboardButton\";\n\nexport type ClientSecretProps = {\n  client: ClientRepresentation;\n  secret: string;\n  toggle: () => void;\n};\n\ntype SecretInputProps = ClientSecretProps & {\n  id: string;\n  buttonLabel: string;\n};\n\nconst SecretInput = ({\n  id,\n  buttonLabel,\n  client,\n  secret,\n  toggle,\n}: SecretInputProps) => {\n  const { t } = useTranslation();\n  const form = useFormContext<ClientRepresentation>();\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  return (\n    <Split hasGutter>\n      <SplitItem isFilled>\n        <InputGroup>\n          <InputGroupItem isFill>\n            <PasswordInput id={id} value={secret} readOnly />\n          </InputGroupItem>\n          <InputGroupItem>\n            <CopyToClipboardButton\n              id={id}\n              text={secret}\n              label=\"clientSecret\"\n              variant=\"control\"\n            />\n          </InputGroupItem>\n        </InputGroup>\n      </SplitItem>\n      <SplitItem>\n        <Button\n          variant=\"secondary\"\n          isDisabled={form.formState.isDirty || !isManager}\n          onClick={toggle}\n        >\n          {t(buttonLabel)}\n        </Button>\n      </SplitItem>\n    </Split>\n  );\n};\n\nconst ExpireDateFormatter = ({ time }: { time: number }) => {\n  const { t } = useTranslation();\n  const formatDate = useFormatDate();\n  const unixTimeToString = (time: number) =>\n    time\n      ? t(\"secretExpiresOn\", {\n          time: formatDate(new Date(time * 1000), {\n            dateStyle: \"full\",\n            timeStyle: \"long\",\n          }),\n        })\n      : undefined;\n\n  return <div className=\"pf-v5-u-my-md\">{unixTimeToString(time)}</div>;\n};\n\nexport const ClientSecret = ({ client, secret, toggle }: ClientSecretProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const [secretRotated, setSecretRotated] = useState<string | undefined>(\n    client.attributes?.[\"client.secret.rotated\"],\n  );\n  const secretExpirationTime: number =\n    client.attributes?.[\"client.secret.expiration.time\"];\n  const secretRotatedExpirationTime: number =\n    client.attributes?.[\"client.secret.rotated.expiration.time\"];\n\n  const expired = (time: number) => new Date().getTime() >= time * 1000;\n\n  const [toggleInvalidateConfirm, InvalidateConfirm] = useConfirmDialog({\n    titleKey: \"invalidateRotatedSecret\",\n    messageKey: \"invalidateRotatedSecretExplain\",\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.invalidateSecret({\n          id: client.id!,\n        });\n        setSecretRotated(undefined);\n        addAlert(t(\"invalidateRotatedSuccess\"));\n      } catch (error) {\n        addError(\"invalidateRotatedError\", error);\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (secretRotated !== client.attributes?.[\"client.secret.rotated\"]) {\n      setSecretRotated(client.attributes?.[\"client.secret.rotated\"]);\n    }\n  }, [client, secretRotated]);\n\n  return (\n    <>\n      <InvalidateConfirm />\n      <FormGroup\n        label={t(\"clientSecret\")}\n        fieldId=\"kc-client-secret\"\n        className=\"pf-v5-u-my-md\"\n      >\n        <SecretInput\n          id=\"kc-client-secret\"\n          client={client}\n          secret={secret}\n          toggle={toggle}\n          buttonLabel=\"regenerate\"\n        />\n        <ExpireDateFormatter time={secretExpirationTime} />\n        {expired(secretExpirationTime) && (\n          <Alert variant=\"warning\" isInline title={t(\"secretHasExpired\")} />\n        )}\n      </FormGroup>\n      {secretRotated && (\n        <FormGroup label={t(\"secretRotated\")} fieldId=\"secretRotated\">\n          <SecretInput\n            id=\"secretRotated\"\n            client={client}\n            secret={secretRotated}\n            toggle={toggleInvalidateConfirm}\n            buttonLabel=\"invalidateSecret\"\n          />\n          <ExpireDateFormatter time={secretRotatedExpirationTime} />\n        </FormGroup>\n      )}\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype SignedJWTProps = {\n  clientAuthenticatorType: string;\n};\n\nexport const SignedJWT = ({ clientAuthenticatorType }: SignedJWTProps) => {\n  const { cryptoInfo } = useServerInfo();\n  const providers =\n    clientAuthenticatorType === \"client-jwt\"\n      ? (cryptoInfo?.clientSignatureAsymmetricAlgorithms ?? [])\n      : (cryptoInfo?.clientSignatureSymmetricAlgorithms ?? []);\n\n  const { t } = useTranslation();\n\n  return (\n    <SelectControl\n      name={convertAttributeNameToForm<FormFields>(\n        \"attributes.token.endpoint.auth.signing.alg\",\n      )}\n      label={t(\"signatureAlgorithm\")}\n      labelIcon={t(\"signatureAlgorithmHelp\")}\n      controller={{\n        defaultValue: \"\",\n      }}\n      isScrollable\n      maxMenuHeight=\"200px\"\n      options={[\n        { key: \"\", value: t(\"anyAlgorithm\") },\n        ...providers.map((option) => ({ key: option, value: option })),\n      ]}\n    />\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const X509 = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <DefaultSwitchControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.x509.allow.regex.pattern.comparison\",\n        )}\n        label={t(\"allowRegexComparison\")}\n        labelIcon={t(\"allowRegexComparisonHelp\")}\n      />\n      <TextControl\n        name={convertAttributeNameToForm(\"attributes.x509.subjectdn\")}\n        label={t(\"subject\")}\n        labelIcon={t(\"subjectHelp\")}\n        rules={{\n          required: t(\"required\"),\n        }}\n      />\n    </>\n  );\n};\n","import type { AuthenticationProviderRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigRepresentation\";\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport {\n  HelpItem,\n  SelectControl,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Alert,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  ClipboardCopy,\n  Divider,\n  FormGroup,\n  PageSection,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { FormFields } from \"../ClientDetails\";\nimport { ClientSecret } from \"./ClientSecret\";\nimport { SignedJWT } from \"./SignedJWT\";\nimport { X509 } from \"./X509\";\n\ntype AccessToken = {\n  registrationAccessToken: string;\n};\n\nexport type CredentialsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n  refresh: () => void;\n};\n\nexport const Credentials = ({ client, save, refresh }: CredentialsProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const clientId = client.id!;\n\n  const [providers, setProviders] = useState<\n    AuthenticationProviderRepresentation[]\n  >([]);\n\n  const {\n    control,\n    formState: { isDirty },\n    handleSubmit,\n  } = useFormContext<FormFields>();\n\n  const clientAuthenticatorType = useWatch({\n    control: control,\n    name: \"clientAuthenticatorType\",\n    defaultValue: \"\",\n  });\n\n  const [secret, setSecret] = useState(\"\");\n  const [accessToken, setAccessToken] = useState(\"\");\n\n  const selectedProvider = providers.find(\n    (provider) => provider.id === clientAuthenticatorType,\n  );\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.authenticationManagement.getClientAuthenticatorProviders(),\n        adminClient.clients.getClientSecret({\n          id: clientId,\n        }),\n      ]),\n    ([providers, secret]) => {\n      setProviders(providers);\n      setSecret(secret.value!);\n    },\n    [],\n  );\n\n  async function regenerate<T>(\n    call: (clientId: string) => Promise<T>,\n    message: string,\n  ): Promise<T | undefined> {\n    try {\n      const data = await call(clientId);\n      addAlert(t(`${message}Success`), AlertVariant.success);\n      return data;\n    } catch (error) {\n      addError(`${message}Error`, error);\n    }\n  }\n\n  const regenerateClientSecret = async () => {\n    const secret = await regenerate<CredentialRepresentation>(\n      (clientId) =>\n        adminClient.clients.generateNewClientSecret({ id: clientId }),\n      \"clientSecret\",\n    );\n    setSecret(secret?.value || \"\");\n    refresh();\n  };\n\n  const [toggleClientSecretConfirm, ClientSecretConfirm] = useConfirmDialog({\n    titleKey: \"confirmClientSecretTitle\",\n    messageKey: \"confirmClientSecretBody\",\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: regenerateClientSecret,\n  });\n\n  const regenerateAccessToken = async () => {\n    const accessToken = await regenerate<AccessToken>(\n      (clientId) =>\n        adminClient.clients.generateRegistrationAccessToken({ id: clientId }),\n      \"accessToken\",\n    );\n    setAccessToken(accessToken?.registrationAccessToken || \"\");\n  };\n\n  const [toggleAccessTokenConfirm, AccessTokenConfirm] = useConfirmDialog({\n    titleKey: \"confirmAccessTokenTitle\",\n    messageKey: \"confirmAccessTokenBody\",\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: regenerateAccessToken,\n  });\n\n  return (\n    <PageSection>\n      <FormAccess\n        onSubmit={handleSubmit(save)}\n        isHorizontal\n        className=\"pf-v5-u-mt-md\"\n        role=\"manage-clients\"\n        fineGrainedAccess={client.access?.configure}\n      >\n        <ClientSecretConfirm />\n        <AccessTokenConfirm />\n        <Card isFlat>\n          <CardBody>\n            <SelectControl\n              name=\"clientAuthenticatorType\"\n              label={t(\"clientAuthenticator\")}\n              labelIcon={t(\"clientAuthenticatorTypeHelp\")}\n              controller={{\n                defaultValue: \"\",\n              }}\n              options={providers.map(({ id, displayName }) => ({\n                key: id!,\n                value: displayName || id!,\n              }))}\n            />\n            {(clientAuthenticatorType === \"client-jwt\" ||\n              clientAuthenticatorType === \"client-secret-jwt\") && (\n              <SignedJWT clientAuthenticatorType={clientAuthenticatorType} />\n            )}\n            {clientAuthenticatorType === \"client-jwt\" && (\n              <FormGroup>\n                <Alert variant=\"info\" isInline title={t(\"signedJWTConfirm\")} />\n              </FormGroup>\n            )}\n            {clientAuthenticatorType === \"client-x509\" && <X509 />}\n            <ActionGroup>\n              <Button variant=\"primary\" type=\"submit\" isDisabled={!isDirty}>\n                {t(\"save\")}\n              </Button>\n            </ActionGroup>\n          </CardBody>\n          {selectedProvider?.supportsSecret && (\n            <>\n              <Divider />\n              <CardBody>\n                <ClientSecret\n                  client={client}\n                  secret={secret}\n                  toggle={toggleClientSecretConfirm}\n                />\n              </CardBody>\n            </>\n          )}\n        </Card>\n        <Card isFlat>\n          <CardBody>\n            <FormGroup\n              label={t(\"registrationAccessToken\")}\n              fieldId=\"kc-access-token\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"registrationAccessTokenHelp\")}\n                  fieldLabelId=\"registrationAccessToken\"\n                />\n              }\n            >\n              <Split hasGutter>\n                <SplitItem isFilled>\n                  <ClipboardCopy id=\"kc-access-token\" isReadOnly>\n                    {accessToken}\n                  </ClipboardCopy>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={toggleAccessTokenConfirm}\n                  >\n                    {t(\"regenerate\")}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </FormGroup>\n          </CardBody>\n        </Card>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport { FormGroup, TextArea } from \"@patternfly/react-core\";\nimport { useId } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\n\ntype CertificateProps = Omit<CertificateDisplayProps, \"id\"> & {\n  plain?: boolean;\n};\n\ntype CertificateDisplayProps = {\n  id: string;\n  keyInfo?: CertificateRepresentation;\n};\n\nconst CertificateDisplay = ({ id, keyInfo }: CertificateDisplayProps) => {\n  const { t } = useTranslation();\n  return (\n    <TextArea\n      readOnly\n      rows={5}\n      id={id}\n      data-testid=\"certificate\"\n      value={keyInfo?.certificate}\n      aria-label={t(\"certificate\")}\n    />\n  );\n};\n\nexport const Certificate = ({ keyInfo, plain = false }: CertificateProps) => {\n  const { t } = useTranslation();\n  const id = useId();\n\n  return plain ? (\n    <CertificateDisplay id={id} keyInfo={keyInfo} />\n  ) : (\n    <FormGroup\n      label={t(\"certificate\")}\n      fieldId={id}\n      labelIcon={<HelpItem helpText={t(\"certificateHelp\")} fieldLabelId={id} />}\n    >\n      <CertificateDisplay id={id} keyInfo={keyInfo} />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { PasswordControl, TextControl } from \"@keycloak/keycloak-ui-shared\";\n\nexport const StoreSettings = ({\n  hidePassword = false,\n  isSaml = false,\n}: {\n  hidePassword?: boolean;\n  isSaml?: boolean;\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <TextControl\n        name=\"keyAlias\"\n        label={t(\"keyAlias\")}\n        labelIcon={t(\"keyAliasHelp\")}\n        rules={{\n          required: t(\"required\"),\n        }}\n      />\n      {!hidePassword && (\n        <PasswordControl\n          name=\"keyPassword\"\n          label={t(\"keyPassword\")}\n          labelIcon={t(\"keyPasswordHelp\")}\n          rules={{\n            required: t(\"required\"),\n          }}\n        />\n      )}\n      {isSaml && (\n        <TextControl\n          name=\"realmAlias\"\n          label={t(\"realmCertificateAlias\")}\n          labelIcon={t(\"realmCertificateAliasHelp\")}\n        />\n      )}\n      <PasswordControl\n        name=\"storePassword\"\n        label={t(\"storePassword\")}\n        labelIcon={t(\"storePasswordHelp\")}\n        rules={{\n          required: t(\"required\"),\n        }}\n      />\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Controller,\n  FormProvider,\n  useForm,\n  useFormContext,\n} from \"react-hook-form\";\nimport {\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\n\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { HelpItem, SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { StoreSettings } from \"./StoreSettings\";\nimport { FileUpload } from \"../../components/json-file-upload/patternfly/FileUpload\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype GenerateKeyDialogProps = {\n  clientId: string;\n  toggleDialog: () => void;\n  save: (keyStoreConfig: KeyStoreConfig) => void;\n};\n\ntype KeyFormProps = {\n  useFile?: boolean;\n  isSaml?: boolean;\n  hasPem?: boolean;\n};\n\nconst CERT_PEM = \"Certificate PEM\" as const;\n\nconst extensions = new Map([\n  [\"PKCS12\", \"p12\"],\n  [\"JKS\", \"jks\"],\n  [\"BCFKS\", \"bcfks\"],\n]);\n\ntype FormFields = KeyStoreConfig & {\n  file: string | File;\n};\n\nexport const getFileExtension = (format: string) => extensions.get(format);\n\nexport const KeyForm = ({\n  isSaml = false,\n  hasPem = false,\n  useFile = false,\n}: KeyFormProps) => {\n  const { t } = useTranslation();\n\n  const [filename, setFilename] = useState<string>();\n\n  const { control, watch } = useFormContext<FormFields>();\n  const format = watch(\"format\");\n\n  const { cryptoInfo } = useServerInfo();\n  const supportedKeystoreTypes = [\n    ...(cryptoInfo?.supportedKeystoreTypes ?? []),\n    ...(hasPem ? [CERT_PEM] : []),\n  ];\n\n  return (\n    <Form className=\"pf-v5-u-pt-lg\">\n      <SelectControl\n        name=\"format\"\n        label={t(\"archiveFormat\")}\n        labelIcon={t(\"archiveFormatHelp\")}\n        controller={{\n          defaultValue: supportedKeystoreTypes[0],\n        }}\n        menuAppendTo=\"parent\"\n        options={supportedKeystoreTypes}\n      />\n      {useFile && (\n        <FormGroup\n          label={t(\"importFile\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"importFileHelp\")}\n              fieldLabelId=\"importFile\"\n            />\n          }\n          fieldId=\"importFile\"\n        >\n          <Controller\n            name=\"file\"\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <FileUpload\n                id=\"importFile\"\n                value={field.value}\n                filename={filename}\n                browseButtonText={t(\"browse\")}\n                onChange={(value, filename) => {\n                  setFilename(filename);\n                  field.onChange(value);\n                }}\n              />\n            )}\n          />\n        </FormGroup>\n      )}\n      {format !== CERT_PEM && (\n        <StoreSettings hidePassword={useFile} isSaml={isSaml} />\n      )}\n    </Form>\n  );\n};\n\nexport const GenerateKeyDialog = ({\n  clientId,\n  save,\n  toggleDialog,\n}: GenerateKeyDialogProps) => {\n  const { t } = useTranslation();\n  const form = useForm<KeyStoreConfig>({\n    defaultValues: { keyAlias: clientId },\n    mode: \"onChange\",\n  });\n\n  const {\n    handleSubmit,\n    formState: { isValid },\n  } = form;\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"generateKeys\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          isDisabled={!isValid}\n          onClick={() => {\n            handleSubmit((config) => {\n              save(config);\n              toggleDialog();\n            })();\n          }}\n        >\n          {t(\"generate\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            toggleDialog();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"generateKeysDescription\")}</Text>\n      </TextContent>\n      <FormProvider {...form}>\n        <KeyForm />\n      </FormProvider>\n    </Modal>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { FileUpload } from \"../../components/json-file-upload/patternfly/FileUpload\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { StoreSettings } from \"./StoreSettings\";\n\ntype ImportKeyDialogProps = {\n  toggleDialog: () => void;\n  save: (importFile: ImportFile) => void;\n};\n\nexport type ImportFile = {\n  keystoreFormat: string;\n  keyAlias: string;\n  storePassword: string;\n  file: { value?: string; filename: string };\n};\n\nexport const ImportKeyDialog = ({\n  save,\n  toggleDialog,\n}: ImportKeyDialogProps) => {\n  const { t } = useTranslation();\n  const form = useForm<ImportFile>();\n  const { control, handleSubmit } = form;\n\n  const baseFormats = useServerInfo().cryptoInfo?.supportedKeystoreTypes ?? [];\n\n  const formats = baseFormats.concat([\n    \"Certificate PEM\",\n    \"Public Key PEM\",\n    \"JSON Web Key Set\",\n  ]);\n\n  const format = useWatch({\n    control,\n    name: \"keystoreFormat\",\n    defaultValue: formats[0],\n  });\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"generateKeys\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          onClick={() => {\n            handleSubmit((importFile) => {\n              save(importFile);\n              toggleDialog();\n            })();\n          }}\n        >\n          {t(\"import\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            toggleDialog();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"generateKeysDescription\")}</Text>\n      </TextContent>\n      <Form className=\"pf-v5-u-pt-lg\">\n        <FormProvider {...form}>\n          <SelectControl\n            name=\"keystoreFormat\"\n            label={t(\"archiveFormat\")}\n            labelIcon={t(\"archiveFormatHelp\")}\n            controller={{\n              defaultValue: formats[0],\n            }}\n            options={formats}\n          />\n          {baseFormats.includes(format) && <StoreSettings hidePassword />}\n          <FormGroup label={t(\"importFile\")} fieldId=\"importFile\">\n            <Controller\n              name=\"file\"\n              control={control}\n              defaultValue={{ filename: \"\" }}\n              render={({ field }) => (\n                <FileUpload\n                  id=\"importFile\"\n                  value={field.value.value}\n                  filename={field.value.filename}\n                  onChange={(value, filename) =>\n                    field.onChange({ value, filename })\n                  }\n                />\n              )}\n            />\n          </FormGroup>\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { TextControl, useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  PageSection,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Certificate } from \"./Certificate\";\nimport { GenerateKeyDialog, getFileExtension } from \"./GenerateKeyDialog\";\nimport { ImportFile, ImportKeyDialog } from \"./ImportKeyDialog\";\n\ntype KeysProps = {\n  save: () => void;\n  clientId: string;\n  hasConfigureAccess?: boolean;\n};\n\nconst attr = \"jwt.credential\";\n\nexport const Keys = ({ clientId, save, hasConfigureAccess }: KeysProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const {\n    control,\n    getValues,\n    formState: { isDirty },\n  } = useFormContext<FormFields>();\n  const { addAlert, addError } = useAlerts();\n\n  const [keyInfo, setKeyInfo] = useState<CertificateRepresentation>();\n  const [openGenerateKeys, toggleOpenGenerateKeys, setOpenGenerateKeys] =\n    useToggle();\n  const [openImportKeys, toggleOpenImportKeys, setOpenImportKeys] = useToggle();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const useJwksUrl = useWatch({\n    control,\n    name: convertAttributeNameToForm<FormFields>(\"attributes.use.jwks.url\"),\n    defaultValue: \"false\",\n  });\n\n  useFetch(\n    () => adminClient.clients.getKeyInfo({ id: clientId, attr }),\n    (info) => setKeyInfo(info),\n    [key],\n  );\n\n  const generate = async (config: KeyStoreConfig) => {\n    try {\n      const keyStore = await adminClient.clients.generateAndDownloadKey(\n        {\n          id: clientId,\n          attr,\n        },\n        config,\n      );\n      saveAs(\n        new Blob([keyStore], { type: \"application/octet-stream\" }),\n        `keystore.${getFileExtension(config.format ?? \"\")}`,\n      );\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addError(\"generateError\", error);\n    }\n  };\n\n  const importKey = async (importFile: ImportFile) => {\n    try {\n      const formData = new FormData();\n      const { file, ...rest } = importFile;\n\n      for (const [key, value] of Object.entries(rest)) {\n        formData.append(key, value);\n      }\n\n      formData.append(\"file\", file.value!);\n\n      await adminClient.clients.uploadCertificate(\n        { id: clientId, attr },\n        formData,\n      );\n      addAlert(t(\"importSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addError(\"importError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"keycloak__form\">\n      {openGenerateKeys && (\n        <GenerateKeyDialog\n          clientId={getValues(\"clientId\")!}\n          toggleDialog={toggleOpenGenerateKeys}\n          save={generate}\n        />\n      )}\n      {openImportKeys && (\n        <ImportKeyDialog toggleDialog={toggleOpenImportKeys} save={importKey} />\n      )}\n      <Card isFlat>\n        <CardHeader>\n          <CardTitle>{t(\"jwksUrlConfig\")}</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <TextContent>\n            <Text>{t(\"keysIntro\")}</Text>\n          </TextContent>\n        </CardBody>\n        <CardBody>\n          <FormAccess\n            role=\"manage-clients\"\n            fineGrainedAccess={hasConfigureAccess}\n            isHorizontal\n          >\n            <DefaultSwitchControl\n              name={convertAttributeNameToForm(\"attributes.use.jwks.url\")}\n              label={t(\"useJwksUrl\")}\n              labelIcon={t(\"useJwksUrlHelp\")}\n              stringify\n            />\n            {useJwksUrl !== \"true\" &&\n              (keyInfo ? (\n                <Certificate plain keyInfo={keyInfo} />\n              ) : (\n                \"No client certificate configured\"\n              ))}\n            {useJwksUrl === \"true\" && (\n              <TextControl\n                name={convertAttributeNameToForm(\"attributes.jwks.url\")}\n                label={t(\"jwksUrl\")}\n                labelIcon={t(\"jwksUrlHelp\")}\n                type=\"url\"\n              />\n            )}\n            <ActionGroup>\n              <Button\n                data-testid=\"saveKeys\"\n                onClick={save}\n                isDisabled={!isDirty}\n              >\n                {t(\"save\")}\n              </Button>\n              <Button\n                data-testid=\"generate\"\n                variant=\"secondary\"\n                onClick={() => setOpenGenerateKeys(true)}\n              >\n                {t(\"generateNewKeys\")}\n              </Button>\n              <Button\n                data-testid=\"import\"\n                variant=\"secondary\"\n                onClick={() => setOpenImportKeys(true)}\n                isDisabled={useJwksUrl === \"true\"}\n              >\n                {t(\"import\")}\n              </Button>\n            </ActionGroup>\n          </FormAccess>\n        </CardBody>\n      </Card>\n    </PageSection>\n  );\n};\n","import KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { Button, Form, Modal } from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { KeyForm, getFileExtension } from \"./GenerateKeyDialog\";\nimport { KeyTypes } from \"./SamlKeys\";\n\ntype ExportSamlKeyDialogProps = {\n  clientId: string;\n  close: () => void;\n  keyType: KeyTypes;\n};\n\nexport const ExportSamlKeyDialog = ({\n  clientId,\n  close,\n  keyType,\n}: ExportSamlKeyDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  const { addAlert, addError } = useAlerts();\n\n  const form = useForm<KeyStoreConfig>({\n    defaultValues: { realmAlias: realm },\n  });\n\n  const download = async (config: KeyStoreConfig) => {\n    try {\n      const keyStore = await adminClient.clients.downloadKey(\n        {\n          id: clientId,\n          attr: keyType,\n        },\n        config,\n      );\n      saveAs(\n        new Blob([keyStore], { type: \"application/octet-stream\" }),\n        `keystore.${getFileExtension(config.format ?? \"\")}`,\n      );\n      addAlert(t(\"samlKeysExportSuccess\"));\n      close();\n    } catch (error) {\n      addError(\"samlKeysExportError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant=\"medium\"\n      title={t(\"exportSamlKeyTitle\")}\n      isOpen\n      onClose={close}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          type=\"submit\"\n          form=\"export-saml-key-form\"\n        >\n          {t(\"export\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            close();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form\n        id=\"export-saml-key-form\"\n        className=\"pf-v5-u-pt-lg\"\n        onSubmit={form.handleSubmit(download)}\n      >\n        <FormProvider {...form}>\n          <KeyForm isSaml />\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Radio,\n  Split,\n  SplitItem,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { Certificate } from \"./Certificate\";\nimport { KeyForm } from \"./GenerateKeyDialog\";\nimport type { KeyTypes } from \"./SamlKeys\";\n\ntype SamlKeysDialogProps = {\n  id: string;\n  attr: KeyTypes;\n  onClose: () => void;\n  onCancel: () => void;\n};\n\nexport type SamlKeysDialogForm = KeyStoreConfig & {\n  file: File;\n};\n\nexport const submitForm = async (\n  adminClient: KeycloakAdminClient,\n  form: SamlKeysDialogForm,\n  id: string,\n  attr: KeyTypes,\n  callback: (error?: unknown) => void,\n) => {\n  try {\n    const formData = new FormData();\n    const { file, ...rest } = form;\n    Object.entries(rest).map(([key, value]) =>\n      formData.append(\n        key === \"format\" ? \"keystoreFormat\" : key,\n        value.toString(),\n      ),\n    );\n    formData.append(\"file\", file);\n\n    await adminClient.clients.uploadKey({ id, attr }, formData);\n    callback();\n  } catch (error) {\n    callback(error);\n  }\n};\n\nexport const SamlKeysDialog = ({\n  id,\n  attr,\n  onClose,\n  onCancel,\n}: SamlKeysDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [type, setType] = useState(false);\n  const [keys, setKeys] = useState<CertificateRepresentation>();\n  const form = useForm<SamlKeysDialogForm>({ mode: \"onChange\" });\n  const {\n    handleSubmit,\n    formState: { isValid },\n  } = form;\n\n  const { addAlert, addError } = useAlerts();\n\n  const submit = (form: SamlKeysDialogForm) => {\n    submitForm(adminClient, form, id, attr, (error) => {\n      if (error) {\n        addError(\"importError\", error);\n      } else {\n        addAlert(t(\"importSuccess\"), AlertVariant.success);\n      }\n    });\n  };\n\n  const generate = async () => {\n    try {\n      const key = await adminClient.clients.generateKey({\n        id,\n        attr,\n      });\n      setKeys(key);\n      saveAs(\n        new Blob([key.privateKey!], {\n          type: \"application/octet-stream\",\n        }),\n        \"private.key\",\n      );\n\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"generateError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      aria-label={t(\"enableClientSignatureRequiredModal\")}\n      header={\n        <TextContent>\n          <Title headingLevel=\"h1\">{t(\"enableClientSignatureRequired\")}</Title>\n          <Text>{t(\"enableClientSignatureRequiredExplain\")}</Text>\n        </TextContent>\n      }\n      isOpen={true}\n      onClose={onClose}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          variant=\"primary\"\n          isDisabled={!isValid && !keys}\n          onClick={() => {\n            if (type) {\n              handleSubmit(submit)();\n            }\n            onClose();\n          }}\n        >\n          {t(\"confirm\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onCancel}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <Form isHorizontal>\n          <FormGroup\n            label={t(\"selectMethod\")}\n            fieldId=\"selectMethod\"\n            hasNoPaddingTop\n          >\n            <Flex>\n              <FlexItem>\n                <Radio\n                  isChecked={!type}\n                  name=\"selectMethodType\"\n                  onChange={() => setType(false)}\n                  label={t(\"selectMethodType.generate\")}\n                  id=\"selectMethodType-generate\"\n                />\n              </FlexItem>\n              <FlexItem>\n                <Radio\n                  isChecked={type}\n                  name=\"selectMethodType\"\n                  onChange={() => setType(true)}\n                  label={t(\"selectMethodType.import\")}\n                  id=\"selectMethodType-import\"\n                />\n              </FlexItem>\n            </Flex>\n          </FormGroup>\n          {!type && (\n            <FormGroup\n              label={t(\"certificate\")}\n              fieldId=\"certificate\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"certificateHelp\")}\n                  fieldLabelId=\"certificate\"\n                />\n              }\n            >\n              <Split hasGutter>\n                <SplitItem isFilled>\n                  <Certificate plain keyInfo={keys} />\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"secondary\"\n                    data-testid=\"generate\"\n                    onClick={generate}\n                  >\n                    {t(\"generate\")}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </FormGroup>\n          )}\n        </Form>\n        {type && <KeyForm useFile />}\n      </FormProvider>\n    </Modal>\n  );\n};\n","import { AlertVariant } from \"@patternfly/react-core\";\nimport { FormProvider, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { ConfirmDialogModal } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeyForm } from \"./GenerateKeyDialog\";\nimport type { KeyTypes } from \"./SamlKeys\";\nimport { SamlKeysDialogForm, submitForm } from \"./SamlKeysDialog\";\n\ntype SamlImportKeyDialogProps = {\n  id: string;\n  attr: KeyTypes;\n  onClose: () => void;\n};\n\nexport const SamlImportKeyDialog = ({\n  id,\n  attr,\n  onClose,\n}: SamlImportKeyDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const form = useFormContext<SamlKeysDialogForm>();\n  const { handleSubmit } = form;\n\n  const { addAlert, addError } = useAlerts();\n\n  const submit = (form: SamlKeysDialogForm) => {\n    submitForm(adminClient, form, id, attr, (error) => {\n      if (error) {\n        addError(\"importError\", error);\n      } else {\n        addAlert(t(\"importSuccess\"), AlertVariant.success);\n      }\n    });\n  };\n\n  return (\n    <ConfirmDialogModal\n      open={true}\n      toggleDialog={onClose}\n      continueButtonLabel=\"import\"\n      titleKey=\"importKey\"\n      onConfirm={() => {\n        handleSubmit(submit)();\n        onClose();\n      }}\n    >\n      <FormProvider {...form}>\n        <KeyForm useFile hasPem />\n      </FormProvider>\n    </ConfirmDialogModal>\n  );\n};\n","import type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport {\n  FormPanel,\n  HelpItem,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  Form,\n  FormGroup,\n  PageSection,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { Fragment, useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Certificate } from \"./Certificate\";\nimport { ExportSamlKeyDialog } from \"./ExportSamlKeyDialog\";\nimport { SamlImportKeyDialog } from \"./SamlImportKeyDialog\";\nimport { SamlKeysDialog } from \"./SamlKeysDialog\";\n\ntype SamlKeysProps = {\n  clientId: string;\n  save: () => void;\n};\n\nconst KEYS = [\"saml.signing\", \"saml.encryption\"] as const;\nexport type KeyTypes = (typeof KEYS)[number];\n\nconst KEYS_MAPPING: { [key in KeyTypes]: { [index: string]: string } } = {\n  \"saml.signing\": {\n    name: convertAttributeNameToForm(\"attributes.saml.client.signature\"),\n    title: \"signingKeysConfig\",\n    key: \"clientSignature\",\n  },\n  \"saml.encryption\": {\n    name: convertAttributeNameToForm(\"attributes.saml.encrypt\"),\n    title: \"encryptionKeysConfig\",\n    key: \"encryptAssertions\",\n  },\n};\n\ntype KeySectionProps = {\n  clientId: string;\n  keyInfo?: CertificateRepresentation;\n  attr: KeyTypes;\n  onChanged: (key: KeyTypes) => void;\n  onGenerate: (key: KeyTypes, regenerate: boolean) => void;\n  onImport: (key: KeyTypes) => void;\n};\n\nconst KeySection = ({\n  clientId,\n  keyInfo,\n  attr,\n  onChanged,\n  onGenerate,\n  onImport,\n}: KeySectionProps) => {\n  const { t } = useTranslation();\n  const { control, watch } = useFormContext<FormFields>();\n  const title = KEYS_MAPPING[attr].title;\n  const key = KEYS_MAPPING[attr].key;\n  const name = KEYS_MAPPING[attr].name;\n\n  const [showImportDialog, toggleImportDialog] = useToggle();\n\n  const section = watch(name as keyof FormFields);\n  return (\n    <>\n      {showImportDialog && (\n        <ExportSamlKeyDialog\n          keyType={attr}\n          clientId={clientId}\n          close={toggleImportDialog}\n        />\n      )}\n      <FormPanel title={t(title)} className=\"kc-form-panel__panel\">\n        <TextContent className=\"pf-v5-u-pb-lg\">\n          <Text>{t(`${title}Explain`)}</Text>\n        </TextContent>\n        <FormAccess role=\"manage-clients\" isHorizontal>\n          <FormGroup\n            labelIcon={\n              <HelpItem helpText={t(`${key}Help`)} fieldLabelId={key} />\n            }\n            label={t(key)}\n            fieldId={key}\n            hasNoPaddingTop\n          >\n            <Controller\n              name={name as keyof FormFields}\n              control={control}\n              defaultValue=\"false\"\n              render={({ field }) => (\n                <Switch\n                  data-testid={key}\n                  id={key}\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(_event, value) => {\n                    const v = value.toString();\n                    if (v === \"true\") {\n                      onChanged(attr);\n                      field.onChange(v);\n                    } else {\n                      onGenerate(attr, false);\n                    }\n                  }}\n                  aria-label={t(key)}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      {keyInfo?.certificate && section === \"true\" && (\n        <Card isFlat>\n          <CardBody className=\"kc-form-panel__body\">\n            <Form isHorizontal>\n              <Certificate keyInfo={keyInfo} />\n              <ActionGroup>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => onGenerate(attr, true)}\n                >\n                  {t(\"regenerate\")}\n                </Button>\n                <Button variant=\"secondary\" onClick={() => onImport(attr)}>\n                  {t(\"importKey\")}\n                </Button>\n                <Button variant=\"tertiary\" onClick={toggleImportDialog}>\n                  {t(\"export\")}\n                </Button>\n              </ActionGroup>\n            </Form>\n          </CardBody>\n        </Card>\n      )}\n    </>\n  );\n};\n\nexport const SamlKeys = ({ clientId, save }: SamlKeysProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [isChanged, setIsChanged] = useState<KeyTypes>();\n  const [keyInfo, setKeyInfo] = useState<CertificateRepresentation[]>();\n  const [selectedType, setSelectedType] = useState<KeyTypes>();\n  const [openImport, setImportOpen] = useState<KeyTypes>();\n  const [refresh, setRefresh] = useState(0);\n\n  const { setValue } = useFormContext();\n  const { addAlert, addError } = useAlerts();\n\n  useFetch(\n    () =>\n      Promise.all(\n        KEYS.map((attr) =>\n          adminClient.clients.getKeyInfo({ id: clientId, attr }),\n        ),\n      ),\n    (info) => setKeyInfo(info),\n    [refresh],\n  );\n\n  const generate = async (attr: KeyTypes) => {\n    const index = KEYS.indexOf(attr);\n    try {\n      const info = [...(keyInfo || [])];\n      info[index] = await adminClient.clients.generateKey({\n        id: clientId,\n        attr,\n      });\n\n      setKeyInfo(info);\n      saveAs(\n        new Blob([info[index].privateKey!], {\n          type: \"application/octet-stream\",\n        }),\n        \"private.key\",\n      );\n\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"generateError\", error);\n    }\n  };\n\n  const key = selectedType ? KEYS_MAPPING[selectedType].key : \"\";\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: t(\"disableSigning\", {\n      key: t(key),\n    }),\n    messageKey: t(\"disableSigningExplain\", {\n      key: t(key),\n    }),\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: () => {\n      setValue(KEYS_MAPPING[selectedType!].name, \"false\");\n      save();\n    },\n  });\n\n  const [toggleReGenerateDialog, ReGenerateConfirm] = useConfirmDialog({\n    titleKey: \"reGenerateSigning\",\n    messageKey: \"reGenerateSigningExplain\",\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: () => {\n      generate(selectedType!);\n    },\n  });\n\n  return (\n    <PageSection variant=\"light\" className=\"keycloak__form\">\n      {isChanged && (\n        <SamlKeysDialog\n          id={clientId}\n          attr={isChanged}\n          onClose={() => {\n            setIsChanged(undefined);\n            save();\n            setRefresh(refresh + 1);\n          }}\n          onCancel={() => {\n            setValue(KEYS_MAPPING[selectedType!].name, \"false\");\n            setIsChanged(undefined);\n          }}\n        />\n      )}\n      <DisableConfirm />\n      <ReGenerateConfirm />\n      {KEYS.map((attr, index) => (\n        <Fragment key={attr}>\n          {openImport === attr && (\n            <SamlImportKeyDialog\n              id={clientId}\n              attr={attr}\n              onClose={() => setImportOpen(undefined)}\n            />\n          )}\n          <KeySection\n            clientId={clientId}\n            keyInfo={keyInfo?.[index]}\n            attr={attr}\n            onChanged={setIsChanged}\n            onGenerate={(type, isNew) => {\n              setSelectedType(type);\n              if (!isNew) {\n                toggleDisableDialog();\n              } else {\n                toggleReGenerateDialog();\n              }\n            }}\n            onImport={() => setImportOpen(attr)}\n          />\n        </Fragment>\n      ))}\n    </PageSection>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { EllipsisVIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { ChangeTypeDropdown } from \"../../client-scopes/ChangeTypeDropdown\";\nimport {\n  SearchDropdown,\n  SearchToolbar,\n  SearchType,\n  nameFilter,\n  typeFilter,\n} from \"../../client-scopes/details/SearchFilter\";\nimport {\n  AllClientScopeType,\n  AllClientScopes,\n  CellDropdown,\n  ClientScope,\n  addClientScope,\n  changeClientScope,\n  removeClientScope,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { Action, KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { translationFormatter } from \"../../utils/translationFormatter\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\nimport { toDedicatedScope } from \"../routes/DedicatedScopeDetails\";\nimport { AddScopeDialog } from \"./AddScopeDialog\";\n\nimport \"./client-scopes.css\";\n\nexport type ClientScopesProps = {\n  clientId: string;\n  protocol: string;\n  clientName: string;\n  fineGrainedAccess?: boolean;\n};\n\nexport type Row = ClientScopeRepresentation & {\n  type: AllClientScopeType;\n  description?: string;\n};\n\nconst DEDICATED_ROW = \"dedicated\";\n\ntype TypeSelectorProps = Row & {\n  clientId: string;\n  fineGrainedAccess?: boolean;\n  refresh: () => void;\n};\n\nconst TypeSelector = ({\n  clientId,\n  refresh,\n  fineGrainedAccess,\n  ...scope\n}: TypeSelectorProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const { hasAccess } = useAccess();\n\n  const isDedicatedRow = (value: Row) => value.id === DEDICATED_ROW;\n  const isManager = hasAccess(\"manage-clients\") || fineGrainedAccess;\n\n  return (\n    <CellDropdown\n      isDisabled={isDedicatedRow(scope) || !isManager}\n      clientScope={scope}\n      type={scope.type}\n      onSelect={async (value) => {\n        try {\n          await changeClientScope(\n            adminClient,\n            clientId,\n            scope,\n            scope.type,\n            value as ClientScope,\n          );\n          addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n          refresh();\n        } catch (error) {\n          addError(\"clientScopeError\", error);\n        }\n      }}\n    />\n  );\n};\n\nexport const ClientScopes = ({\n  clientId,\n  protocol,\n  clientName,\n  fineGrainedAccess,\n}: ClientScopesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const localeSort = useLocaleSort();\n\n  const [searchType, setSearchType] = useState<SearchType>(\"name\");\n\n  const [searchTypeType, setSearchTypeType] = useState<AllClientScopes>(\n    AllClientScopes.none,\n  );\n\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\n\n  const [rest, setRest] = useState<ClientScopeRepresentation[]>();\n  const [selectedRows, setSelectedRowState] = useState<Row[]>([]);\n  const setSelectedRows = (rows: Row[]) =>\n    setSelectedRowState(rows.filter(({ id }) => id !== DEDICATED_ROW));\n  const [kebabOpen, setKebabOpen] = useState(false);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const isDedicatedRow = (value: Row) => value.id === DEDICATED_ROW;\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || fineGrainedAccess;\n  const isViewer = hasAccess(\"view-clients\") || fineGrainedAccess;\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const defaultClientScopes =\n      await adminClient.clients.listDefaultClientScopes({ id: clientId });\n    const optionalClientScopes =\n      await adminClient.clients.listOptionalClientScopes({ id: clientId });\n    const clientScopes = await adminClient.clientScopes.find();\n\n    const find = (id: string) =>\n      clientScopes.find((clientScope) => id === clientScope.id);\n\n    const optional = optionalClientScopes.map((c) => {\n      const scope = find(c.id!);\n      const row: Row = {\n        ...c,\n        type: ClientScope.optional,\n        description: scope?.description,\n      };\n      return row;\n    });\n\n    const defaultScopes = defaultClientScopes.map((c) => {\n      const scope = find(c.id!);\n      const row: Row = {\n        ...c,\n        type: ClientScope.default,\n        description: scope?.description,\n      };\n      return row;\n    });\n\n    let rows = [...optional, ...defaultScopes];\n    const names = rows.map((row) => row.name);\n\n    setRest(\n      clientScopes\n        .filter((scope) => !names.includes(scope.name))\n        .filter((scope) => scope.protocol === protocol),\n    );\n\n    rows = localeSort(rows, mapByKey(\"name\"));\n\n    if (isViewer) {\n      rows.unshift({\n        id: DEDICATED_ROW,\n        name: t(\"dedicatedScopeName\", { clientName }),\n        type: AllClientScopes.none,\n        description: t(\"dedicatedScopeDescription\"),\n      });\n    }\n\n    const filter =\n      searchType === \"name\" ? nameFilter(search) : typeFilter(searchTypeType);\n    const firstNum = Number(first);\n\n    return rows.filter(filter).slice(firstNum, firstNum + Number(max));\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientScope\", {\n      count: selectedRows.length,\n      name: selectedRows[0]?.name,\n    }),\n    messageKey: \"deleteConfirmClientScopes\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await removeClientScope(\n          adminClient,\n          clientId,\n          selectedRows[0],\n          selectedRows[0].type as ClientScope,\n        );\n        addAlert(t(\"clientScopeRemoveSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clientScopeRemoveError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      {rest && (\n        <AddScopeDialog\n          clientScopes={rest}\n          clientName={clientName!}\n          open={addDialogOpen}\n          toggleDialog={() => setAddDialogOpen(!addDialogOpen)}\n          onAdd={async (scopes) => {\n            try {\n              await Promise.all(\n                scopes.map(\n                  async (scope) =>\n                    await addClientScope(\n                      adminClient,\n                      clientId,\n                      scope.scope,\n                      scope.type!,\n                    ),\n                ),\n              );\n              addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n              refresh();\n            } catch (error) {\n              addError(\"clientScopeError\", error);\n            }\n          }}\n        />\n      )}\n\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        ariaLabelKey={`clientScopeList-${key}`}\n        searchPlaceholderKey={\n          searchType === \"name\" ? \"searchByName\" : undefined\n        }\n        canSelectAll\n        isPaginated\n        isSearching={searchType === \"type\"}\n        onSelect={(rows) => setSelectedRows([...rows])}\n        searchTypeComponent={\n          <SearchDropdown\n            searchType={searchType}\n            onSelect={(searchType) => setSearchType(searchType)}\n          />\n        }\n        toolbarItem={\n          <>\n            <SearchToolbar\n              searchType={searchType}\n              type={searchTypeType}\n              onSelect={(searchType) => setSearchType(searchType)}\n              onType={(value) => {\n                setSearchTypeType(value);\n                refresh();\n              }}\n            />\n            {isManager && (\n              <>\n                <DeleteConfirm />\n                <ToolbarItem>\n                  <Button onClick={() => setAddDialogOpen(true)}>\n                    {t(\"addClientScope\")}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <ChangeTypeDropdown\n                    clientId={clientId}\n                    selectedRows={selectedRows}\n                    refresh={refresh}\n                  />\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Dropdown\n                    onOpenChange={(isOpen) => setKebabOpen(isOpen)}\n                    toggle={(ref) => (\n                      <MenuToggle\n                        data-testid=\"kebab\"\n                        aria-label=\"Kebab toggle\"\n                        ref={ref}\n                        variant=\"plain\"\n                        onClick={() => setKebabOpen(!kebabOpen)}\n                        isExpanded={kebabOpen}\n                      >\n                        <EllipsisVIcon />\n                      </MenuToggle>\n                    )}\n                    isOpen={kebabOpen}\n                  >\n                    <DropdownList>\n                      <DropdownItem\n                        key=\"deleteAll\"\n                        isDisabled={selectedRows.length === 0}\n                        onClick={async () => {\n                          try {\n                            await Promise.all(\n                              selectedRows.map((row) =>\n                                removeClientScope(\n                                  adminClient,\n                                  clientId,\n                                  { ...row },\n                                  row.type as ClientScope,\n                                ),\n                              ),\n                            );\n\n                            setKebabOpen(false);\n                            setSelectedRows([]);\n                            addAlert(t(\"clientScopeRemoveSuccess\"));\n                            refresh();\n                          } catch (error) {\n                            addError(\"clientScopeRemoveError\", error);\n                          }\n                        }}\n                      >\n                        {t(\"remove\")}\n                      </DropdownItem>\n                    </DropdownList>\n                  </Dropdown>\n                </ToolbarItem>\n              </>\n            )}\n          </>\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"assignedClientScope\",\n            cellRenderer: (row) => {\n              if (isDedicatedRow(row)) {\n                return (\n                  <Link to={toDedicatedScope({ realm, clientId })}>\n                    {row.name}\n                  </Link>\n                );\n              }\n              return row.name!;\n            },\n          },\n          {\n            name: \"type\",\n            displayKey: \"assignedType\",\n            cellRenderer: (row) => (\n              <TypeSelector clientId={clientId} refresh={refresh} {...row} />\n            ),\n          },\n          { name: \"description\", cellFormatters: [translationFormatter(t)] },\n        ]}\n        actions={\n          isManager\n            ? [\n                {\n                  title: t(\"remove\"),\n                  onRowClick: async (row) => {\n                    setSelectedRows([row]);\n                    toggleDeleteDialog();\n                    return true;\n                  },\n                } as Action<Row>,\n              ]\n            : []\n        }\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyClientScopes\")}\n            instructions={t(\"emptyClientScopesInstructions\")}\n            primaryActionText={t(\"emptyClientScopesPrimaryAction\")}\n            onPrimaryAction={() => setAddDialogOpen(true)}\n          />\n        }\n      />\n    </>\n  );\n};\n","import type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  CodeBlock,\n  CodeBlockAction,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateHeader,\n  TextArea,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { CopyToClipboardButton } from \"./CopyToClipboardButton\";\n\ntype GeneratedCodeTabProps = {\n  user?: UserRepresentation;\n  text: string;\n  label: string;\n};\n\nexport const GeneratedCodeTab = ({\n  text,\n  user,\n  label,\n}: GeneratedCodeTabProps) => {\n  const { t } = useTranslation();\n\n  return user ? (\n    <CodeBlock\n      id={label}\n      actions={\n        <CodeBlockAction>\n          <CopyToClipboardButton id=\"code\" text={text} label={label} />\n        </CodeBlockAction>\n      }\n    >\n      <TextArea\n        id={`text-area-${label}`}\n        rows={20}\n        value={text}\n        aria-label={label}\n      />\n    </CodeBlock>\n  ) : (\n    <EmptyState variant=\"lg\" id={label}>\n      <EmptyStateHeader titleText={<>{t(`${label}No`)}</>} headingLevel=\"h2\" />\n      <EmptyStateBody>{t(`${label}IsDisabled`)}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type ProtocolMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/protocolMapperRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type { ProtocolMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\nimport {\n  HelpItem,\n  KeycloakDataTable,\n  KeycloakSelect,\n  SelectVariant,\n  useFetch,\n  useHelp,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ClipboardCopy,\n  Form,\n  FormGroup,\n  Grid,\n  GridItem,\n  PageSection,\n  SelectOption,\n  Split,\n  SplitItem,\n  Tab,\n  TabContent,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { UserSelect } from \"../../components/users/UserSelect\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { GeneratedCodeTab } from \"./GeneratedCodeTab\";\n\nimport \"./evaluate.css\";\n\nexport type EvaluateScopesProps = {\n  clientId: string;\n  protocol: string;\n};\n\nconst ProtocolMappers = ({\n  protocolMappers,\n}: {\n  protocolMappers: ProtocolMapperRepresentation[];\n}) => {\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    setKey(key + 1);\n  }, [protocolMappers]);\n  return (\n    <KeycloakDataTable\n      key={key}\n      loader={() => Promise.resolve(protocolMappers)}\n      ariaLabelKey=\"effectiveProtocolMappers\"\n      searchPlaceholderKey=\"searchForProtocol\"\n      data-testid=\"effective-protocol-mappers\"\n      columns={[\n        {\n          name: \"mapperName\",\n          displayKey: \"name\",\n        },\n        {\n          name: \"containerName\",\n          displayKey: \"parentClientScope\",\n        },\n        {\n          name: \"type.category\",\n          displayKey: \"category\",\n        },\n        {\n          name: \"type.priority\",\n          displayKey: \"priority\",\n        },\n      ]}\n    />\n  );\n};\n\nconst EffectiveRoles = ({\n  effectiveRoles,\n}: {\n  effectiveRoles: RoleRepresentation[];\n}) => {\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    setKey(key + 1);\n  }, [effectiveRoles]);\n\n  return (\n    <KeycloakDataTable\n      key={key}\n      loader={() => Promise.resolve(effectiveRoles)}\n      ariaLabelKey=\"effectiveRoleScopeMappings\"\n      searchPlaceholderKey=\"searchForRole\"\n      data-testid=\"effective-role-scope-mappings\"\n      columns={[\n        {\n          name: \"name\",\n          displayKey: \"role\",\n        },\n        {\n          name: \"containerId\",\n          displayKey: \"origin\",\n        },\n      ]}\n    />\n  );\n};\n\nexport const EvaluateScopes = ({ clientId, protocol }: EvaluateScopesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const prefix = \"openid\";\n  const { t } = useTranslation();\n  const { enabled } = useHelp();\n  const { realm } = useRealm();\n  const mapperTypes = useServerInfo().protocolMapperTypes![protocol];\n\n  const [selectableScopes, setSelectableScopes] = useState<\n    ClientScopeRepresentation[]\n  >([]);\n  const [isScopeOpen, setIsScopeOpen] = useState(false);\n  const [selected, setSelected] = useState<string[]>([prefix]);\n  const [activeTab, setActiveTab] = useState(0);\n\n  const [key, setKey] = useState(\"\");\n  const refresh = () => setKey(`${new Date().getTime()}`);\n  const [effectiveRoles, setEffectiveRoles] = useState<RoleRepresentation[]>(\n    [],\n  );\n  const [protocolMappers, setProtocolMappers] = useState<\n    ProtocolMapperRepresentation[]\n  >([]);\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [userInfo, setUserInfo] = useState(\"\");\n  const [idToken, setIdToken] = useState(\"\");\n\n  const tabContent1 = useRef(null);\n  const tabContent2 = useRef(null);\n  const tabContent3 = useRef(null);\n  const tabContent4 = useRef(null);\n  const tabContent5 = useRef(null);\n\n  const form = useForm();\n\n  const { hasAccess } = useAccess();\n  const hasViewUsers = hasAccess(\"view-users\");\n\n  useFetch(\n    () => adminClient.clients.listOptionalClientScopes({ id: clientId }),\n    (optionalClientScopes) => setSelectableScopes(optionalClientScopes),\n    [],\n  );\n\n  useFetch(\n    async () => {\n      const scope = selected.join(\" \");\n      const effectiveRoles = await adminClient.clients.evaluatePermission({\n        id: clientId,\n        roleContainer: realm,\n        scope,\n        type: \"granted\",\n      });\n\n      const mapperList = (await adminClient.clients.evaluateListProtocolMapper({\n        id: clientId,\n        scope,\n      })) as ({\n        type: ProtocolMapperTypeRepresentation;\n      } & ProtocolMapperRepresentation)[];\n\n      return {\n        mapperList,\n        effectiveRoles,\n      };\n    },\n    ({ mapperList, effectiveRoles }) => {\n      setEffectiveRoles(effectiveRoles);\n      mapperList.map((mapper) => {\n        mapper.type = mapperTypes.find(\n          (type) => type.id === mapper.protocolMapper,\n        )!;\n      });\n\n      setProtocolMappers(mapperList);\n      refresh();\n    },\n    [selected],\n  );\n\n  useFetch(\n    async () => {\n      const scope = selected.join(\" \");\n      const user = form.getValues(\"user\");\n      if (!user) return [];\n\n      return await Promise.all([\n        adminClient.clients.evaluateGenerateAccessToken({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n        adminClient.clients.evaluateGenerateUserInfo({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n        adminClient.clients.evaluateGenerateIdToken({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n      ]);\n    },\n    ([accessToken, userInfo, idToken]) => {\n      setAccessToken(prettyPrintJSON(accessToken));\n      setUserInfo(prettyPrintJSON(userInfo));\n      setIdToken(prettyPrintJSON(idToken));\n    },\n    [form.getValues(\"user\"), selected],\n  );\n\n  return (\n    <>\n      <PageSection variant=\"light\">\n        {enabled && (\n          <TextContent className=\"keycloak__section_intro__help\">\n            <Text>\n              <QuestionCircleIcon /> {t(\"evaluateExplain\")}\n            </Text>\n          </TextContent>\n        )}\n        <Form isHorizontal>\n          <FormGroup\n            label={t(\"scopeParameter\")}\n            fieldId=\"scopeParameter\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"scopeParameterHelp\")}\n                fieldLabelId=\"scopeParameter\"\n              />\n            }\n          >\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <KeycloakSelect\n                  toggleId=\"scopeParameter\"\n                  variant={SelectVariant.typeaheadMulti}\n                  typeAheadAriaLabel={t(\"scopeParameter\")}\n                  onToggle={() => setIsScopeOpen(!isScopeOpen)}\n                  isOpen={isScopeOpen}\n                  selections={selected}\n                  onSelect={(value) => {\n                    const option = value as string;\n                    if (selected.includes(option)) {\n                      if (option !== prefix) {\n                        setSelected(selected.filter((item) => item !== option));\n                      }\n                    } else {\n                      setSelected([...selected, option]);\n                    }\n                  }}\n                  aria-labelledby={t(\"scopeParameter\")}\n                  placeholderText={t(\"scopeParameterPlaceholder\")}\n                >\n                  {selectableScopes.map((option, index) => (\n                    <SelectOption key={index} value={option.name}>\n                      {option.name}\n                    </SelectOption>\n                  ))}\n                </KeycloakSelect>\n              </SplitItem>\n              <SplitItem>\n                <ClipboardCopy className=\"keycloak__scopes_evaluate__clipboard-copy\">\n                  {selected.join(\" \")}\n                </ClipboardCopy>\n              </SplitItem>\n            </Split>\n          </FormGroup>\n          {hasViewUsers && (\n            <FormProvider {...form}>\n              <UserSelect\n                name=\"user\"\n                label=\"users\"\n                helpText={t(\"userHelp\")}\n                defaultValue=\"\"\n                variant={SelectVariant.typeahead}\n                isRequired\n              />\n            </FormProvider>\n          )}\n        </Form>\n      </PageSection>\n\n      <Grid hasGutter className=\"keycloak__scopes_evaluate__tabs\">\n        <GridItem span={8}>\n          <TabContent\n            aria-labelledby=\"pf-tab-0-effectiveProtocolMappers\"\n            eventKey={0}\n            id=\"effectiveProtocolMappers\"\n            ref={tabContent1}\n          >\n            <ProtocolMappers protocolMappers={protocolMappers} />\n          </TabContent>\n          <TabContent\n            aria-labelledby=\"pf-tab-0-effectiveRoleScopeMappings\"\n            eventKey={1}\n            id=\"effectiveRoleScopeMappings\"\n            ref={tabContent2}\n            hidden\n          >\n            <EffectiveRoles effectiveRoles={effectiveRoles} />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedAccessToken\")}\n            eventKey={2}\n            id=\"tab-generated-access-token\"\n            ref={tabContent3}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={accessToken}\n              user={form.getValues(\"user\")}\n              label=\"generatedAccessToken\"\n            />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedIdToken\")}\n            eventKey={3}\n            id=\"tab-generated-id-token\"\n            ref={tabContent4}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={idToken}\n              user={form.getValues(\"user\")}\n              label=\"generatedIdToken\"\n            />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedUserInfo\")}\n            eventKey={4}\n            id=\"tab-generated-user-info\"\n            ref={tabContent5}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={userInfo}\n              user={form.getValues(\"user\")}\n              label=\"generatedUserInfo\"\n            />\n          </TabContent>\n        </GridItem>\n        <GridItem span={4}>\n          <Tabs\n            id=\"tabs\"\n            key={key}\n            isVertical\n            activeKey={activeTab}\n            onSelect={(_, key) => setActiveTab(key as number)}\n          >\n            <Tab\n              id=\"effectiveProtocolMappers\"\n              aria-controls=\"effectiveProtocolMappers\"\n              data-testid=\"effective-protocol-mappers-tab\"\n              eventKey={0}\n              title={\n                <TabTitleText>\n                  {t(\"effectiveProtocolMappers\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"effectiveProtocolMappers\"\n                    helpText={t(\"effectiveProtocolMappersHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent1}\n            />\n            <Tab\n              id=\"effectiveRoleScopeMappings\"\n              aria-controls=\"effectiveRoleScopeMappings\"\n              data-testid=\"effective-role-scope-mappings-tab\"\n              eventKey={1}\n              title={\n                <TabTitleText>\n                  {t(\"effectiveRoleScopeMappings\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"effectiveRoleScopeMappings\"\n                    helpText={t(\"effectiveRoleScopeMappingsHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent2}\n            ></Tab>\n            <Tab\n              id=\"generatedAccessToken\"\n              aria-controls=\"generatedAccessToken\"\n              data-testid=\"generated-access-token-tab\"\n              eventKey={2}\n              title={\n                <TabTitleText>\n                  {t(\"generatedAccessToken\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"generatedAccessToken\"\n                    helpText={t(\"generatedAccessTokenHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent3}\n            />\n            <Tab\n              id=\"generatedIdToken\"\n              aria-controls=\"generatedIdToken\"\n              data-testid=\"generated-id-token-tab\"\n              eventKey={3}\n              title={\n                <TabTitleText>\n                  {t(\"generatedIdToken\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"generatedIdToken\"\n                    helpText={t(\"generatedIdTokenHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent4}\n            />\n            <Tab\n              id=\"generatedUserInfo\"\n              aria-controls=\"generatedUserInfo\"\n              data-testid=\"generated-user-info-tab\"\n              eventKey={4}\n              title={\n                <TabTitleText>\n                  {t(\"generatedUserInfo\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"generatedUserInfo\"\n                    helpText={t(\"generatedUserInfoHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent5}\n            />\n          </Tabs>\n        </GridItem>\n      </Grid>\n    </>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type { RoleMappingPayload } from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { AlertVariant, PageSection } from \"@patternfly/react-core\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { RoleMapping, Row } from \"../../components/role-mapping/RoleMapping\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toUser } from \"../../user/routes/User\";\n\nimport \"./service-account.css\";\n\ntype ServiceAccountProps = {\n  client: ClientRepresentation;\n};\n\nexport const ServiceAccount = ({ client }: ServiceAccountProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [serviceAccount, setServiceAccount] = useState<UserRepresentation>();\n\n  const { hasAccess } = useAccess();\n  const hasManageClients = hasAccess(\"manage-clients\");\n\n  useFetch(\n    () =>\n      adminClient.clients.getServiceAccountUser({\n        id: client.id!,\n      }),\n    (serviceAccount) => setServiceAccount(serviceAccount),\n    [],\n  );\n\n  const assignRoles = async (rows: Row[]) => {\n    try {\n      const realmRoles = rows\n        .filter((row) => row.client === undefined)\n        .map((row) => row.role as RoleMappingPayload)\n        .flat();\n      await adminClient.users.addRealmRoleMappings({\n        id: serviceAccount?.id!,\n        roles: realmRoles,\n      });\n      await Promise.all(\n        rows\n          .filter((row) => row.client !== undefined)\n          .map((row) =>\n            adminClient.users.addClientRoleMappings({\n              id: serviceAccount?.id!,\n              clientUniqueId: row.client!.id!,\n              roles: [row.role as RoleMappingPayload],\n            }),\n          ),\n      );\n      addAlert(t(\"roleMappingUpdatedSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"roleMappingUpdatedError\", error);\n    }\n  };\n  return serviceAccount ? (\n    <>\n      <PageSection className=\"pf-v5-u-pb-0\">\n        <InfoCircleIcon className=\"pf-v5-c-alert__icon keycloak--service-account--info-text\" />\n        <span className=\"pf-v5-u-pl-sm\">\n          <Trans i18nKey=\"manageServiceAccountUser\">\n            {\"\"}\n            <Link\n              to={toUser({ realm, id: serviceAccount.id!, tab: \"settings\" })}\n            >\n              {{ link: serviceAccount.username }}\n            </Link>\n          </Trans>\n        </span>\n      </PageSection>\n      <RoleMapping\n        name={client.clientId!}\n        id={serviceAccount.id!}\n        type=\"users\"\n        isManager={hasManageClients || client.access?.configure}\n        save={assignRoles}\n      />\n    </>\n  ) : (\n    <KeycloakSpinner />\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  Divider,\n  DropdownItem,\n  Label,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\nimport { cloneDeep, sortBy } from \"lodash-es\";\nimport { useMemo, useState } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport {\n  ConfirmDialogModal,\n  useConfirmDialog,\n} from \"../components/confirm-dialog/ConfirmDialog\";\nimport { DownloadDialog } from \"../components/download-dialog/DownloadDialog\";\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { RolesList } from \"../components/roles-list/RolesList\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport {\n  ViewHeader,\n  ViewHeaderBadge,\n} from \"../components/view-header/ViewHeader\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport {\n  convertAttributeNameToForm,\n  convertFormValuesToObject,\n  convertToFormValues,\n  exportClient,\n} from \"../util\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { useParams } from \"../utils/useParams\";\nimport useToggle from \"../utils/useToggle\";\nimport { AdvancedTab } from \"./AdvancedTab\";\nimport { ClientSessions } from \"./ClientSessions\";\nimport { ClientSettings } from \"./ClientSettings\";\nimport { AuthorizationEvaluate } from \"./authorization/AuthorizationEvaluate\";\nimport { AuthorizationExport } from \"./authorization/AuthorizationExport\";\nimport { AuthorizationPermissions } from \"./authorization/Permissions\";\nimport { AuthorizationPolicies } from \"./authorization/Policies\";\nimport { AuthorizationResources } from \"./authorization/Resources\";\nimport { AuthorizationScopes } from \"./authorization/Scopes\";\nimport { AuthorizationSettings } from \"./authorization/Settings\";\nimport { Credentials } from \"./credentials/Credentials\";\nimport { Keys } from \"./keys/Keys\";\nimport { SamlKeys } from \"./keys/SamlKeys\";\nimport {\n  AuthorizationTab,\n  toAuthorizationTab,\n} from \"./routes/AuthenticationTab\";\nimport { ClientParams, ClientTab, toClient } from \"./routes/Client\";\nimport { toClientRole } from \"./routes/ClientRole\";\nimport { ClientScopesTab, toClientScopesTab } from \"./routes/ClientScopeTab\";\nimport { toClients } from \"./routes/Clients\";\nimport { toCreateRole } from \"./routes/NewRole\";\nimport { ClientScopes } from \"./scopes/ClientScopes\";\nimport { EvaluateScopes } from \"./scopes/EvaluateScopes\";\nimport { ServiceAccount } from \"./service-account/ServiceAccount\";\nimport { getProtocolName, isRealmClient } from \"./utils\";\n\ntype ClientDetailHeaderProps = {\n  onChange: (value: boolean) => void;\n  value: boolean | undefined;\n  save: () => void;\n  client: ClientRepresentation;\n  toggleDownloadDialog: () => void;\n  toggleDeleteDialog: () => void;\n};\n\nconst ClientDetailHeader = ({\n  onChange,\n  value,\n  save,\n  client,\n  toggleDownloadDialog,\n  toggleDeleteDialog,\n}: ClientDetailHeaderProps) => {\n  const { t } = useTranslation();\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"disableConfirmClientTitle\",\n    messageKey: \"disableConfirmClient\",\n    continueButtonLabel: \"disable\",\n    onConfirm: () => {\n      onChange(!value);\n      save();\n    },\n  });\n\n  const badges = useMemo<ViewHeaderBadge[]>(() => {\n    const protocolName = getProtocolName(\n      t,\n      client.protocol ?? \"openid-connect\",\n    );\n\n    const text = client.bearerOnly ? (\n      <Tooltip\n        data-testid=\"bearer-only-explainer-tooltip\"\n        content={t(\"explainBearerOnly\")}\n      >\n        <Label\n          data-testid=\"bearer-only-explainer-label\"\n          icon={<InfoCircleIcon />}\n        >\n          {protocolName}\n        </Label>\n      </Tooltip>\n    ) : (\n      <Label>{protocolName}</Label>\n    );\n\n    return [{ text }];\n  }, [client, t]);\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  const dropdownItems = [\n    <DropdownItem key=\"download\" onClick={toggleDownloadDialog}>\n      {t(\"downloadAdapterConfig\")}\n    </DropdownItem>,\n    <DropdownItem key=\"export\" onClick={() => exportClient(client)}>\n      {t(\"export\")}\n    </DropdownItem>,\n    ...(!isRealmClient(client) && isManager\n      ? [\n          <Divider key=\"divider\" />,\n          <DropdownItem\n            data-testid=\"delete-client\"\n            key=\"delete\"\n            onClick={toggleDeleteDialog}\n          >\n            {t(\"delete\")}\n          </DropdownItem>,\n        ]\n      : []),\n  ];\n\n  return (\n    <>\n      <DisableConfirm />\n      <ViewHeader\n        titleKey={client.clientId!}\n        subKey=\"clientsExplain\"\n        badges={badges}\n        divider={false}\n        isReadOnly={!isManager}\n        helpTextKey=\"enableDisable\"\n        dropdownItems={dropdownItems}\n        isEnabled={value}\n        onToggle={(value) => {\n          if (!value) {\n            toggleDisableDialog();\n          } else {\n            onChange(value);\n            save();\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport type SaveOptions = {\n  confirmed?: boolean;\n  messageKey?: string;\n};\n\nexport type FormFields = Omit<\n  ClientRepresentation,\n  \"authorizationSettings\" | \"resources\"\n>;\n\nexport default function ClientDetails() {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const { hasAccess } = useAccess();\n  const isFeatureEnabled = useIsFeatureEnabled();\n\n  const hasManageAuthorization = hasAccess(\"manage-authorization\");\n  const hasViewAuthorization = hasAccess(\"view-authorization\");\n  const hasManageClients = hasAccess(\"manage-clients\");\n  const hasViewClients = hasAccess(\"view-clients\");\n  const hasViewUsers = hasAccess(\"view-users\");\n  const permissionsEnabled =\n    isFeatureEnabled(Feature.AdminFineGrainedAuthz) &&\n    (hasManageAuthorization || hasViewAuthorization);\n\n  const navigate = useNavigate();\n\n  const [downloadDialogOpen, toggleDownloadDialogOpen] = useToggle();\n  const [changeAuthenticatorOpen, toggleChangeAuthenticatorOpen] = useToggle();\n\n  const form = useForm<FormFields>();\n  const { clientId } = useParams<ClientParams>();\n  const [key, setKey] = useState(0);\n\n  const clientAuthenticatorType = useWatch({\n    control: form.control,\n    name: \"clientAuthenticatorType\",\n    defaultValue: \"client-secret\",\n  });\n\n  const [client, setClient] = useState<ClientRepresentation>();\n\n  const loader = async () => {\n    const roles = await adminClient.clients.listRoles({ id: clientId });\n    return sortBy(roles, (role) => role.name?.toUpperCase());\n  };\n\n  const useTab = (tab: ClientTab) =>\n    useRoutableTab(\n      toClient({\n        realm,\n        clientId,\n        tab,\n      }),\n    );\n\n  const settingsTab = useTab(\"settings\");\n  const keysTab = useTab(\"keys\");\n  const credentialsTab = useTab(\"credentials\");\n  const rolesTab = useTab(\"roles\");\n  const clientScopesTab = useTab(\"clientScopes\");\n  const authorizationTab = useTab(\"authorization\");\n  const serviceAccountTab = useTab(\"serviceAccount\");\n  const sessionsTab = useTab(\"sessions\");\n  const permissionsTab = useTab(\"permissions\");\n  const advancedTab = useTab(\"advanced\");\n\n  const useClientScopesTab = (tab: ClientScopesTab) =>\n    useRoutableTab(\n      toClientScopesTab({\n        realm,\n        clientId,\n        tab,\n      }),\n    );\n\n  const clientScopesSetupTab = useClientScopesTab(\"setup\");\n  const clientScopesEvaluateTab = useClientScopesTab(\"evaluate\");\n\n  const useAuthorizationTab = (tab: AuthorizationTab) =>\n    useRoutableTab(\n      toAuthorizationTab({\n        realm,\n        clientId,\n        tab,\n      }),\n    );\n\n  const authorizationSettingsTab = useAuthorizationTab(\"settings\");\n  const authorizationResourcesTab = useAuthorizationTab(\"resources\");\n  const authorizationScopesTab = useAuthorizationTab(\"scopes\");\n  const authorizationPoliciesTab = useAuthorizationTab(\"policies\");\n  const authorizationPermissionsTab = useAuthorizationTab(\"permissions\");\n  const authorizationEvaluateTab = useAuthorizationTab(\"evaluate\");\n  const authorizationExportTab = useAuthorizationTab(\"export\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clientDeleteConfirmTitle\",\n    messageKey: \"clientDeleteConfirm\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.del({ id: clientId });\n        addAlert(t(\"clientDeletedSuccess\"), AlertVariant.success);\n        navigate(toClients({ realm }));\n      } catch (error) {\n        addError(\"clientDeleteError\", error);\n      }\n    },\n  });\n\n  const setupForm = (client: ClientRepresentation) => {\n    form.reset({ ...client });\n    convertToFormValues(client, form.setValue);\n    if (client.attributes?.[\"acr.loa.map\"]) {\n      form.setValue(\n        convertAttributeNameToForm(\"attributes.acr.loa.map\"),\n        // @ts-ignore\n        Object.entries(JSON.parse(client.attributes[\"acr.loa.map\"])).flatMap(\n          ([key, value]) => ({ key, value }),\n        ),\n      );\n    }\n  };\n\n  useFetch(\n    () => adminClient.clients.findOne({ id: clientId }),\n    (fetchedClient) => {\n      if (!fetchedClient) {\n        throw new Error(t(\"notFound\"));\n      }\n      setClient(cloneDeep(fetchedClient));\n      setupForm(fetchedClient);\n    },\n    [clientId, key],\n  );\n\n  const save = async (\n    { confirmed = false, messageKey = \"clientSaveSuccess\" }: SaveOptions = {\n      confirmed: false,\n      messageKey: \"clientSaveSuccess\",\n    },\n  ) => {\n    if (!(await form.trigger())) {\n      return;\n    }\n\n    if (\n      !client?.publicClient &&\n      client?.clientAuthenticatorType !== clientAuthenticatorType &&\n      !confirmed\n    ) {\n      toggleChangeAuthenticatorOpen();\n      return;\n    }\n\n    const values = convertFormValuesToObject(form.getValues());\n\n    const submittedClient =\n      convertFormValuesToObject<ClientRepresentation>(values);\n\n    if (submittedClient.attributes?.[\"acr.loa.map\"]) {\n      submittedClient.attributes[\"acr.loa.map\"] = JSON.stringify(\n        Object.fromEntries(\n          (submittedClient.attributes[\"acr.loa.map\"] as KeyValueType[])\n            .filter(({ key }) => key !== \"\")\n            .map(({ key, value }) => [key, value]),\n        ),\n      );\n    }\n\n    try {\n      const newClient: ClientRepresentation = {\n        ...client,\n        ...submittedClient,\n      };\n\n      newClient.clientId = newClient.clientId?.trim();\n\n      await adminClient.clients.update({ id: clientId }, newClient);\n      setupForm(newClient);\n      setClient(newClient);\n      addAlert(t(messageKey), AlertVariant.success);\n    } catch (error) {\n      addError(\"clientSaveError\", error);\n    }\n  };\n\n  if (!client) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <ConfirmDialogModal\n        continueButtonLabel=\"yes\"\n        cancelButtonLabel=\"no\"\n        titleKey={t(\"changeAuthenticatorConfirmTitle\", {\n          clientAuthenticatorType: clientAuthenticatorType,\n        })}\n        open={changeAuthenticatorOpen}\n        toggleDialog={toggleChangeAuthenticatorOpen}\n        onConfirm={() => save({ confirmed: true })}\n      >\n        <>\n          {t(\"changeAuthenticatorConfirm\", {\n            clientAuthenticatorType: clientAuthenticatorType,\n          })}\n        </>\n      </ConfirmDialogModal>\n      <DeleteConfirm />\n      {downloadDialogOpen && (\n        <DownloadDialog\n          id={client.id!}\n          protocol={client.protocol}\n          open\n          toggleDialog={toggleDownloadDialogOpen}\n        />\n      )}\n      <Controller\n        name=\"enabled\"\n        control={form.control}\n        defaultValue={true}\n        render={({ field }) => (\n          <ClientDetailHeader\n            value={field.value}\n            onChange={field.onChange}\n            client={client}\n            save={save}\n            toggleDeleteDialog={toggleDeleteDialog}\n            toggleDownloadDialog={toggleDownloadDialogOpen}\n          />\n        )}\n      />\n      <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n        <FormProvider {...form}>\n          <RoutableTabs\n            data-testid=\"client-tabs\"\n            aria-label=\"client-tabs\"\n            isBox\n            mountOnEnter\n          >\n            <Tab\n              id=\"settings\"\n              data-testid=\"clientSettingsTab\"\n              title={<TabTitleText>{t(\"settings\")}</TabTitleText>}\n              {...settingsTab}\n            >\n              <ClientSettings\n                client={client}\n                save={() => save()}\n                reset={() => setupForm(client)}\n              />\n            </Tab>\n            {((!client.publicClient && !isRealmClient(client)) ||\n              client.protocol === \"saml\") && (\n              <Tab\n                id=\"keys\"\n                data-testid=\"keysTab\"\n                title={<TabTitleText>{t(\"keys\")}</TabTitleText>}\n                {...keysTab}\n              >\n                {client.protocol === \"openid-connect\" && (\n                  <Keys\n                    clientId={clientId}\n                    save={save}\n                    hasConfigureAccess={client.access?.configure}\n                  />\n                )}\n                {client.protocol === \"saml\" && (\n                  <SamlKeys clientId={clientId} save={save} />\n                )}\n              </Tab>\n            )}\n            {!client.publicClient &&\n              !isRealmClient(client) &&\n              (hasViewClients ||\n                client.access?.configure ||\n                client.access?.view) && (\n                <Tab\n                  id=\"credentials\"\n                  title={<TabTitleText>{t(\"credentials\")}</TabTitleText>}\n                  {...credentialsTab}\n                >\n                  <Credentials\n                    key={key}\n                    client={client}\n                    save={save}\n                    refresh={() => setKey(key + 1)}\n                  />\n                </Tab>\n              )}\n            <Tab\n              id=\"roles\"\n              data-testid=\"rolesTab\"\n              title={<TabTitleText>{t(\"roles\")}</TabTitleText>}\n              {...rolesTab}\n            >\n              <RolesList\n                loader={loader}\n                paginated={false}\n                messageBundle=\"client\"\n                toCreate={toCreateRole({ realm, clientId: client.id! })}\n                toDetail={(roleId) =>\n                  toClientRole({\n                    realm,\n                    clientId: client.id!,\n                    id: roleId,\n                    tab: \"details\",\n                  })\n                }\n                isReadOnly={!(hasManageClients || client.access?.configure)}\n              />\n            </Tab>\n            {!isRealmClient(client) && !client.bearerOnly && (\n              <Tab\n                id=\"clientScopes\"\n                data-testid=\"clientScopesTab\"\n                title={<TabTitleText>{t(\"clientScopes\")}</TabTitleText>}\n                {...clientScopesTab}\n              >\n                <RoutableTabs\n                  defaultLocation={toClientScopesTab({\n                    realm,\n                    clientId,\n                    tab: \"setup\",\n                  })}\n                >\n                  <Tab\n                    id=\"setup\"\n                    data-testid=\"clientScopesSetupTab\"\n                    title={<TabTitleText>{t(\"setup\")}</TabTitleText>}\n                    {...clientScopesSetupTab}\n                  >\n                    <ClientScopes\n                      clientName={client.clientId!}\n                      clientId={clientId}\n                      protocol={client!.protocol!}\n                      fineGrainedAccess={client!.access?.manage}\n                    />\n                  </Tab>\n                  <Tab\n                    id=\"evaluate\"\n                    data-testid=\"clientScopesEvaluateTab\"\n                    title={<TabTitleText>{t(\"evaluate\")}</TabTitleText>}\n                    {...clientScopesEvaluateTab}\n                  >\n                    <EvaluateScopes\n                      clientId={clientId}\n                      protocol={client!.protocol!}\n                    />\n                  </Tab>\n                </RoutableTabs>\n              </Tab>\n            )}\n            {client!.authorizationServicesEnabled &&\n              (hasManageAuthorization || hasViewAuthorization) && (\n                <Tab\n                  id=\"authorization\"\n                  data-testid=\"authorizationTab\"\n                  title={<TabTitleText>{t(\"authorization\")}</TabTitleText>}\n                  {...authorizationTab}\n                >\n                  <RoutableTabs\n                    mountOnEnter\n                    unmountOnExit\n                    defaultLocation={toAuthorizationTab({\n                      realm,\n                      clientId,\n                      tab: \"settings\",\n                    })}\n                  >\n                    <Tab\n                      id=\"settings\"\n                      data-testid=\"authorizationSettings\"\n                      title={<TabTitleText>{t(\"settings\")}</TabTitleText>}\n                      {...authorizationSettingsTab}\n                    >\n                      <AuthorizationSettings clientId={clientId} />\n                    </Tab>\n                    <Tab\n                      id=\"resources\"\n                      data-testid=\"authorizationResources\"\n                      title={<TabTitleText>{t(\"resources\")}</TabTitleText>}\n                      {...authorizationResourcesTab}\n                    >\n                      <AuthorizationResources\n                        clientId={clientId}\n                        isDisabled={!hasManageAuthorization}\n                      />\n                    </Tab>\n                    <Tab\n                      id=\"scopes\"\n                      data-testid=\"authorizationScopes\"\n                      title={<TabTitleText>{t(\"scopes\")}</TabTitleText>}\n                      {...authorizationScopesTab}\n                    >\n                      <AuthorizationScopes\n                        clientId={clientId}\n                        isDisabled={!hasManageAuthorization}\n                      />\n                    </Tab>\n                    <Tab\n                      id=\"policies\"\n                      data-testid=\"authorizationPolicies\"\n                      title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n                      {...authorizationPoliciesTab}\n                    >\n                      <AuthorizationPolicies\n                        clientId={clientId}\n                        isDisabled={!hasManageAuthorization}\n                      />\n                    </Tab>\n                    <Tab\n                      id=\"permissions\"\n                      data-testid=\"authorizationPermissions\"\n                      title={<TabTitleText>{t(\"permissions\")}</TabTitleText>}\n                      {...authorizationPermissionsTab}\n                    >\n                      <AuthorizationPermissions\n                        clientId={clientId}\n                        isDisabled={!hasManageAuthorization}\n                      />\n                    </Tab>\n                    {hasViewUsers && (\n                      <Tab\n                        id=\"evaluate\"\n                        data-testid=\"authorizationEvaluate\"\n                        title={<TabTitleText>{t(\"evaluate\")}</TabTitleText>}\n                        {...authorizationEvaluateTab}\n                      >\n                        <AuthorizationEvaluate client={client} save={save} />\n                      </Tab>\n                    )}\n                    {hasAccess(\"manage-authorization\") && (\n                      <Tab\n                        id=\"export\"\n                        data-testid=\"authorizationExport\"\n                        title={<TabTitleText>{t(\"export\")}</TabTitleText>}\n                        {...authorizationExportTab}\n                      >\n                        <AuthorizationExport />\n                      </Tab>\n                    )}\n                  </RoutableTabs>\n                </Tab>\n              )}\n            {client!.serviceAccountsEnabled && hasViewUsers && (\n              <Tab\n                id=\"serviceAccount\"\n                data-testid=\"serviceAccountTab\"\n                title={<TabTitleText>{t(\"serviceAccount\")}</TabTitleText>}\n                {...serviceAccountTab}\n              >\n                <ServiceAccount client={client} />\n              </Tab>\n            )}\n            <Tab\n              id=\"sessions\"\n              data-testid=\"sessionsTab\"\n              title={<TabTitleText>{t(\"sessions\")}</TabTitleText>}\n              {...sessionsTab}\n            >\n              <ClientSessions client={client} />\n            </Tab>\n            {permissionsEnabled &&\n              (hasManageClients || client.access?.manage) && (\n                <Tab\n                  id=\"permissions\"\n                  data-testid=\"permissionsTab\"\n                  title={<TabTitleText>{t(\"permissions\")}</TabTitleText>}\n                  {...permissionsTab}\n                >\n                  <PermissionsTab id={client.id!} type=\"clients\" />\n                </Tab>\n              )}\n            <Tab\n              id=\"advanced\"\n              data-testid=\"advancedTab\"\n              title={<TabTitleText>{t(\"advanced\")}</TabTitleText>}\n              {...advancedTab}\n            >\n              <AdvancedTab save={save} client={client} />\n            </Tab>\n          </RoutableTabs>\n        </FormProvider>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["styles","CodeBlock","_a","children","className","actions","props","__rest","React","css","CodeBlockAction","PanelHeader","TextListVariants","TextList","component","isPlain","Component","TextListItemVariants","TextListItem","DownloadDialog","id","open","toggleDialog","protocol","adminClient","useAdminClient","realm","useRealm","t","useTranslation","enabled","useHelp","configFormats","useServerInfo","selected","setSelected","useState","snippet","setSnippet","openType","setOpenType","selectedConfig","useMemo","config","sanitizeSnippet","useFetch","fetchWithError","addTrailingSlash","getAuthorizationHeaders","prettyPrintJSON","useEffect","jsx","ConfirmDialogModal","saveAs","ModalVariant","Form","jsxs","Stack","StackItem","FormGroup","HelpItem","Select","isOpen","ref","MenuToggle","_","value","SelectList","configFormat","SelectOption","TextArea","inherited","expires","TokenLifespan","name","defaultValue","units","setOpen","focused","setFocused","onFocus","onBlur","control","useFormContext","isExpireSet","Controller","field","Split","SplitItem","TimeSelector","AdvancedSettings","save","reset","hasConfigureAccess","isDPoPEnabled","useIsFeatureEnabled","Feature","FormAccess","convertAttributeNameToForm","Fragment","DefaultSwitchControl","v","KeyValueInput","MultiLineInput","ActionGroup","Button","AuthenticationOverrides","flows","setFlows","filteredFlows","flow","sortBy","f","SelectControl","alias","TimeSelectorForm","useController","AddHostDialog","onAdded","onClose","form","useForm","handleSubmit","isDirty","isValid","addAlert","addError","useAlerts","onSubmit","node","AlertVariant","error","Modal","ButtonVariant","FormProvider","TextControl","ClusteringPanel","registeredNodes","access","formatDate","useFormatDate","nodes","setNodes","expanded","setExpanded","selectedNode","setSelectedNode","addNodeOpen","setAddNodeOpen","key","setKey","refresh","testCluster","result","parseResult","toggleDeleteNodeConfirm","DeleteNodeConfirm","useConfirmDialog","object","ExpandableSection","_event","val","KeycloakDataTable","entry","ToolbarItem","FORMAT_DATE_AND_TIME","ListEmptyState","ApplicationUrls","FineGrainOpenIdConnect","providers","clientSignatureProviders","contentEncryptionProviders","cekManagementProviders","signatureProviders","convert","list","sortProviders","i","prependEmpty","prependAny","prependNone","p","FineGrainSamlEndpointConfig","OpenIdConnectCompatibilityModes","Switch","prefixKey","successCount","failedCount","AdvancedTab","client","openIdConnect","setValue","publicClient","attributes","authenticationFlowBindingOverrides","resetFields","names","PageSection","ScrollForm","Text","toUpperCase","ClientSessions","SessionsTable","first","max","mapSessionsToType","type","sessions","session","AccessSettings","watch","hasAccess","useAccess","isManager","LoginSettings","FixedButtonsGroup","LoginSettingsPanel","loginThemes","consentRequired","displayOnConsentScreen","TextAreaControl","validateUrl","uri","LogoutPanel","frontchannelLogout","Toggle","label","SamlConfig","SIGNATURE_ALGORITHMS","KEYNAME_TRANSFORMER","CANONICALIZATION","SamlSignature","signDocs","signAssertion","ClientSettings","ClientDescription","CapabilityConfig","ValueInput","rowIndex","attribute","selectableValues","resources","register","getValues","isValueOpenArray","setIsValueOpenArray","toggleValueSelect","arr","attributeValues","values","defaultContextAttributes","attr","renderSelectOptionType","scopeValues","resource","scope","getMessageBundleKey","attributeName","camelCase","Td","KeycloakSelect","SelectVariant","TextInput","KeyBasedAttributeInput","fields","append","remove","useFieldArray","isKeyOpenArray","setIsKeyOpenArray","toggleKeySelect","watchLastValue","Table","Thead","Tr","Th","Tbody","MinusCircleIcon","PlusCircleIcon","AuthorizationDataModal","data","show","toggle","useToggle","TextContent","TextVariants","AuthorizationEvaluateResourcePolicies","idx","outerPolicy","clientId","useParams","prev","Link","toPermissionDetails","DecisionEffect","ExpandableRowContent","DescriptionList","item","toPolicyDetails","capitalize","AuthorizationEvaluateResource","evaluateResults","filterResults","results","filter","status","Results","evaluateResult","back","filterDropdownOpen","toggleFilterDropdown","setFilter","searchQuery","setSearchQuery","searchInput","setSearchInput","confirmSearchQuery","handleKeyDown","e","filteredResources","noEvaluatedData","noFilteredData","Toolbar","ToolbarGroup","InputGroup","InputGroupItem","SearchIcon","Divider","AuthorizationEvaluate","AuthorizationEvaluateContent","ForbiddenSection","trigger","isExpanded","setIsExpanded","applyToResourceType","setApplyToResourceType","setResources","scopes","setScopes","setEvaluateResult","clientRoles","setClientRoles","roles","evaluate","formValues","keys","keyValueToArray","resEval","r","s","evaluation","user","useWatch","Panel","Title","PanelMainBody","ClientSelect","UserSelect","role","AuthorizationExport","code","setCode","authorizationDetails","setAuthorizationDetails","authDetails","exportAuthDetails","KeycloakSpinner","DetailDescription","DetailDescriptionLink","array","link","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","element","EmptyButton","permissionType","disabled","navigate","useNavigate","toNewPermission","TooltipEmptyButton","Tooltip","EmptyPermissionsState","isResourceEnabled","isScopeEnabled","EmptyState","EmptyStateHeader","EmptyStateIcon","EmptyStateBody","EmptyStateFooter","MoreLabel","Label","SearchDropdown","types","search","onSearch","submit","Dropdown","AssociatedPoliciesRenderer","row","AuthorizationPermissions","isDisabled","permissions","setPermissions","selectedPermission","setSelectedPermission","policyProviders","setPolicyProviders","disabledCreate","setDisabledCreate","createOpen","toggleCreate","setSearch","setMax","setFirst","permission","associatedPolicies","params","policies","toggleDeleteDialog","DeleteConfirm","noData","searching","PaginatingTableToolbar","DropdownList","DropdownItem","Alert","rows","index","DependentPoliciesRenderer","AuthorizationPolicies","setPolicies","selectedPolicy","setSelectedPolicy","newDialog","policy","dependentPolicies","NewPolicyDialog","toCreatePolicy","DetailCell","uris","setScope","toScopeDetails","UriRenderer","TableText","AuthorizationResources","selectedResource","setSelectedResource","setPermission","fetchPermissions","toCreateResource","toResourceDetails","AuthorizationScopes","deleteDialog","selectedScope","setSelectedScope","collapsed","setCollapsed","getScope","c","newlyOpened","resourcesScopes","resourceScope","DeleteScopeDialog","toNewScope","ImportDialog","onConfirm","closeDialog","imported","setImported","JsonFileUpload","Radio","POLICY_ENFORCEMENT_MODES","AuthorizationSettings","setResource","importDialog","toggleImportDialog","importResource","mode","DecisionStrategySelect","useQueryPermission","setStatus","plainStatus","setPlainStatus","updatePlainStatus","newStatus","onStatusChange","CopyToClipboardButton","text","variant","setTimeout","useSetTimeout","permissionDenied","copyState","setCopyState","copyMessageKey","copyToClipboard","ClipboardCopyButton","SecretInput","buttonLabel","secret","PasswordInput","ExpireDateFormatter","time","ClientSecret","secretRotated","setSecretRotated","secretExpirationTime","secretRotatedExpirationTime","expired","toggleInvalidateConfirm","InvalidateConfirm","SignedJWT","clientAuthenticatorType","cryptoInfo","option","X509","Credentials","setProviders","setSecret","accessToken","setAccessToken","selectedProvider","provider","regenerate","call","message","regenerateClientSecret","toggleClientSecretConfirm","ClientSecretConfirm","regenerateAccessToken","toggleAccessTokenConfirm","AccessTokenConfirm","Card","CardBody","displayName","ClipboardCopy","CertificateDisplay","keyInfo","Certificate","plain","useId","StoreSettings","hidePassword","isSaml","PasswordControl","CERT_PEM","extensions","getFileExtension","format","KeyForm","hasPem","useFile","filename","setFilename","supportedKeystoreTypes","FileUpload","GenerateKeyDialog","ImportKeyDialog","baseFormats","formats","importFile","Keys","setKeyInfo","openGenerateKeys","toggleOpenGenerateKeys","setOpenGenerateKeys","openImportKeys","toggleOpenImportKeys","setOpenImportKeys","useJwksUrl","info","generate","keyStore","importKey","formData","file","rest","CardHeader","CardTitle","ExportSamlKeyDialog","close","keyType","download","submitForm","callback","SamlKeysDialog","onCancel","setType","setKeys","Flex","FlexItem","SamlImportKeyDialog","KEYS","KEYS_MAPPING","KeySection","onChanged","onGenerate","onImport","title","showImportDialog","section","FormPanel","SamlKeys","isChanged","setIsChanged","selectedType","setSelectedType","openImport","setImportOpen","setRefresh","toggleDisableDialog","DisableConfirm","toggleReGenerateDialog","ReGenerateConfirm","isNew","DEDICATED_ROW","TypeSelector","fineGrainedAccess","isDedicatedRow","CellDropdown","changeClientScope","ClientScopes","clientName","localeSort","useLocaleSort","searchType","setSearchType","searchTypeType","setSearchTypeType","AllClientScopes","addDialogOpen","setAddDialogOpen","setRest","selectedRows","setSelectedRowState","setSelectedRows","kebabOpen","setKebabOpen","isViewer","loader","defaultClientScopes","optionalClientScopes","clientScopes","find","clientScope","optional","ClientScope","defaultScopes","mapByKey","nameFilter","typeFilter","firstNum","removeClientScope","AddScopeDialog","addClientScope","SearchToolbar","ChangeTypeDropdown","EllipsisVIcon","toDedicatedScope","translationFormatter","GeneratedCodeTab","ProtocolMappers","protocolMappers","EffectiveRoles","effectiveRoles","EvaluateScopes","prefix","mapperTypes","selectableScopes","setSelectableScopes","isScopeOpen","setIsScopeOpen","activeTab","setActiveTab","setEffectiveRoles","setProtocolMappers","userInfo","setUserInfo","idToken","setIdToken","tabContent1","useRef","tabContent2","tabContent3","tabContent4","tabContent5","hasViewUsers","mapperList","mapper","QuestionCircleIcon","Grid","GridItem","TabContent","Tabs","Tab","TabTitleText","ServiceAccount","serviceAccount","setServiceAccount","hasManageClients","assignRoles","realmRoles","InfoCircleIcon","Trans","toUser","RoleMapping","ClientDetailHeader","onChange","toggleDownloadDialog","badges","protocolName","getProtocolName","dropdownItems","exportClient","isRealmClient","ViewHeader","ClientDetails","isFeatureEnabled","hasManageAuthorization","hasViewAuthorization","hasViewClients","permissionsEnabled","downloadDialogOpen","toggleDownloadDialogOpen","changeAuthenticatorOpen","toggleChangeAuthenticatorOpen","setClient","useTab","tab","useRoutableTab","toClient","settingsTab","keysTab","credentialsTab","rolesTab","clientScopesTab","authorizationTab","serviceAccountTab","sessionsTab","permissionsTab","advancedTab","useClientScopesTab","toClientScopesTab","clientScopesSetupTab","clientScopesEvaluateTab","useAuthorizationTab","toAuthorizationTab","authorizationSettingsTab","authorizationResourcesTab","authorizationScopesTab","authorizationPoliciesTab","authorizationPermissionsTab","authorizationEvaluateTab","authorizationExportTab","toClients","setupForm","fetchedClient","cloneDeep","confirmed","messageKey","convertFormValuesToObject","submittedClient","newClient","RoutableTabs","RolesList","toCreateRole","roleId","toClientRole","PermissionsTab"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}