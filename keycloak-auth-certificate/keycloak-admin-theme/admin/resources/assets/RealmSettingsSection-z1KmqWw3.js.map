{"version":3,"file":"RealmSettingsSection-z1KmqWw3.js","sources":["../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/Select/SelectGroup.js","../../../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/flatten.js","../../../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_flatRest.js","../../../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isPlainObject.js","../../../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_parent.js","../../../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseUnset.js","../../../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_customOmitClone.js","../../../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/omit.js","../../../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/uniqWith.js","../../../../../../../src/utils/useCurrentUser.ts","../../../../../../../src/realm-settings/EmailTab.tsx","../../../../../../../src/realm-settings/GeneralTab.tsx","../../../../../../../src/realm-settings/LoginTab.tsx","../../../../../../../src/realm-settings/PartialExport.tsx","../../../../../../../src/realm-settings/PartialImport.tsx","../../../../../../../src/realm-settings/PoliciesTab.tsx","../../../../../../../src/realm-settings/ProfilesTab.tsx","../../../../../../../src/realm-settings/SessionsTab.tsx","../../../../../../../src/realm-settings/ThemesTab.tsx","../../../../../../../src/realm-settings/TokensTab.tsx","../../../../../../../src/realm-settings/DefaultGroupsTab.tsx","../../../../../../../src/realm-settings/UserRegistration.tsx","../../../../../../../src/realm-settings/event-config/EventsTypeTable.tsx","../../../../../../../src/realm-settings/event-config/AddEventTypesDialog.tsx","../../../../../../../src/realm-settings/event-config/EventConfigForm.tsx","../../../../../../../src/realm-settings/event-config/EventListenersForm.tsx","../../../../../../../src/realm-settings/event-config/EventsTab.tsx","../../../../../../../src/realm-settings/keys/KeysListTab.tsx","../../../../../../../src/realm-settings/keys/key-providers/KeyProviderModal.tsx","../../../../../../../src/realm-settings/keys/key-providers/KeyProvidersPicker.tsx","../../../../../../../src/realm-settings/keys/KeysProvidersTab.tsx","../../../../../../../src/realm-settings/keys/KeysTab.tsx","../../../../../../../src/realm-settings/localization/EffectiveMessageBundles.tsx","../../../../../../../src/realm-settings/AddTranslationModal.tsx","../../../../../../../src/realm-settings/localization/RealmOverrides.tsx","../../../../../../../src/realm-settings/localization/LocalizationTab.tsx","../../../../../../../src/realm-settings/security-defences/HelpLinkTextInput.tsx","../../../../../../../src/realm-settings/security-defences/HeadersForm.tsx","../../../../../../../src/realm-settings/security-defences/Time.tsx","../../../../../../../src/realm-settings/security-defences/BruteForceDetection.tsx","../../../../../../../src/realm-settings/security-defences/SecurityDefenses.tsx","../../../../../../../src/realm-settings/user-profile/AttributesGroupTab.tsx","../../../../../../../src/realm-settings/user-profile/AttributesTab.tsx","../../../../../../../src/realm-settings/user-profile/JsonEditorTab.tsx","../../../../../../../src/realm-settings/user-profile/UserProfileTab.tsx","../../../../../../../src/realm-settings/RealmSettingsTabs.tsx","../../../../../../../src/realm-settings/RealmSettingsSection.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { MenuGroup } from '../Menu';\nexport const SelectGroup = (_a) => {\n    var { children, className, label } = _a, props = __rest(_a, [\"children\", \"className\", \"label\"]);\n    return (React.createElement(MenuGroup, Object.assign({ className: css(className), label: label }, props), children));\n};\nSelectGroup.displayName = 'SelectGroup';\n//# sourceMappingURL=SelectGroup.js.map","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","import flatten from './flatten.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nexport default flatRest;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","import baseGet from './_baseGet.js';\nimport baseSlice from './_baseSlice.js';\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nexport default parent;\n","import castPath from './_castPath.js';\nimport last from './last.js';\nimport parent from './_parent.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\n\nexport default baseUnset;\n","import isPlainObject from './isPlainObject.js';\n\n/**\n * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n * objects.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {string} key The key of the property to inspect.\n * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n */\nfunction customOmitClone(value) {\n  return isPlainObject(value) ? undefined : value;\n}\n\nexport default customOmitClone;\n","import arrayMap from './_arrayMap.js';\nimport baseClone from './_baseClone.js';\nimport baseUnset from './_baseUnset.js';\nimport castPath from './_castPath.js';\nimport copyObject from './_copyObject.js';\nimport customOmitClone from './_customOmitClone.js';\nimport flatRest from './_flatRest.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nexport default omit;\n","import baseUniq from './_baseUniq.js';\n\n/**\n * This method is like `_.uniq` except that it accepts `comparator` which\n * is invoked to compare elements of `array`. The order of result values is\n * determined by the order they occur in the array.The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.uniqWith(objects, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n */\nfunction uniqWith(array, comparator) {\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n}\n\nexport default uniqWith;\n","import UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { useState } from \"react\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useWhoAmI } from \"../context/whoami/WhoAmI\";\n\nexport function useCurrentUser() {\n  const { adminClient } = useAdminClient();\n  const { whoAmI } = useWhoAmI();\n  const [currentUser, setCurrentUser] = useState<UserRepresentation>();\n\n  const userId = whoAmI.getUserId();\n\n  useFetch(() => adminClient.users.findOne({ id: userId }), setCurrentUser, [\n    userId,\n  ]);\n\n  return { ...currentUser, realm: whoAmI.getRealm() };\n}\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  ActionListItem,\n  Alert,\n  AlertActionLink,\n  AlertVariant,\n  Button,\n  Checkbox,\n  FormGroup,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport {\n  FormPanel,\n  PasswordControl,\n  SwitchControl,\n  TextControl,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { toUser } from \"../user/routes/User\";\nimport { emailRegexPattern } from \"../util\";\nimport { useCurrentUser } from \"../utils/useCurrentUser\";\nimport useToggle from \"../utils/useToggle\";\n\nimport \"./realm-settings-section.css\";\n\ntype RealmSettingsEmailTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\ntype FormFields = Omit<RealmRepresentation, \"users\" | \"federatedUsers\">;\n\nexport const RealmSettingsEmailTab = ({\n  realm,\n  save,\n}: RealmSettingsEmailTabProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const currentUser = useCurrentUser();\n\n  const form = useForm<FormFields>({ defaultValues: realm });\n  const { control, handleSubmit, watch, reset: resetForm, getValues } = form;\n\n  const reset = () => resetForm(realm);\n  const watchFromValue = watch(\"smtpServer.from\", \"\");\n  const watchHostValue = watch(\"smtpServer.host\", \"\");\n  const [isTesting, toggleTest] = useToggle();\n\n  const authenticationEnabled = useWatch({\n    control,\n    name: \"smtpServer.auth\",\n    defaultValue: \"\",\n  });\n\n  const testConnection = async () => {\n    const toNumber = (value: string) => Number(value);\n    const toBoolean = (value: string) => value === true.toString();\n    const valueMapper = new Map<string, (value: string) => unknown>([\n      [\"port\", toNumber],\n      [\"ssl\", toBoolean],\n      [\"starttls\", toBoolean],\n      [\"auth\", toBoolean],\n    ]);\n\n    const serverSettings = { ...getValues()[\"smtpServer\"] };\n\n    for (const [key, mapperFn] of valueMapper.entries()) {\n      serverSettings[key] = mapperFn(serverSettings[key]);\n    }\n\n    // For default value, back end is expecting null instead of 0\n    if (serverSettings.port === 0) serverSettings.port = null;\n\n    try {\n      toggleTest();\n      await adminClient.realms.testSMTPConnection(\n        { realm: realm.realm! },\n        serverSettings,\n      );\n      addAlert(t(\"testConnectionSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"testConnectionError\", error);\n    }\n    toggleTest();\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormProvider {...form}>\n        <FormPanel title={t(\"template\")} className=\"kc-email-template\">\n          <FormAccess\n            isHorizontal\n            role=\"manage-realm\"\n            className=\"pf-v5-u-mt-lg\"\n            onSubmit={handleSubmit(save)}\n          >\n            <TextControl\n              name=\"smtpServer.from\"\n              label={t(\"from\")}\n              type=\"email\"\n              placeholder={t(\"smtpFromPlaceholder\")}\n              rules={{\n                pattern: {\n                  value: emailRegexPattern,\n                  message: t(\"emailInvalid\"),\n                },\n                required: t(\"required\"),\n              }}\n            />\n            <TextControl\n              name=\"smtpServer.fromDisplayName\"\n              label={t(\"fromDisplayName\")}\n              labelIcon={t(\"fromDisplayNameHelp\")}\n              placeholder={t(\"smtpFromDisplayPlaceholder\")}\n            />\n            <TextControl\n              name=\"smtpServer.replyTo\"\n              label={t(\"replyTo\")}\n              type=\"email\"\n              placeholder={t(\"replyToEmailPlaceholder\")}\n              rules={{\n                pattern: {\n                  value: emailRegexPattern,\n                  message: t(\"emailInvalid\"),\n                },\n              }}\n            />\n            <TextControl\n              name=\"smtpServer.replyToDisplayName\"\n              label={t(\"replyToDisplayName\")}\n              labelIcon={t(\"replyToDisplayNameHelp\")}\n              placeholder={t(\"replyToDisplayPlaceholder\")}\n            />\n            <TextControl\n              name=\"smtpServer.envelopeFrom\"\n              label={t(\"envelopeFrom\")}\n              labelIcon={t(\"envelopeFromHelp\")}\n              placeholder={t(\"senderEnvelopePlaceholder\")}\n            />\n          </FormAccess>\n        </FormPanel>\n        <FormPanel\n          className=\"kc-email-connection\"\n          title={t(\"connectionAndAuthentication\")}\n        >\n          <FormAccess\n            isHorizontal\n            role=\"manage-realm\"\n            className=\"pf-v5-u-mt-lg\"\n            onSubmit={handleSubmit(save)}\n          >\n            <TextControl\n              name=\"smtpServer.host\"\n              label={t(\"host\")}\n              rules={{\n                required: t(\"required\"),\n              }}\n            />\n            <TextControl\n              name=\"smtpServer.port\"\n              label={t(\"port\")}\n              placeholder={t(\"smtpPortPlaceholder\")}\n            />\n            <FormGroup label={t(\"encryption\")} fieldId=\"kc-html-display-name\">\n              <Controller\n                name=\"smtpServer.ssl\"\n                control={control}\n                defaultValue=\"false\"\n                render={({ field }) => (\n                  <Checkbox\n                    id=\"kc-enable-ssl\"\n                    data-testid=\"enable-ssl\"\n                    label={t(\"enableSSL\")}\n                    isChecked={field.value === \"true\"}\n                    onChange={(_event, value) => field.onChange(\"\" + value)}\n                  />\n                )}\n              />\n              <Controller\n                name=\"smtpServer.starttls\"\n                control={control}\n                defaultValue=\"false\"\n                render={({ field }) => (\n                  <Checkbox\n                    id=\"kc-enable-start-tls\"\n                    data-testid=\"enable-start-tls\"\n                    label={t(\"enableStartTLS\")}\n                    isChecked={field.value === \"true\"}\n                    onChange={(_event, value) => field.onChange(\"\" + value)}\n                  />\n                )}\n              />\n            </FormGroup>\n            <SwitchControl\n              name=\"smtpServer.auth\"\n              label={t(\"authentication\")}\n              defaultValue=\"\"\n              labelOn={t(\"enabled\")}\n              labelOff={t(\"disabled\")}\n              stringify\n            />\n            {authenticationEnabled === \"true\" && (\n              <>\n                <TextControl\n                  name=\"smtpServer.user\"\n                  label={t(\"username\")}\n                  placeholder={t(\"loginUsernamePlaceholder\")}\n                  rules={{\n                    required: t(\"required\"),\n                  }}\n                />\n                <PasswordControl\n                  name=\"smtpServer.password\"\n                  label={t(\"password\")}\n                  labelIcon={t(\"passwordHelp\")}\n                  rules={{\n                    required: t(\"required\"),\n                  }}\n                />\n              </>\n            )}\n            {currentUser && (\n              <FormGroup id=\"descriptionTestConnection\">\n                {currentUser.email ? (\n                  <Alert\n                    variant=\"info\"\n                    component=\"h2\"\n                    isInline\n                    title={t(\"testConnectionHint.withEmail\", {\n                      email: currentUser.email,\n                    })}\n                  />\n                ) : (\n                  <Alert\n                    variant=\"warning\"\n                    component=\"h2\"\n                    isInline\n                    title={t(\"testConnectionHint.withoutEmail\", {\n                      userName: currentUser.username,\n                    })}\n                    actionLinks={\n                      <AlertActionLink\n                        component={(props) => (\n                          <Link\n                            {...props}\n                            to={toUser({\n                              realm: currentUser.realm!,\n                              id: currentUser.id!,\n                              tab: \"settings\",\n                            })}\n                          />\n                        )}\n                      >\n                        {t(\"testConnectionHint.withoutEmailAction\")}\n                      </AlertActionLink>\n                    }\n                  />\n                )}\n              </FormGroup>\n            )}\n            <ActionGroup>\n              <ActionListItem>\n                <Button\n                  variant=\"primary\"\n                  type=\"submit\"\n                  data-testid=\"email-tab-save\"\n                >\n                  {t(\"save\")}\n                </Button>\n              </ActionListItem>\n              <ActionListItem>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => testConnection()}\n                  data-testid=\"test-connection-button\"\n                  isDisabled={\n                    !(\n                      emailRegexPattern.test(watchFromValue) && watchHostValue\n                    ) || !currentUser?.email\n                  }\n                  aria-describedby=\"descriptionTestConnection\"\n                  isLoading={isTesting}\n                  spinnerAriaValueText={t(\"testingConnection\")}\n                >\n                  {t(\"testConnection\")}\n                </Button>\n              </ActionListItem>\n              <ActionListItem>\n                <Button\n                  variant=\"link\"\n                  onClick={reset}\n                  data-testid=\"email-tab-revert\"\n                >\n                  {t(\"revert\")}\n                </Button>\n              </ActionListItem>\n            </ActionGroup>\n          </FormAccess>\n        </FormPanel>\n      </FormProvider>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  UnmanagedAttributePolicy,\n  UserProfileConfig,\n} from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport {\n  FormErrorText,\n  HelpItem,\n  KeycloakSpinner,\n  SelectControl,\n  TextControl,\n  useEnvironment,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ClipboardCopy,\n  FormGroup,\n  PageSection,\n  Stack,\n  StackItem,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { DefaultSwitchControl } from \"../components/SwitchControl\";\nimport { FormattedLink } from \"../components/external-link/FormattedLink\";\nimport { FixedButtonsGroup } from \"../components/form/FixedButtonGroup\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { KeyValueInput } from \"../components/key-value-form/KeyValueInput\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport {\n  addTrailingSlash,\n  convertAttributeNameToForm,\n  convertToFormValues,\n} from \"../util\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { UIRealmRepresentation } from \"./RealmSettingsTabs\";\n\ntype RealmSettingsGeneralTabProps = {\n  realm: UIRealmRepresentation;\n  save: (realm: UIRealmRepresentation) => Promise<void>;\n};\n\nexport const RealmSettingsGeneralTab = ({\n  realm,\n  save,\n}: RealmSettingsGeneralTabProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { realm: realmName } = useRealm();\n  const [userProfileConfig, setUserProfileConfig] =\n    useState<UserProfileConfig>();\n\n  useFetch(\n    () => adminClient.users.getProfile({ realm: realmName }),\n    (config) => setUserProfileConfig(config),\n    [],\n  );\n\n  if (!userProfileConfig) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <RealmSettingsGeneralTabForm\n      realm={realm}\n      save={save}\n      userProfileConfig={userProfileConfig}\n    />\n  );\n};\n\ntype RealmSettingsGeneralTabFormProps = {\n  realm: UIRealmRepresentation;\n  save: (realm: UIRealmRepresentation) => Promise<void>;\n  userProfileConfig: UserProfileConfig;\n};\n\ntype FormFields = Omit<RealmRepresentation, \"groups\"> & {\n  unmanagedAttributePolicy: UnmanagedAttributePolicy;\n};\n\nconst REQUIRE_SSL_TYPES = [\"all\", \"external\", \"none\"];\n\nconst UNMANAGED_ATTRIBUTE_POLICIES = [\n  UnmanagedAttributePolicy.Disabled,\n  UnmanagedAttributePolicy.Enabled,\n  UnmanagedAttributePolicy.AdminView,\n  UnmanagedAttributePolicy.AdminEdit,\n];\n\nfunction RealmSettingsGeneralTabForm({\n  realm,\n  save,\n  userProfileConfig,\n}: RealmSettingsGeneralTabFormProps) {\n  const {\n    environment: { serverBaseUrl },\n  } = useEnvironment();\n\n  const { t } = useTranslation();\n  const { realm: realmName } = useRealm();\n  const form = useForm<FormFields>();\n  const {\n    control,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = form;\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const isOrganizationsEnabled = isFeatureEnabled(Feature.Organizations);\n  const isOpenid4vciEnabled = isFeatureEnabled(Feature.OpenId4VCI);\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n    setValue(\n      \"unmanagedAttributePolicy\",\n      userProfileConfig.unmanagedAttributePolicy ||\n        UNMANAGED_ATTRIBUTE_POLICIES[0],\n    );\n    if (realm.attributes?.[\"acr.loa.map\"]) {\n      const result = Object.entries(\n        JSON.parse(realm.attributes[\"acr.loa.map\"]),\n      ).flatMap(([key, value]) => ({ key, value }));\n      result.concat({ key: \"\", value: \"\" });\n      setValue(\n        convertAttributeNameToForm(\"attributes.acr.loa.map\") as any,\n        result,\n      );\n    }\n  };\n\n  useEffect(setupForm, []);\n\n  const onSubmit = handleSubmit(\n    async ({ unmanagedAttributePolicy, ...data }) => {\n      const upConfig = { ...userProfileConfig };\n\n      if (unmanagedAttributePolicy === UnmanagedAttributePolicy.Disabled) {\n        delete upConfig.unmanagedAttributePolicy;\n      } else {\n        upConfig.unmanagedAttributePolicy = unmanagedAttributePolicy;\n      }\n\n      await save({ ...data, upConfig });\n    },\n  );\n\n  return (\n    <PageSection variant=\"light\">\n      <FormProvider {...form}>\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={onSubmit}\n        >\n          <FormGroup label={t(\"realmName\")} fieldId=\"kc-realm-id\" isRequired>\n            <Controller\n              name=\"realm\"\n              control={control}\n              rules={{\n                required: { value: true, message: t(\"required\") },\n              }}\n              defaultValue=\"\"\n              render={({ field }) => (\n                <ClipboardCopy\n                  data-testid=\"realmName\"\n                  onChange={field.onChange}\n                >\n                  {field.value}\n                </ClipboardCopy>\n              )}\n            />\n            {errors.realm && (\n              <FormErrorText\n                data-testid=\"realm-id-error\"\n                message={errors.realm.message as string}\n              />\n            )}\n          </FormGroup>\n          <TextControl name=\"displayName\" label={t(\"displayName\")} />\n          <TextControl name=\"displayNameHtml\" label={t(\"htmlDisplayName\")} />\n          <TextControl\n            name={convertAttributeNameToForm(\"attributes.frontendUrl\")}\n            type=\"url\"\n            label={t(\"frontendUrl\")}\n            labelIcon={t(\"frontendUrlHelp\")}\n          />\n          <SelectControl\n            name=\"sslRequired\"\n            label={t(\"requireSsl\")}\n            labelIcon={t(\"requireSslHelp\")}\n            controller={{\n              defaultValue: \"none\",\n            }}\n            options={REQUIRE_SSL_TYPES.map((sslType) => ({\n              key: sslType,\n              value: t(`sslType.${sslType}`),\n            }))}\n          />\n          <FormGroup\n            label={t(\"acrToLoAMapping\")}\n            fieldId=\"acrToLoAMapping\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"acrToLoAMappingHelp\")}\n                fieldLabelId=\"acrToLoAMapping\"\n              />\n            }\n          >\n            <KeyValueInput\n              label={t(\"acrToLoAMapping\")}\n              name={convertAttributeNameToForm(\"attributes.acr.loa.map\")}\n            />\n          </FormGroup>\n          <DefaultSwitchControl\n            name=\"userManagedAccessAllowed\"\n            label={t(\"userManagedAccess\")}\n            labelIcon={t(\"userManagedAccessHelp\")}\n          />\n          {isOrganizationsEnabled && (\n            <DefaultSwitchControl\n              name=\"organizationsEnabled\"\n              label={t(\"organizationsEnabled\")}\n              labelIcon={t(\"organizationsEnabledHelp\")}\n            />\n          )}\n          <SelectControl\n            name=\"unmanagedAttributePolicy\"\n            label={t(\"unmanagedAttributes\")}\n            labelIcon={t(\"unmanagedAttributesHelpText\")}\n            controller={{\n              defaultValue: UNMANAGED_ATTRIBUTE_POLICIES[0],\n            }}\n            options={UNMANAGED_ATTRIBUTE_POLICIES.map((policy) => ({\n              key: policy,\n              value: t(`unmanagedAttributePolicy.${policy}`),\n            }))}\n          />\n          <FormGroup\n            label={t(\"endpoints\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"endpointsHelp\")}\n                fieldLabelId=\"endpoints\"\n              />\n            }\n            fieldId=\"kc-endpoints\"\n          >\n            <Stack>\n              <StackItem>\n                <FormattedLink\n                  href={`${addTrailingSlash(\n                    serverBaseUrl,\n                  )}realms/${realmName}/.well-known/openid-configuration`}\n                  title={t(\"openIDEndpointConfiguration\")}\n                />\n              </StackItem>\n              <StackItem>\n                <FormattedLink\n                  href={`${addTrailingSlash(\n                    serverBaseUrl,\n                  )}realms/${realmName}/protocol/saml/descriptor`}\n                  title={t(\"samlIdentityProviderMetadata\")}\n                />\n              </StackItem>\n              {isOpenid4vciEnabled && (\n                <StackItem>\n                  <FormattedLink\n                    href={`${addTrailingSlash(\n                      serverBaseUrl,\n                    )}realms/${realmName}/.well-known/openid-credential-issuer`}\n                    title={t(\"oid4vcIssuerMetadata\")}\n                  />\n                </StackItem>\n              )}\n            </Stack>\n          </FormGroup>\n          <FixedButtonsGroup\n            name=\"realmSettingsGeneralTab\"\n            reset={setupForm}\n            isSubmit\n          />\n        </FormAccess>\n      </FormProvider>\n    </PageSection>\n  );\n}\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { FormGroup, PageSection, Switch } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormPanel, HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\ntype RealmSettingsLoginTabProps = {\n  realm: RealmRepresentation;\n  refresh: () => void;\n};\n\ntype SwitchType = { [K in keyof RealmRepresentation]: boolean };\n\nexport const RealmSettingsLoginTab = ({\n  realm,\n  refresh,\n}: RealmSettingsLoginTabProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  const updateSwitchValue = async (switches: SwitchType | SwitchType[]) => {\n    const name = Array.isArray(switches)\n      ? Object.keys(switches[0])[0]\n      : Object.keys(switches)[0];\n\n    try {\n      await adminClient.realms.update(\n        {\n          realm: realmName,\n        },\n        Array.isArray(switches)\n          ? switches.reduce((realm, s) => Object.assign(realm, s), realm)\n          : Object.assign(realm, switches),\n      );\n      addAlert(t(\"enableSwitchSuccess\", { switch: t(name) }));\n      refresh();\n    } catch (error) {\n      addError(\"enableSwitchError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel\n        className=\"kc-login-screen\"\n        title={t(\"loginScreenCustomization\")}\n      >\n        <FormAccess isHorizontal role=\"manage-realm\">\n          <FormGroup\n            label={t(\"registrationAllowed\")}\n            fieldId=\"kc-user-reg\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"userRegistrationHelpText\")}\n                fieldLabelId=\"registrationAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-user-reg-switch\"\n              data-testid=\"user-reg-switch\"\n              value={realm.registrationAllowed ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.registrationAllowed}\n              onChange={(_event, value) => {\n                updateSwitchValue({ registrationAllowed: value });\n              }}\n              aria-label={t(\"registrationAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"resetPasswordAllowed\")}\n            fieldId=\"kc-forgot-pw\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"forgotPasswordHelpText\")}\n                fieldLabelId=\"resetPasswordAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-forgot-pw-switch\"\n              data-testid=\"forgot-pw-switch\"\n              name=\"resetPasswordAllowed\"\n              value={realm.resetPasswordAllowed ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.resetPasswordAllowed}\n              onChange={(_event, value) => {\n                updateSwitchValue({ resetPasswordAllowed: value });\n              }}\n              aria-label={t(\"resetPasswordAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"rememberMe\")}\n            fieldId=\"kc-remember-me\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"rememberMeHelpText\")}\n                fieldLabelId=\"rememberMe\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-remember-me-switch\"\n              data-testid=\"remember-me-switch\"\n              value={realm.rememberMe ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.rememberMe}\n              onChange={(_event, value) => {\n                updateSwitchValue({ rememberMe: value });\n              }}\n              aria-label={t(\"rememberMe\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel className=\"kc-email-settings\" title={t(\"emailSettings\")}>\n        <FormAccess isHorizontal role=\"manage-realm\">\n          <FormGroup\n            label={t(\"registrationEmailAsUsername\")}\n            fieldId=\"kc-email-as-username\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"emailAsUsernameHelpText\")}\n                fieldLabelId=\"registrationEmailAsUsername\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-email-as-username-switch\"\n              data-testid=\"email-as-username-switch\"\n              value={realm.registrationEmailAsUsername ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.registrationEmailAsUsername}\n              onChange={(_event, value) => {\n                updateSwitchValue([\n                  {\n                    registrationEmailAsUsername: value,\n                  },\n                  {\n                    duplicateEmailsAllowed: false,\n                  },\n                ]);\n              }}\n              aria-label={t(\"registrationEmailAsUsername\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"loginWithEmailAllowed\")}\n            fieldId=\"kc-login-with-email\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"loginWithEmailHelpText\")}\n                fieldLabelId=\"loginWithEmailAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-login-with-email-switch\"\n              data-testid=\"login-with-email-switch\"\n              value={realm.loginWithEmailAllowed ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.loginWithEmailAllowed}\n              onChange={(_event, value) => {\n                updateSwitchValue([\n                  {\n                    loginWithEmailAllowed: value,\n                  },\n                  { duplicateEmailsAllowed: false },\n                ]);\n              }}\n              aria-label={t(\"loginWithEmailAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"duplicateEmailsAllowed\")}\n            fieldId=\"kc-duplicate-emails\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"duplicateEmailsHelpText\")}\n                fieldLabelId=\"duplicateEmailsAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-duplicate-emails-switch\"\n              data-testid=\"duplicate-emails-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.duplicateEmailsAllowed}\n              onChange={(_event, value) => {\n                updateSwitchValue({\n                  duplicateEmailsAllowed: value,\n                });\n              }}\n              isDisabled={\n                realm.loginWithEmailAllowed || realm.registrationEmailAsUsername\n              }\n              aria-label={t(\"duplicateEmailsAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"verifyEmail\")}\n            fieldId=\"kc-verify-email\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"verifyEmailHelpText\")}\n                fieldLabelId=\"verifyEmail\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-verify-email-switch\"\n              data-testid=\"verify-email-switch\"\n              name=\"verifyEmail\"\n              value={realm.verifyEmail ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.verifyEmail}\n              onChange={(_event, value) => {\n                updateSwitchValue({ verifyEmail: value });\n              }}\n              aria-label={t(\"verifyEmail\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-user-info-settings\"\n        title={t(\"userInfoSettings\")}\n      >\n        <FormAccess isHorizontal role=\"manage-realm\">\n          <FormGroup\n            label={t(\"editUsernameAllowed\")}\n            fieldId=\"kc-edit-username\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"editUsernameHelp\")}\n                fieldLabelId=\"editUsernameAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-edit-username-switch\"\n              data-testid=\"edit-username-switch\"\n              value={realm.editUsernameAllowed ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.editUsernameAllowed}\n              onChange={(_event, value) => {\n                updateSwitchValue({ editUsernameAllowed: value });\n              }}\n              aria-label={t(\"editUsernameAllowed\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import {\n  Alert,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { prettyPrintJSON } from \"../util\";\n\nimport \"./partial-export.css\";\n\nexport type PartialExportDialogProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nexport const PartialExportDialog = ({\n  isOpen,\n  onClose,\n}: PartialExportDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n\n  const [exportGroupsAndRoles, setExportGroupsAndRoles] = useState(false);\n  const [exportClients, setExportClients] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n\n  const showWarning = exportGroupsAndRoles || exportClients;\n\n  async function exportRealm() {\n    setIsExporting(true);\n\n    try {\n      const realmExport = await adminClient.realms.export({\n        realm,\n        exportClients,\n        exportGroupsAndRoles,\n      });\n\n      saveAs(\n        new Blob([prettyPrintJSON(realmExport)], {\n          type: \"application/json\",\n        }),\n        \"realm-export.json\",\n      );\n\n      addAlert(t(\"exportSuccess\"), AlertVariant.success);\n      onClose();\n    } catch (error) {\n      addError(\"exportFail\", error);\n    }\n\n    setIsExporting(false);\n  }\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"partialExport\")}\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"export\"\n          data-testid=\"export-button\"\n          isDisabled={isExporting}\n          onClick={exportRealm}\n        >\n          {t(\"export\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel-button\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"partialExportHeaderText\")}</Text>\n      </TextContent>\n      <Form\n        isHorizontal\n        className=\"keycloak__realm-settings__partial-import_form\"\n      >\n        <FormGroup\n          label={t(\"includeGroupsAndRoles\")}\n          fieldId=\"include-groups-and-roles-check\"\n          hasNoPaddingTop\n        >\n          <Switch\n            id=\"include-groups-and-roles-check\"\n            data-testid=\"include-groups-and-roles-check\"\n            isChecked={exportGroupsAndRoles}\n            onChange={(_event, val) => setExportGroupsAndRoles(val)}\n            label={t(\"on\")}\n            labelOff={t(\"off\")}\n            aria-label={t(\"includeGroupsAndRoles\")}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"includeClients\")}\n          fieldId=\"include-clients-check\"\n          hasNoPaddingTop\n        >\n          <Switch\n            id=\"include-clients-check\"\n            data-testid=\"include-clients-check\"\n            onChange={(_event, val) => setExportClients(val)}\n            isChecked={exportClients}\n            label={t(\"on\")}\n            labelOff={t(\"off\")}\n            aria-label={t(\"includeClients\")}\n          />\n        </FormGroup>\n      </Form>\n\n      {showWarning && (\n        <Alert\n          data-testid=\"warning-message\"\n          variant=\"warning\"\n          component=\"p\"\n          title={t(\"exportWarningTitle\")}\n          isInline\n        >\n          {t(\"exportWarningDescription\")}\n        </Alert>\n      )}\n    </Modal>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type {\n  PartialImportRealmRepresentation,\n  PartialImportResponse,\n  PartialImportResult,\n} from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { KeycloakSelect } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Alert,\n  Button,\n  ButtonVariant,\n  Checkbox,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Divider,\n  Label,\n  Modal,\n  ModalVariant,\n  SelectOption,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { FormEvent, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { JsonFileUpload } from \"../components/json-file-upload/JsonFileUpload\";\nimport { KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\nexport type PartialImportProps = {\n  open: boolean;\n  toggleDialog: () => void;\n};\n\n// An imported JSON file can either be an array of realm objects\n// or a single realm object.\ntype ImportedMultiRealm = RealmRepresentation | RealmRepresentation[];\n\ntype NonRoleResource = \"users\" | \"clients\" | \"groups\" | \"identityProviders\";\ntype RoleResource = \"realmRoles\" | \"clientRoles\";\ntype Resource = NonRoleResource | RoleResource;\n\ntype CollisionOption = \"FAIL\" | \"SKIP\" | \"OVERWRITE\";\n\ntype ResourceChecked = { [k in Resource]: boolean };\n\nconst INITIAL_RESOURCES: Readonly<ResourceChecked> = {\n  users: false,\n  clients: false,\n  groups: false,\n  identityProviders: false,\n  realmRoles: false,\n  clientRoles: false,\n};\n\nexport const PartialImportDialog = (props: PartialImportProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  const [importedFile, setImportedFile] = useState<ImportedMultiRealm>();\n  const isFileSelected = !!importedFile;\n  const [isRealmSelectOpen, setIsRealmSelectOpen] = useState(false);\n  const [isCollisionSelectOpen, setIsCollisionSelectOpen] = useState(false);\n  const [importInProgress, setImportInProgress] = useState(false);\n  const [collisionOption, setCollisionOption] =\n    useState<CollisionOption>(\"FAIL\");\n  const [targetRealm, setTargetRealm] = useState<RealmRepresentation>({});\n  const [importResponse, setImportResponse] = useState<PartialImportResponse>();\n  const { addError } = useAlerts();\n\n  const [resourcesToImport, setResourcesToImport] = useState(INITIAL_RESOURCES);\n  const isAnyResourceChecked = Object.values(resourcesToImport).some(\n    (checked) => checked,\n  );\n\n  const resetResourcesToImport = () => {\n    setResourcesToImport(INITIAL_RESOURCES);\n  };\n\n  const resetInputState = () => {\n    setImportedFile(undefined);\n    setTargetRealm({});\n    setCollisionOption(\"FAIL\");\n    resetResourcesToImport();\n  };\n\n  // when dialog opens or closes, clear state\n  useEffect(() => {\n    setImportInProgress(false);\n    setImportResponse(undefined);\n    resetInputState();\n  }, [props.open]);\n\n  const handleFileChange = (value: ImportedMultiRealm) => {\n    resetInputState();\n    setImportedFile(value);\n\n    if (!Array.isArray(value)) {\n      setTargetRealm(value);\n    } else if (value.length > 0) {\n      setTargetRealm(value[0]);\n    }\n  };\n\n  const handleRealmSelect = (realm: string | number | object) => {\n    setTargetRealm(realm as RealmRepresentation);\n    setIsRealmSelectOpen(false);\n    resetResourcesToImport();\n  };\n\n  const handleResourceCheckBox = (\n    checked: boolean,\n    event: FormEvent<HTMLInputElement>,\n  ) => {\n    const resource = event.currentTarget.name as Resource;\n\n    setResourcesToImport({\n      ...resourcesToImport,\n      [resource]: checked,\n    });\n  };\n\n  const realmSelectOptions = (realms: RealmRepresentation[]) =>\n    realms.map((realm) => (\n      <SelectOption\n        key={realm.id}\n        value={realm}\n        data-testid={realm.id + \"-select-option\"}\n      >\n        {realm.realm || realm.id}\n      </SelectOption>\n    ));\n\n  const handleCollisionSelect = (option: string | number | object) => {\n    setCollisionOption(option as CollisionOption);\n    setIsCollisionSelectOpen(false);\n  };\n\n  const collisionOptions = () => {\n    return [\n      <SelectOption key=\"fail\" value=\"FAIL\">\n        {t(\"FAIL\")}\n      </SelectOption>,\n      <SelectOption key=\"skip\" value=\"SKIP\">\n        {t(\"SKIP\")}\n      </SelectOption>,\n      <SelectOption key=\"overwrite\" value=\"OVERWRITE\">\n        {t(\"OVERWRITE\")}\n      </SelectOption>,\n    ];\n  };\n\n  const targetHasResources = () => {\n    return (\n      targetHasResource(\"users\") ||\n      targetHasResource(\"groups\") ||\n      targetHasResource(\"clients\") ||\n      targetHasResource(\"identityProviders\") ||\n      targetHasRealmRoles() ||\n      targetHasClientRoles()\n    );\n  };\n\n  const targetHasResource = (resource: NonRoleResource) => {\n    const value = targetRealm[resource];\n    return value !== undefined && value.length > 0;\n  };\n\n  const targetHasRealmRoles = () => {\n    const value = targetRealm.roles?.realm;\n    return value !== undefined && value.length > 0;\n  };\n\n  const targetHasClientRoles = () => {\n    const value = targetRealm.roles?.client;\n    return value !== undefined && Object.keys(value).length > 0;\n  };\n\n  const itemCount = (resource: Resource) => {\n    if (!isFileSelected) return 0;\n\n    if (resource === \"realmRoles\") {\n      return targetRealm.roles?.realm?.length ?? 0;\n    }\n\n    if (resource === \"clientRoles\") {\n      return targetHasClientRoles()\n        ? clientRolesCount(targetRealm.roles!.client!)\n        : 0;\n    }\n\n    return targetRealm[resource]?.length ?? 0;\n  };\n\n  const clientRolesCount = (\n    clientRoles: Record<string, RoleRepresentation[]>,\n  ) =>\n    Object.values(clientRoles).reduce((total, role) => total + role.length, 0);\n\n  const resourceDataListItem = (\n    resource: Resource,\n    resourceDisplayName: string,\n  ) => {\n    return (\n      <DataListItem aria-labelledby={`${resource}-list-item`}>\n        <DataListItemRow>\n          <DataListItemCells\n            dataListCells={[\n              <DataListCell key={resource}>\n                <Checkbox\n                  id={`${resource}-checkbox`}\n                  label={`${itemCount(resource)} ${resourceDisplayName}`}\n                  aria-labelledby={`${resource}-checkbox`}\n                  name={resource}\n                  isChecked={resourcesToImport[resource]}\n                  onChange={(event, checked: boolean) =>\n                    handleResourceCheckBox(checked, event)\n                  }\n                  data-testid={resource + \"-checkbox\"}\n                />\n              </DataListCell>,\n            ]}\n          />\n        </DataListItemRow>\n      </DataListItem>\n    );\n  };\n\n  const jsonForImport = () => {\n    const jsonToImport: PartialImportRealmRepresentation = {\n      ifResourceExists: collisionOption,\n      id: targetRealm.id,\n      realm: targetRealm.realm,\n    };\n\n    if (resourcesToImport[\"users\"]) jsonToImport.users = targetRealm.users;\n    if (resourcesToImport[\"groups\"]) jsonToImport.groups = targetRealm.groups;\n    if (resourcesToImport[\"identityProviders\"])\n      jsonToImport.identityProviders = targetRealm.identityProviders;\n    if (resourcesToImport[\"clients\"])\n      jsonToImport.clients = targetRealm.clients;\n    if (resourcesToImport[\"realmRoles\"] || resourcesToImport[\"clientRoles\"]) {\n      jsonToImport.roles = targetRealm.roles;\n      if (!resourcesToImport[\"realmRoles\"]) delete jsonToImport.roles?.realm;\n      if (!resourcesToImport[\"clientRoles\"]) delete jsonToImport.roles?.client;\n    }\n    return jsonToImport;\n  };\n\n  async function doImport() {\n    if (importInProgress) return;\n\n    setImportInProgress(true);\n\n    try {\n      const importResults = await adminClient.realms.partialImport({\n        realm,\n        rep: jsonForImport(),\n      });\n      setImportResponse(importResults);\n    } catch (error) {\n      addError(\"importFail\", error);\n    }\n\n    setImportInProgress(false);\n  }\n\n  const importModal = () => {\n    return (\n      <Modal\n        variant={ModalVariant.medium}\n        title={t(\"partialImport\")}\n        isOpen={props.open}\n        onClose={props.toggleDialog}\n        actions={[\n          <Button\n            id=\"modal-import\"\n            data-testid=\"import-button\"\n            key=\"import\"\n            isDisabled={!isAnyResourceChecked}\n            onClick={() => {\n              doImport();\n            }}\n          >\n            {t(\"import\")}\n          </Button>,\n          <Button\n            id=\"modal-cancel\"\n            data-testid=\"cancel-button\"\n            key=\"cancel\"\n            variant={ButtonVariant.link}\n            onClick={() => {\n              props.toggleDialog();\n            }}\n          >\n            {t(\"cancel\")}\n          </Button>,\n        ]}\n      >\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <Text>{t(\"partialImportHeaderText\")}</Text>\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <JsonFileUpload\n              id=\"partial-import-file\"\n              allowEditingUploadedText\n              onChange={handleFileChange}\n            />\n          </StackItem>\n\n          {isFileSelected && targetHasResources() && (\n            <>\n              <StackItem>\n                <Divider />\n              </StackItem>\n              {Array.isArray(importedFile) && importedFile.length > 1 && (\n                <StackItem>\n                  <Text>{t(\"selectRealm\")}:</Text>\n                  <KeycloakSelect\n                    toggleId=\"realm-selector\"\n                    isOpen={isRealmSelectOpen}\n                    typeAheadAriaLabel={t(\"realmSelector\")}\n                    aria-label={t(\"realmSelector\")}\n                    onToggle={() => setIsRealmSelectOpen(!isRealmSelectOpen)}\n                    selections={targetRealm.id}\n                    onSelect={(value) => handleRealmSelect(value)}\n                    placeholderText={targetRealm.realm || targetRealm.id}\n                  >\n                    {realmSelectOptions(importedFile)}\n                  </KeycloakSelect>\n                </StackItem>\n              )}\n              <StackItem>\n                <Text>{t(\"chooseResources\")}:</Text>\n                <DataList aria-label={t(\"resourcesToImport\")} isCompact>\n                  {targetHasResource(\"users\") &&\n                    resourceDataListItem(\"users\", t(\"users\"))}\n                  {targetHasResource(\"groups\") &&\n                    resourceDataListItem(\"groups\", t(\"groups\"))}\n                  {targetHasResource(\"clients\") &&\n                    resourceDataListItem(\"clients\", t(\"clients\"))}\n                  {targetHasResource(\"identityProviders\") &&\n                    resourceDataListItem(\n                      \"identityProviders\",\n                      t(\"identityProviders\"),\n                    )}\n                  {targetHasRealmRoles() &&\n                    resourceDataListItem(\"realmRoles\", t(\"realmRoles\"))}\n                  {targetHasClientRoles() &&\n                    resourceDataListItem(\"clientRoles\", t(\"clientRoles\"))}\n                </DataList>\n              </StackItem>\n              <StackItem>\n                <Text>{t(\"selectIfResourceExists\")}:</Text>\n                <KeycloakSelect\n                  isOpen={isCollisionSelectOpen}\n                  direction=\"up\"\n                  onToggle={() => {\n                    setIsCollisionSelectOpen(!isCollisionSelectOpen);\n                  }}\n                  selections={collisionOption}\n                  onSelect={handleCollisionSelect}\n                  placeholderText={t(collisionOption)}\n                >\n                  {collisionOptions()}\n                </KeycloakSelect>\n              </StackItem>\n            </>\n          )}\n        </Stack>\n      </Modal>\n    );\n  };\n\n  const importCompleteMessage = () => {\n    return `${t(\"importAdded\", {\n      count: importResponse?.added,\n    })}  ${t(\"importSkipped\", {\n      count: importResponse?.skipped,\n    })} ${t(\"importOverwritten\", {\n      count: importResponse?.overwritten,\n    })}`;\n  };\n\n  const loader = async (first = 0, max = 15) => {\n    if (!importResponse) {\n      return [];\n    }\n\n    const last = Math.min(first + max, importResponse.results.length);\n\n    return importResponse.results.slice(first, last);\n  };\n\n  const ActionLabel = (importRecord: PartialImportResult) => {\n    switch (importRecord.action) {\n      case \"ADDED\":\n        return (\n          <Label key={importRecord.id} color=\"green\">\n            {t(\"added\")}\n          </Label>\n        );\n      case \"SKIPPED\":\n        return (\n          <Label key={importRecord.id} color=\"orange\">\n            {t(\"skipped\")}\n          </Label>\n        );\n      case \"OVERWRITTEN\":\n        return (\n          <Label key={importRecord.id} color=\"purple\">\n            {t(\"overwritten\")}\n          </Label>\n        );\n      default:\n        return \"\";\n    }\n  };\n\n  const TypeRenderer = (importRecord: PartialImportResult) => {\n    const typeMap = new Map([\n      [\"CLIENT\", t(\"clients\")],\n      [\"REALM_ROLE\", t(\"realmRoles\")],\n      [\"USER\", t(\"users\")],\n      [\"CLIENT_ROLE\", t(\"clientRoles\")],\n      [\"IDP\", t(\"identityProviders\")],\n      [\"GROUP\", t(\"groups\")],\n    ]);\n\n    return <span>{typeMap.get(importRecord.resourceType)}</span>;\n  };\n\n  const importCompletedModal = () => {\n    return (\n      <Modal\n        variant={ModalVariant.medium}\n        title={t(\"partialImport\")}\n        isOpen={props.open}\n        onClose={props.toggleDialog}\n        actions={[\n          <Button\n            id=\"modal-close\"\n            data-testid=\"close-button\"\n            key=\"close\"\n            variant={ButtonVariant.primary}\n            onClick={() => {\n              props.toggleDialog();\n            }}\n          >\n            {t(\"close\")}\n          </Button>,\n        ]}\n      >\n        <Alert\n          variant=\"success\"\n          component=\"p\"\n          isInline\n          title={importCompleteMessage()}\n        />\n        <KeycloakDataTable\n          loader={loader}\n          isPaginated\n          ariaLabelKey=\"partialImport\"\n          columns={[\n            {\n              name: \"action\",\n              displayKey: \"action\",\n              cellRenderer: ActionLabel,\n            },\n            {\n              name: \"resourceType\",\n              displayKey: \"type\",\n              cellRenderer: TypeRenderer,\n            },\n            {\n              name: \"resourceName\",\n              displayKey: \"name\",\n            },\n            {\n              name: \"id\",\n              displayKey: \"id\",\n            },\n          ]}\n        />\n      </Modal>\n    );\n  };\n\n  if (!importResponse) {\n    return importModal();\n  }\n\n  return importCompletedModal();\n};\n","import type ClientPolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientPolicyRepresentation\";\nimport {\n  Action,\n  KeycloakDataTable,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  Flex,\n  FlexItem,\n  PageSection,\n  Radio,\n  Switch,\n  Title,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { omit } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, useForm, type UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { prettyPrintJSON } from \"../util\";\nimport { translationFormatter } from \"../utils/translationFormatter\";\nimport { toAddClientPolicy } from \"./routes/AddClientPolicy\";\nimport { toClientPolicies } from \"./routes/ClientPolicies\";\nimport { toEditClientPolicy } from \"./routes/EditClientPolicy\";\n\nimport \"./realm-settings-section.css\";\n\ntype ClientPolicy = ClientPolicyRepresentation & {\n  global?: boolean;\n};\n\nexport const PoliciesTab = () => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n  const [show, setShow] = useState(false);\n  const [policies, setPolicies] = useState<ClientPolicy[]>();\n  const [selectedPolicy, setSelectedPolicy] = useState<ClientPolicy>();\n  const [key, setKey] = useState(0);\n  const [code, setCode] = useState<string>();\n  const [tablePolicies, setTablePolicies] = useState<ClientPolicy[]>();\n  const refresh = () => setKey(key + 1);\n\n  const form = useForm<Record<string, boolean>>({ mode: \"onChange\" });\n\n  useFetch(\n    () =>\n      adminClient.clientPolicies.listPolicies({\n        includeGlobalPolicies: true,\n      }),\n    (allPolicies) => {\n      const globalPolicies = allPolicies.globalPolicies?.map(\n        (globalPolicies) => ({\n          ...globalPolicies,\n          global: true,\n        }),\n      );\n\n      const policies = allPolicies.policies?.map((policies) => ({\n        ...policies,\n        global: false,\n      }));\n\n      const allClientPolicies = globalPolicies?.concat(policies ?? []);\n\n      setPolicies(allClientPolicies);\n      setTablePolicies(allClientPolicies || []);\n      setCode(prettyPrintJSON(allClientPolicies));\n    },\n    [key],\n  );\n\n  const loader = async () => policies ?? [];\n\n  const saveStatus = async () => {\n    const switchValues = form.getValues();\n\n    const updatedPolicies = policies\n      ?.filter((policy) => {\n        return !policy.global;\n      })\n      .map<ClientPolicyRepresentation>((policy) => {\n        const enabled = switchValues[policy.name!];\n        const enabledPolicy = {\n          ...policy,\n          enabled,\n        };\n        delete enabledPolicy.global;\n        return enabledPolicy;\n      });\n\n    try {\n      await adminClient.clientPolicies.updatePolicy({\n        policies: updatedPolicies,\n      });\n      navigate(toClientPolicies({ realm, tab: \"policies\" }));\n      addAlert(t(\"updateClientPolicySuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateClientPolicyError\", error);\n    }\n  };\n\n  const normalizePolicy = (policy: ClientPolicy): ClientPolicyRepresentation =>\n    omit(policy, \"global\");\n\n  const save = async () => {\n    if (!code) {\n      return;\n    }\n\n    try {\n      const obj: ClientPolicy[] = JSON.parse(code);\n\n      const changedPolicies = obj\n        .filter((policy) => !policy.global)\n        .map((policy) => normalizePolicy(policy));\n\n      const changedGlobalPolicies = obj\n        .filter((policy) => policy.global)\n        .map((policy) => normalizePolicy(policy));\n\n      try {\n        await adminClient.clientPolicies.updatePolicy({\n          policies: changedPolicies,\n          globalPolicies: changedGlobalPolicies,\n        });\n        addAlert(t(\"updateClientPoliciesSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"updateClientPoliciesError\", error);\n      }\n    } catch (error) {\n      console.warn(\"Invalid json, ignoring value using {}\");\n      addError(\"invalidJsonClientPoliciesError\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientPolicyConfirmTitle\"),\n    messageKey: t(\"deleteClientPolicyConfirm\", {\n      policyName: selectedPolicy?.name,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedPolicies = policies\n        ?.filter((policy) => {\n          return !policy.global && policy.name !== selectedPolicy?.name;\n        })\n        .map<ClientPolicyRepresentation>((policy) => {\n          const newPolicy = { ...policy };\n          delete newPolicy.global;\n          return newPolicy;\n        });\n\n      try {\n        await adminClient.clientPolicies.updatePolicy({\n          policies: updatedPolicies,\n        });\n        addAlert(t(\"deleteClientPolicySuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"deleteClientPolicyError\", error);\n      }\n    },\n  });\n\n  if (!policies) {\n    return <KeycloakSpinner />;\n  }\n  return (\n    <>\n      <DeleteConfirm />\n      <PageSection>\n        <Flex className=\"kc-policies-config-section\">\n          <FlexItem>\n            <Title headingLevel=\"h1\" size=\"md\">\n              {t(\"policiesConfigType\")}\n            </Title>\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={!show}\n              name=\"policiesView\"\n              onChange={() => setShow(false)}\n              label={t(\"policiesConfigTypes.formView\")}\n              id=\"formView-policiesView\"\n              data-testid=\"formView-policiesView\"\n              className=\"kc-form-radio-btn pf-v5-u-mr-sm pf-v5-u-ml-sm\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={show}\n              name=\"policiesView\"\n              onChange={() => setShow(true)}\n              label={t(\"policiesConfigTypes.jsonEditor\")}\n              id=\"jsonEditor-policiesView\"\n              data-testid=\"jsonEditor-policiesView\"\n              className=\"kc-editor-radio-btn\"\n            />\n          </FlexItem>\n        </Flex>\n      </PageSection>\n      <Divider />\n      {!show ? (\n        <KeycloakDataTable\n          key={policies.length}\n          emptyState={\n            <ListEmptyState\n              message={t(\"noClientPolicies\")}\n              instructions={t(\"noClientPoliciesInstructions\")}\n              primaryActionText={t(\"createClientPolicy\")}\n              onPrimaryAction={() => navigate(toAddClientPolicy({ realm }))}\n            />\n          }\n          ariaLabelKey=\"clientPolicies\"\n          searchPlaceholderKey=\"clientPolicySearch\"\n          loader={loader}\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                id=\"createPolicy\"\n                component={(props) => (\n                  <Link {...props} to={toAddClientPolicy({ realm })} />\n                )}\n                data-testid=\"createPolicy\"\n              >\n                {t(\"createClientPolicy\")}\n              </Button>\n            </ToolbarItem>\n          }\n          isRowDisabled={(value) => !!value.global}\n          actions={[\n            {\n              title: t(\"delete\"),\n              onRowClick: (item) => {\n                toggleDeleteDialog();\n                setSelectedPolicy(item);\n              },\n            } as Action<ClientPolicy>,\n          ]}\n          columns={[\n            {\n              name: \"name\",\n              cellRenderer: ({ name }: ClientPolicyRepresentation) => (\n                <Link to={toEditClientPolicy({ realm, policyName: name! })}>\n                  {name}\n                </Link>\n              ),\n            },\n            {\n              name: \"enabled\",\n              displayKey: \"status\",\n              cellRenderer: (clientPolicy) => (\n                <SwitchRenderer\n                  clientPolicy={clientPolicy}\n                  form={form}\n                  saveStatus={saveStatus}\n                  onConfirm={() => {\n                    form.setValue(clientPolicy.name!, false);\n                    saveStatus();\n                  }}\n                />\n              ),\n            },\n            {\n              name: \"description\",\n              cellFormatters: [translationFormatter(t)],\n            },\n          ]}\n        />\n      ) : (\n        <>\n          <div className=\"pf-v5-u-mt-md pf-v5-u-ml-lg\">\n            <CodeEditor\n              isLineNumbersVisible\n              isLanguageLabelVisible\n              isReadOnly={false}\n              code={code}\n              language={Language.json}\n              height=\"30rem\"\n              onChange={setCode}\n            />\n          </div>\n          <div className=\"pf-v5-u-mt-md\">\n            <Button\n              variant={ButtonVariant.primary}\n              className=\"pf-v5-u-mr-md pf-v5-u-ml-lg\"\n              data-testid=\"jsonEditor-policies-saveBtn\"\n              onClick={save}\n            >\n              {t(\"save\")}\n            </Button>\n            <Button\n              variant={ButtonVariant.link}\n              data-testid=\"jsonEditor-reloadBtn\"\n              onClick={() => {\n                setCode(prettyPrintJSON(tablePolicies));\n              }}\n            >\n              {t(\"reload\")}\n            </Button>\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\ntype SwitchRendererProps = {\n  clientPolicy: ClientPolicy;\n  form: UseFormReturn<Record<string, boolean>>;\n  saveStatus: () => void;\n  onConfirm: () => void;\n};\n\nconst SwitchRenderer = ({\n  clientPolicy,\n  form,\n  saveStatus,\n  onConfirm,\n}: SwitchRendererProps) => {\n  const { t } = useTranslation();\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"disablePolicyConfirmTitle\",\n    messageKey: \"disablePolicyConfirm\",\n    continueButtonLabel: \"disable\",\n    onConfirm,\n  });\n\n  return (\n    <>\n      <DisableConfirm />\n      <Controller\n        name={clientPolicy.name!}\n        data-testid={`${clientPolicy.name!}-switch`}\n        defaultValue={clientPolicy.enabled}\n        control={form.control}\n        render={({ field }) => (\n          <Switch\n            label={t(\"enabled\")}\n            labelOff={t(\"disabled\")}\n            isChecked={field.value}\n            isDisabled={clientPolicy.global}\n            onChange={(_event, value) => {\n              if (!value) {\n                toggleDisableDialog();\n              } else {\n                field.onChange(value);\n                saveStatus();\n              }\n            }}\n            aria-label={clientPolicy.name!}\n          />\n        )}\n      />\n    </>\n  );\n};\n","import type ClientProfileRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfileRepresentation\";\nimport {\n  Action,\n  KeycloakDataTable,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  Flex,\n  FlexItem,\n  FormGroup,\n  Label,\n  PageSection,\n  Radio,\n  Title,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { omit } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { prettyPrintJSON } from \"../util\";\nimport { toAddClientProfile } from \"./routes/AddClientProfile\";\nimport { toClientProfile } from \"./routes/ClientProfile\";\n\nimport \"./realm-settings-section.css\";\n\ntype ClientProfile = ClientProfileRepresentation & {\n  global: boolean;\n};\n\nexport default function ProfilesTab() {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const [tableProfiles, setTableProfiles] = useState<ClientProfile[]>();\n  const [globalProfiles, setGlobalProfiles] =\n    useState<ClientProfileRepresentation[]>();\n  const [selectedProfile, setSelectedProfile] = useState<ClientProfile>();\n  const [show, setShow] = useState(false);\n  const [code, setCode] = useState<string>();\n  const [key, setKey] = useState(0);\n\n  useFetch(\n    () =>\n      adminClient.clientPolicies.listProfiles({\n        includeGlobalProfiles: true,\n      }),\n    (allProfiles) => {\n      setGlobalProfiles(allProfiles.globalProfiles);\n\n      const globalProfiles = allProfiles.globalProfiles?.map(\n        (globalProfiles) => ({\n          ...globalProfiles,\n          global: true,\n        }),\n      );\n\n      const profiles = allProfiles.profiles?.map((profiles) => ({\n        ...profiles,\n        global: false,\n      }));\n\n      const allClientProfiles = globalProfiles?.concat(profiles ?? []);\n      setTableProfiles(allClientProfiles || []);\n      setCode(JSON.stringify(allClientProfiles, null, 2));\n    },\n    [key],\n  );\n\n  const loader = async () => tableProfiles ?? [];\n\n  const normalizeProfile = (\n    profile: ClientProfile,\n  ): ClientProfileRepresentation => omit(profile, \"global\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientProfileConfirmTitle\"),\n    messageKey: t(\"deleteClientProfileConfirm\", {\n      profileName: selectedProfile?.name,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedProfiles = tableProfiles\n        ?.filter(\n          (profile) =>\n            profile.name !== selectedProfile?.name && !profile.global,\n        )\n        .map<ClientProfileRepresentation>((profile) =>\n          normalizeProfile(profile),\n        );\n\n      try {\n        await adminClient.clientPolicies.createProfiles({\n          profiles: updatedProfiles,\n          globalProfiles,\n        });\n        addAlert(t(\"deleteClientSuccess\"), AlertVariant.success);\n        setKey(key + 1);\n      } catch (error) {\n        addError(\"deleteClientError\", error);\n      }\n    },\n  });\n\n  const cellFormatter = (row: ClientProfile) => (\n    <Link\n      to={toClientProfile({\n        realm,\n        profileName: row.name!,\n      })}\n      key={row.name}\n    >\n      {row.name} {row.global && <Label color=\"blue\">{t(\"global\")}</Label>}\n    </Link>\n  );\n\n  if (!tableProfiles) {\n    return <KeycloakSpinner />;\n  }\n\n  const save = async () => {\n    if (!code) {\n      return;\n    }\n\n    try {\n      const obj: ClientProfile[] = JSON.parse(code);\n      const changedProfiles = obj\n        .filter((profile) => !profile.global)\n        .map((profile) => normalizeProfile(profile));\n\n      const changedGlobalProfiles = obj\n        .filter((profile) => profile.global)\n        .map((profile) => normalizeProfile(profile));\n\n      try {\n        await adminClient.clientPolicies.createProfiles({\n          profiles: changedProfiles,\n          globalProfiles: changedGlobalProfiles,\n        });\n        addAlert(t(\"updateClientProfilesSuccess\"), AlertVariant.success);\n        setKey(key + 1);\n      } catch (error) {\n        addError(\"updateClientProfilesError\", error);\n      }\n    } catch (error) {\n      addError(\"invalidJsonClientProfilesError\", error);\n    }\n  };\n\n  return (\n    <>\n      <DeleteConfirm />\n      <PageSection>\n        <Flex className=\"kc-profiles-config-section\">\n          <FlexItem>\n            <Title headingLevel=\"h1\" size=\"md\">\n              {t(\"profilesConfigType\")}\n            </Title>\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={!show}\n              name=\"profilesView\"\n              onChange={() => setShow(false)}\n              label={t(\"profilesConfigTypes.formView\")}\n              id=\"formView-profilesView\"\n              className=\"kc-form-radio-btn pf-v5-u-mr-sm pf-v5-u-ml-sm\"\n              data-testid=\"formView-profilesView\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={show}\n              name=\"profilesView\"\n              onChange={() => setShow(true)}\n              label={t(\"profilesConfigTypes.jsonEditor\")}\n              id=\"jsonEditor-profilesView\"\n              className=\"kc-editor-radio-btn\"\n              data-testid=\"jsonEditor-profilesView\"\n            />\n          </FlexItem>\n        </Flex>\n      </PageSection>\n      <Divider />\n      {!show ? (\n        <KeycloakDataTable\n          key={tableProfiles.length}\n          ariaLabelKey=\"profiles\"\n          searchPlaceholderKey=\"clientProfileSearch\"\n          loader={loader}\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                id=\"createProfile\"\n                component={(props) => (\n                  <Link\n                    {...props}\n                    to={toAddClientProfile({ realm, tab: \"profiles\" })}\n                  />\n                )}\n                data-testid=\"createProfile\"\n              >\n                {t(\"createClientProfile\")}\n              </Button>\n            </ToolbarItem>\n          }\n          isRowDisabled={(value) => value.global}\n          actions={[\n            {\n              title: t(\"delete\"),\n              onRowClick: (profile) => {\n                setSelectedProfile(profile);\n                toggleDeleteDialog();\n              },\n            } as Action<ClientProfile>,\n          ]}\n          columns={[\n            {\n              name: \"name\",\n              displayKey: t(\"name\"),\n              cellRenderer: cellFormatter,\n            },\n            {\n              name: \"description\",\n              displayKey: t(\"clientProfileDescription\"),\n            },\n          ]}\n          emptyState={\n            <ListEmptyState\n              message={t(\"emptyClientProfiles\")}\n              instructions={t(\"emptyClientProfilesInstructions\")}\n            />\n          }\n        />\n      ) : (\n        <FormGroup fieldId={\"jsonEditor\"}>\n          <div className=\"pf-v5-u-mt-md pf-v5-u-ml-lg\">\n            <CodeEditor\n              isLineNumbersVisible\n              isLanguageLabelVisible\n              isReadOnly={false}\n              code={code}\n              language={Language.json}\n              height=\"30rem\"\n              onChange={(value) => {\n                setCode(value ?? \"\");\n              }}\n            />\n          </div>\n          <ActionGroup>\n            <div className=\"pf-v5-u-mt-md\">\n              <Button\n                variant={ButtonVariant.primary}\n                className=\"pf-v5-u-mr-md pf-v5-u-ml-lg\"\n                onClick={save}\n                data-testid=\"jsonEditor-saveBtn\"\n              >\n                {t(\"save\")}\n              </Button>\n              <Button\n                variant={ButtonVariant.link}\n                onClick={() => {\n                  setCode(prettyPrintJSON(tableProfiles));\n                }}\n                data-testid=\"jsonEditor-reloadBtn\"\n              >\n                {t(\"reload\")}\n              </Button>\n            </div>\n          </ActionGroup>\n        </FormGroup>\n      )}\n    </>\n  );\n}\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  PageSection,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormPanel, HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { TimeSelector } from \"../components/time-selector/TimeSelector\";\nimport { convertToFormValues } from \"../util\";\n\nimport \"./realm-settings-section.css\";\n\ntype RealmSettingsSessionsTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const RealmSettingsSessionsTab = ({\n  realm,\n  save,\n}: RealmSettingsSessionsTabProps) => {\n  const { t } = useTranslation();\n\n  const { setValue, control, handleSubmit, formState } =\n    useForm<RealmRepresentation>();\n\n  const offlineSessionMaxEnabled = useWatch({\n    control,\n    name: \"offlineSessionMaxLifespanEnabled\",\n  });\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n  };\n\n  useEffect(setupForm, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel\n        title={t(\"SSOSessionSettings\")}\n        className=\"kc-sso-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"SSOSessionIdle\")}\n            fieldId=\"SSOSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"ssoSessionIdle\")}\n                fieldLabelId=\"SSOSessionIdle\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionIdleTimeout\"\n              defaultValue={realm.ssoSessionIdleTimeout}\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-idle\"\n                  data-testid=\"sso-session-idle-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"SSOSessionMax\")}\n            fieldId=\"SSOSessionMax\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"ssoSessionMax\")}\n                fieldLabelId=\"SSOSessionMax\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionMaxLifespan\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-max\"\n                  data-testid=\"sso-session-max-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"SSOSessionIdleRememberMe\")}\n            fieldId=\"SSOSessionIdleRememberMe\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"ssoSessionIdleRememberMe\")}\n                fieldLabelId=\"SSOSessionIdleRememberMe\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionIdleTimeoutRememberMe\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-idle-remember-me\"\n                  data-testid=\"sso-session-idle-remember-me-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"SSOSessionMaxRememberMe\")}\n            fieldId=\"SSOSessionMaxRememberMe\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"ssoSessionMaxRememberMe\")}\n                fieldLabelId=\"SSOSessionMaxRememberMe\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionMaxLifespanRememberMe\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-max-remember-me\"\n                  data-testid=\"sso-session-max-remember-me-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"clientSessionSettings\")}\n        className=\"kc-client-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-v5-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"clientSessionIdle\")}\n            fieldId=\"clientSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clientSessionIdleHelp\")}\n                fieldLabelId=\"clientSessionIdle\"\n              />\n            }\n          >\n            <Controller\n              name=\"clientSessionIdleTimeout\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-client-session-idle\"\n                  data-testid=\"client-session-idle-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"clientSessionMax\")}\n            fieldId=\"clientSessionMax\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clientSessionMaxHelp\")}\n                fieldLabelId=\"clientSessionMax\"\n              />\n            }\n          >\n            <Controller\n              name=\"clientSessionMaxLifespan\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-client-session-max\"\n                  data-testid=\"client-session-max-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"offlineSessionSettings\")}\n        className=\"kc-offline-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-v5-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"offlineSessionIdle\")}\n            fieldId=\"offlineSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"offlineSessionIdleHelp\")}\n                fieldLabelId=\"offlineSessionIdle\"\n              />\n            }\n          >\n            <Controller\n              name=\"offlineSessionIdleTimeout\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-offline-session-idle\"\n                  data-testid=\"offline-session-idle-input\"\n                  aria-label=\"offline-session-idle-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"offlineSessionMaxLimited\")}\n            fieldId=\"kc-offlineSessionMaxLimited\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"offlineSessionMaxLimitedHelp\")}\n                fieldLabelId=\"offlineSessionMaxLimited\"\n              />\n            }\n          >\n            <Controller\n              name=\"offlineSessionMaxLifespanEnabled\"\n              control={control}\n              defaultValue={false}\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-offline-session-max\"\n                  data-testid=\"offline-session-max-switch\"\n                  aria-label={t(\"offlineSessionMaxLimited\")}\n                  label={t(\"enabled\")}\n                  labelOff={t(\"disabled\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                />\n              )}\n            />\n          </FormGroup>\n          {offlineSessionMaxEnabled && (\n            <FormGroup\n              label={t(\"offlineSessionMax\")}\n              fieldId=\"offlineSessionMax\"\n              id=\"offline-session-max-label\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"offlineSessionMaxHelp\")}\n                  fieldLabelId=\"offlineSessionMax\"\n                />\n              }\n            >\n              <Controller\n                name=\"offlineSessionMaxLifespan\"\n                control={control}\n                render={({ field }) => (\n                  <TimeSelector\n                    className=\"kc-offline-session-max\"\n                    data-testid=\"offline-session-max-input\"\n                    value={field.value!}\n                    onChange={field.onChange}\n                    units={[\"minute\", \"hour\", \"day\"]}\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-login-settings-template\"\n        title={t(\"loginSettings\")}\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-v5-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"loginTimeout\")}\n            id=\"kc-login-timeout-label\"\n            fieldId=\"offlineSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"loginTimeoutHelp\")}\n                fieldLabelId=\"loginTimeout\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessCodeLifespanLogin\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-login-timeout\"\n                  data-testid=\"login-timeout-input\"\n                  aria-label=\"login-timeout-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"loginActionTimeout\")}\n            fieldId=\"loginActionTimeout\"\n            id=\"login-action-timeout-label\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"loginActionTimeoutHelp\")}\n                fieldLabelId=\"loginActionTimeout\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessCodeLifespanUserAction\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-login-action-timeout\"\n                  data-testid=\"login-action-timeout-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"sessions-tab-save\"\n              isDisabled={!formState.isDirty}\n            >\n              {t(\"save\")}\n            </Button>\n            <Button variant=\"link\" onClick={setupForm}>\n              {t(\"revert\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  HelpItem,\n  KeycloakSelect,\n  SelectVariant,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  PageSection,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { convertToFormValues } from \"../util\";\n\ntype RealmSettingsThemesTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const RealmSettingsThemesTab = ({\n  realm,\n  save,\n}: RealmSettingsThemesTabProps) => {\n  const { t } = useTranslation();\n\n  const [loginThemeOpen, setLoginThemeOpen] = useState(false);\n  const [accountThemeOpen, setAccountThemeOpen] = useState(false);\n  const [adminUIThemeOpen, setAdminUIThemeOpen] = useState(false);\n  const [emailThemeOpen, setEmailThemeOpen] = useState(false);\n\n  const { control, handleSubmit, setValue } = useForm<RealmRepresentation>();\n  const themeTypes = useServerInfo().themes!;\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n  };\n  useEffect(setupForm, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        isHorizontal\n        role=\"manage-realm\"\n        className=\"pf-v5-u-mt-lg\"\n        onSubmit={handleSubmit(save)}\n      >\n        <FormGroup\n          label={t(\"loginTheme\")}\n          fieldId=\"kc-login-theme\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"loginThemeHelp\")}\n              fieldLabelId=\"loginTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"loginTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <KeycloakSelect\n                toggleId=\"kc-login-theme\"\n                onToggle={() => setLoginThemeOpen(!loginThemeOpen)}\n                onSelect={(value) => {\n                  field.onChange(value as string);\n                  setLoginThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={loginThemeOpen}\n                placeholderText={t(\"selectATheme\")}\n                data-testid=\"select-login-theme\"\n                aria-label={t(\"selectLoginTheme\")}\n              >\n                {themeTypes.login.map((theme, idx) => (\n                  <SelectOption\n                    selected={theme.name === field.value}\n                    key={`login-theme-${idx}`}\n                    value={theme.name}\n                  >\n                    {theme.name}\n                  </SelectOption>\n                ))}\n              </KeycloakSelect>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"accountTheme\")}\n          fieldId=\"kc-account-theme\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"accountThemeHelp\")}\n              fieldLabelId=\"accountTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"accountTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <KeycloakSelect\n                toggleId=\"kc-account-theme\"\n                onToggle={() => setAccountThemeOpen(!accountThemeOpen)}\n                onSelect={(value) => {\n                  field.onChange(value as string);\n                  setAccountThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"selectAccountTheme\")}\n                isOpen={accountThemeOpen}\n                placeholderText={t(\"selectATheme\")}\n                data-testid=\"select-account-theme\"\n              >\n                {themeTypes.account\n                  .filter((theme) => theme.name !== \"base\")\n                  .map((theme, idx) => (\n                    <SelectOption\n                      selected={theme.name === field.value}\n                      key={`account-theme-${idx}`}\n                      value={theme.name}\n                    >\n                      {t(theme.name)}\n                    </SelectOption>\n                  ))}\n              </KeycloakSelect>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"adminTheme\")}\n          fieldId=\"kc-admin-ui-theme\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"adminThemeHelp\")}\n              fieldLabelId=\"adminTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"adminTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <KeycloakSelect\n                toggleId=\"kc-admin-ui-theme\"\n                onToggle={() => setAdminUIThemeOpen(!adminUIThemeOpen)}\n                onSelect={(value) => {\n                  field.onChange(value as string);\n                  setAdminUIThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={adminUIThemeOpen}\n                placeholderText={t(\"selectATheme\")}\n                data-testid=\"select-admin-theme\"\n                aria-label={t(\"selectAdminTheme\")}\n              >\n                {themeTypes.admin\n                  .filter((theme) => theme.name !== \"base\")\n                  .map((theme, idx) => (\n                    <SelectOption\n                      selected={theme.name === field.value}\n                      key={`admin-theme-${idx}`}\n                      value={theme.name}\n                    >\n                      {t(theme.name)}\n                    </SelectOption>\n                  ))}\n              </KeycloakSelect>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"emailTheme\")}\n          fieldId=\"kc-email-theme\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"emailThemeHelp\")}\n              fieldLabelId=\"emailTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"emailTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <KeycloakSelect\n                toggleId=\"kc-email-theme\"\n                onToggle={() => setEmailThemeOpen(!emailThemeOpen)}\n                onSelect={(value) => {\n                  field.onChange(value as string);\n                  setEmailThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={emailThemeOpen}\n                placeholderText={t(\"selectATheme\")}\n                data-testid=\"select-email-theme\"\n                aria-label={t(\"selectEmailTheme\")}\n              >\n                {themeTypes.email.map((theme, idx) => (\n                  <SelectOption\n                    selected={theme.name === field.value}\n                    key={`email-theme-${idx}`}\n                    value={theme.name}\n                  >\n                    {t(theme.name)}\n                  </SelectOption>\n                ))}\n              </KeycloakSelect>\n            )}\n          />\n        </FormGroup>\n        <ActionGroup>\n          <Button variant=\"primary\" type=\"submit\" data-testid=\"themes-tab-save\">\n            {t(\"save\")}\n          </Button>\n          <Button variant=\"link\" onClick={setupForm}>\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  FormPanel,\n  HelpItem,\n  KeycloakSelect,\n  SelectVariant,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  NumberInput,\n  PageSection,\n  SelectOption,\n  Switch,\n  Text,\n  TextInput,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport {\n  TimeSelector,\n  toHumanFormat,\n} from \"../components/time-selector/TimeSelector\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useWhoAmI } from \"../context/whoami/WhoAmI\";\nimport { beerify, convertToFormValues, sortProviders } from \"../util\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\n\nimport \"./realm-settings-section.css\";\n\ntype RealmSettingsSessionsTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n  reset?: () => void;\n};\n\nexport const RealmSettingsTokensTab = ({\n  realm,\n  reset,\n  save,\n}: RealmSettingsSessionsTabProps) => {\n  const { t } = useTranslation();\n  const serverInfo = useServerInfo();\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const { whoAmI } = useWhoAmI();\n\n  const [defaultSigAlgDrpdwnIsOpen, setDefaultSigAlgDrpdwnOpen] =\n    useState(false);\n\n  const defaultSigAlgOptions = sortProviders(\n    serverInfo.providers![\"signature\"].providers,\n  );\n\n  const form = useForm<RealmRepresentation>();\n  const { setValue, control } = form;\n\n  const offlineSessionMaxEnabled = useWatch({\n    control,\n    name: \"offlineSessionMaxLifespanEnabled\",\n    defaultValue: realm.offlineSessionMaxLifespanEnabled,\n  });\n\n  const ssoSessionIdleTimeout = useWatch({\n    control,\n    name: \"ssoSessionIdleTimeout\",\n    defaultValue: 36000,\n  });\n\n  const revokeRefreshToken = useWatch({\n    control,\n    name: \"revokeRefreshToken\",\n    defaultValue: false,\n  });\n\n  useEffect(() => {\n    convertToFormValues(realm, setValue);\n  }, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel title={t(\"general\")} className=\"kc-sso-session-template\">\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"defaultSigAlg\")}\n            fieldId=\"kc-default-signature-algorithm\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"defaultSigAlgHelp\")}\n                fieldLabelId=\"algorithm\"\n              />\n            }\n          >\n            <Controller\n              name=\"defaultSignatureAlgorithm\"\n              defaultValue={\"RS256\"}\n              control={form.control}\n              render={({ field }) => (\n                <KeycloakSelect\n                  toggleId=\"kc-default-sig-alg\"\n                  onToggle={() =>\n                    setDefaultSigAlgDrpdwnOpen(!defaultSigAlgDrpdwnIsOpen)\n                  }\n                  onSelect={(value) => {\n                    field.onChange(value.toString());\n                    setDefaultSigAlgDrpdwnOpen(false);\n                  }}\n                  selections={field.value?.toString()}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"defaultSigAlg\")}\n                  isOpen={defaultSigAlgDrpdwnIsOpen}\n                  data-testid=\"select-default-sig-alg\"\n                >\n                  {defaultSigAlgOptions!.map((p, idx) => (\n                    <SelectOption\n                      selected={p === field.value}\n                      key={`default-sig-alg-${idx}`}\n                      value={p}\n                    >\n                      {p}\n                    </SelectOption>\n                  ))}\n                </KeycloakSelect>\n              )}\n            />\n          </FormGroup>\n\n          {isFeatureEnabled(Feature.DeviceFlow) && (\n            <>\n              <FormGroup\n                label={t(\"oAuthDeviceCodeLifespan\")}\n                fieldId=\"oAuthDeviceCodeLifespan\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"oAuthDeviceCodeLifespanHelp\")}\n                    fieldLabelId=\"oAuthDeviceCodeLifespan\"\n                  />\n                }\n              >\n                <Controller\n                  name=\"oauth2DeviceCodeLifespan\"\n                  defaultValue={0}\n                  control={form.control}\n                  render={({ field }) => (\n                    <TimeSelector\n                      id=\"oAuthDeviceCodeLifespan\"\n                      data-testid=\"oAuthDeviceCodeLifespan\"\n                      value={field.value || 0}\n                      onChange={field.onChange}\n                      units={[\"minute\", \"hour\", \"day\"]}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"oAuthDevicePollingInterval\")}\n                fieldId=\"oAuthDevicePollingInterval\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"oAuthDevicePollingIntervalHelp\")}\n                    fieldLabelId=\"oAuthDevicePollingInterval\"\n                  />\n                }\n              >\n                <Controller\n                  name=\"oauth2DevicePollingInterval\"\n                  defaultValue={0}\n                  control={form.control}\n                  render={({ field }) => (\n                    <NumberInput\n                      id=\"oAuthDevicePollingInterval\"\n                      value={field.value}\n                      min={0}\n                      onPlus={() => field.onChange(Number(field?.value) + 1)}\n                      onMinus={() =>\n                        field.onChange(\n                          Number(field?.value) > 0\n                            ? Number(field?.value) - 1\n                            : 0,\n                        )\n                      }\n                      onChange={(event) => {\n                        const newValue = Number(event.currentTarget.value);\n                        field.onChange(!isNaN(newValue) ? newValue : 0);\n                      }}\n                      placeholder={t(\"oAuthDevicePollingInterval\")}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"shortVerificationUri\")}\n                fieldId=\"shortVerificationUri\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"shortVerificationUriTooltipHelp\")}\n                    fieldLabelId=\"shortVerificationUri\"\n                  />\n                }\n              >\n                <TextInput\n                  id=\"shortVerificationUri\"\n                  placeholder={t(\"shortVerificationUri\")}\n                  {...form.register(\"attributes.shortVerificationUri\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"parRequestUriLifespan\")}\n                fieldId=\"parRequestUriLifespan\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"parRequestUriLifespanHelp\")}\n                    fieldLabelId=\"parRequestUriLifespan\"\n                  />\n                }\n              >\n                <Controller\n                  name=\"attributes.parRequestUriLifespan\"\n                  control={form.control}\n                  render={({ field }) => (\n                    <TimeSelector\n                      id=\"parRequestUriLifespan\"\n                      className=\"par-request-uri-lifespan\"\n                      data-testid=\"par-request-uri-lifespan-input\"\n                      aria-label=\"par-request-uri-lifespan\"\n                      value={field.value}\n                      onChange={field.onChange}\n                    />\n                  )}\n                />\n              </FormGroup>\n            </>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"refreshTokens\")}\n        className=\"kc-client-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-v5-u-mt-lg\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"revokeRefreshToken\")}\n            fieldId=\"kc-revoke-refresh-token\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"revokeRefreshTokenHelp\")}\n                fieldLabelId=\"revokeRefreshToken\"\n              />\n            }\n          >\n            <Controller\n              name=\"revokeRefreshToken\"\n              control={form.control}\n              defaultValue={false}\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-revoke-refresh-token\"\n                  data-testid=\"revoke-refresh-token-switch\"\n                  aria-label={t(\"revokeRefreshToken\")}\n                  label={t(\"enabled\")}\n                  labelOff={t(\"disabled\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                />\n              )}\n            />\n          </FormGroup>\n          {revokeRefreshToken && (\n            <FormGroup\n              label={t(\"refreshTokenMaxReuse\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"refreshTokenMaxReuseHelp\")}\n                  fieldLabelId=\"refreshTokenMaxReuse\"\n                />\n              }\n              fieldId=\"refreshTokenMaxReuse\"\n            >\n              <Controller\n                name=\"refreshTokenMaxReuse\"\n                defaultValue={0}\n                control={form.control}\n                render={({ field }) => (\n                  <NumberInput\n                    type=\"text\"\n                    id=\"refreshTokenMaxReuseMs\"\n                    value={field.value}\n                    onPlus={() => field.onChange(field.value! + 1)}\n                    onMinus={() => field.onChange(field.value! - 1)}\n                    onChange={(event) =>\n                      field.onChange(\n                        Number((event.target as HTMLInputElement).value),\n                      )\n                    }\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"accessTokens\")}\n        className=\"kc-offline-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-v5-u-mt-lg\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"accessTokenLifespan\")}\n            fieldId=\"accessTokenLifespan\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"accessTokenLifespanHelp\")}\n                fieldLabelId=\"accessTokenLifespan\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessTokenLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  validated={\n                    field.value! > ssoSessionIdleTimeout!\n                      ? \"warning\"\n                      : \"default\"\n                  }\n                  className=\"kc-access-token-lifespan\"\n                  data-testid=\"access-token-lifespan-input\"\n                  aria-label=\"access-token-lifespan\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n            <FormHelperText>\n              <HelperText>\n                <HelperTextItem>\n                  {t(\"recommendedSsoTimeout\", {\n                    time: toHumanFormat(\n                      ssoSessionIdleTimeout!,\n                      whoAmI.getLocale(),\n                    ),\n                  })}\n                </HelperTextItem>\n              </HelperText>\n            </FormHelperText>\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"accessTokenLifespanImplicitFlow\")}\n            fieldId=\"accessTokenLifespanImplicitFlow\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"accessTokenLifespanImplicitFlow\")}\n                fieldLabelId=\"accessTokenLifespanImplicitFlow\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessTokenLifespanForImplicitFlow\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-access-token-lifespan-implicit\"\n                  data-testid=\"access-token-lifespan-implicit-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"clientLoginTimeout\")}\n            fieldId=\"clientLoginTimeout\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clientLoginTimeoutHelp\")}\n                fieldLabelId=\"clientLoginTimeout\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessCodeLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-client-login-timeout\"\n                  data-testid=\"client-login-timeout-input\"\n                  aria-label=\"client-login-timeout\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          {offlineSessionMaxEnabled && (\n            <FormGroup\n              label={t(\"offlineSessionMax\")}\n              fieldId=\"offlineSessionMax\"\n              id=\"offline-session-max-label\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"offlineSessionMaxHelp\")}\n                  fieldLabelId=\"offlineSessionMax\"\n                />\n              }\n            >\n              <Controller\n                name=\"offlineSessionMaxLifespan\"\n                control={form.control}\n                render={({ field }) => (\n                  <TimeSelector\n                    className=\"kc-offline-session-max\"\n                    data-testid=\"offline-session-max-input\"\n                    value={field.value!}\n                    onChange={field.onChange}\n                    units={[\"minute\", \"hour\", \"day\"]}\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-login-settings-template\"\n        title={t(\"actionTokens\")}\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-v5-u-mt-lg\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"userInitiatedActionLifespan\")}\n            id=\"kc-user-initiated-action-lifespan\"\n            fieldId=\"userInitiatedActionLifespan\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"userInitiatedActionLifespanHelp\")}\n                fieldLabelId=\"userInitiatedActionLifespan\"\n              />\n            }\n          >\n            <Controller\n              name=\"actionTokenGeneratedByUserLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-user-initiated-action-lifespan\"\n                  data-testid=\"user-initiated-action-lifespan\"\n                  aria-label=\"user-initiated-action-lifespan\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"defaultAdminInitiated\")}\n            fieldId=\"defaultAdminInitiated\"\n            id=\"default-admin-initiated-label\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"defaultAdminInitiatedActionLifespanHelp\")}\n                fieldLabelId=\"defaultAdminInitiated\"\n              />\n            }\n          >\n            <Controller\n              name=\"actionTokenGeneratedByAdminLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-default-admin-initiated\"\n                  data-testid=\"default-admin-initated-input\"\n                  aria-label=\"default-admin-initated-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <Text\n            className=\"kc-override-action-tokens-subtitle\"\n            component={TextVariants.h1}\n          >\n            {t(\"overrideActionTokens\")}\n          </Text>\n          <FormGroup\n            label={t(\"emailVerification\")}\n            fieldId=\"emailVerification\"\n            id=\"email-verification\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"emailVerificationHelp\")}\n                fieldLabelId=\"emailVerification\"\n              />\n            }\n          >\n            <Controller\n              name={`attributes.${beerify(\n                \"actionTokenGeneratedByUserLifespan.verify-email\",\n              )}`}\n              defaultValue=\"\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-email-verification\"\n                  data-testid=\"email-verification-input\"\n                  value={field.value}\n                  onChange={(value) => field.onChange(value.toString())}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"idpAccountEmailVerification\")}\n            fieldId=\"idpAccountEmailVerification\"\n            id=\"idp-acct-label\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"idpAccountEmailVerificationHelp\")}\n                fieldLabelId=\"idpAccountEmailVerification\"\n              />\n            }\n          >\n            <Controller\n              name={`attributes.${beerify(\n                \"actionTokenGeneratedByUserLifespan.idp-verify-account-via-email\",\n              )}`}\n              defaultValue={\"\"}\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-idp-email-verification\"\n                  data-testid=\"idp-email-verification-input\"\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"forgotPassword\")}\n            fieldId=\"forgotPassword\"\n            id=\"forgot-password-label\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"forgotPasswordHelp\")}\n                fieldLabelId=\"forgotPassword\"\n              />\n            }\n          >\n            <Controller\n              name={`attributes.${beerify(\n                \"actionTokenGeneratedByUserLifespan.reset-credentials\",\n              )}`}\n              defaultValue={\"\"}\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-forgot-pw\"\n                  data-testid=\"forgot-pw-input\"\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"executeActions\")}\n            fieldId=\"executeActions\"\n            id=\"execute-actions\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"executeActionsHelp\")}\n                fieldLabelId=\"executeActions\"\n              />\n            }\n          >\n            <Controller\n              name={`attributes.${beerify(\n                \"actionTokenGeneratedByUserLifespan.execute-actions\",\n              )}`}\n              defaultValue={\"\"}\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-execute-actions\"\n                  data-testid=\"execute-actions-input\"\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"tokens-tab-save\"\n              isDisabled={!form.formState.isDirty}\n            >\n              {t(\"save\")}\n            </Button>\n            <Button variant=\"link\" onClick={reset}>\n              {t(\"revert\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  Action,\n  KeycloakDataTable,\n  useAlerts,\n  useFetch,\n  useHelp,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  Popover,\n  Text,\n  TextContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { EllipsisVIcon, QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { GroupPickerDialog } from \"../components/group/GroupPickerDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toUserFederation } from \"../user-federation/routes/UserFederation\";\nimport useToggle from \"../utils/useToggle\";\nimport { useAccess } from \"../context/access/Access\";\n\nexport const DefaultsGroupsTab = () => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n\n  const [isKebabOpen, toggleKebab] = useToggle();\n  const [isGroupPickerOpen, toggleGroupPicker] = useToggle();\n  const [defaultGroups, setDefaultGroups] = useState<GroupRepresentation[]>();\n  const [selectedRows, setSelectedRows] = useState<GroupRepresentation[]>([]);\n\n  const [key, setKey] = useState(0);\n  const [load, setLoad] = useState(0);\n  const reload = () => setLoad(load + 1);\n\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const { enabled } = useHelp();\n\n  const { hasAccess } = useAccess();\n  const canAddOrRemoveGroups = hasAccess(\"view-users\", \"manage-realm\");\n\n  useFetch(\n    () => adminClient.realms.getDefaultGroups({ realm }),\n    (groups) => {\n      setDefaultGroups(groups);\n      setKey(key + 1);\n    },\n    [load],\n  );\n\n  const loader = () => Promise.resolve(defaultGroups!);\n\n  const removeGroup = async () => {\n    try {\n      await Promise.all(\n        selectedRows.map((group) =>\n          adminClient.realms.removeDefaultGroup({\n            realm,\n            id: group.id!,\n          }),\n        ),\n      );\n      addAlert(\n        t(\"groupRemove\", { count: selectedRows.length }),\n        AlertVariant.success,\n      );\n      setSelectedRows([]);\n    } catch (error) {\n      addError(\"groupRemoveError\", error);\n    }\n    reload();\n  };\n\n  const addGroups = async (groups: GroupRepresentation[]) => {\n    try {\n      await Promise.all(\n        groups.map((group) =>\n          adminClient.realms.addDefaultGroup({\n            realm,\n            id: group.id!,\n          }),\n        ),\n      );\n      addAlert(\n        t(\"defaultGroupAdded\", { count: groups.length }),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\"defaultGroupAddedError\", error);\n    }\n    reload();\n  };\n\n  const [toggleRemoveDialog, RemoveDialog] = useConfirmDialog({\n    titleKey: t(\"removeConfirmTitle\", { count: selectedRows.length }),\n    messageKey: t(\"removeConfirm\", { count: selectedRows.length }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: removeGroup,\n  });\n\n  if (!defaultGroups) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <RemoveDialog />\n      {isGroupPickerOpen && (\n        <GroupPickerDialog\n          type=\"selectMany\"\n          text={{\n            title: \"addDefaultGroups\",\n            ok: \"add\",\n          }}\n          onConfirm={(groups) => {\n            addGroups(groups || []);\n            toggleGroupPicker();\n          }}\n          onClose={toggleGroupPicker}\n        />\n      )}\n      {enabled && (\n        <Popover\n          bodyContent={\n            <Trans i18nKey=\"defaultGroupsHelp\">\n              {\" \"}\n              <Link to={toUserFederation({ realm })} />.\n            </Trans>\n          }\n        >\n          <TextContent\n            className=\"keycloak__section_intro__help\"\n            style={{\n              paddingLeft: \"var(--pf-v5-c-page__main-section--PaddingLeft)\",\n            }}\n          >\n            <Text>\n              <QuestionCircleIcon /> {t(\"whatIsDefaultGroups\")}\n            </Text>\n          </TextContent>\n        </Popover>\n      )}\n      <KeycloakDataTable\n        key={key}\n        canSelectAll\n        onSelect={(rows) => setSelectedRows([...rows])}\n        loader={loader}\n        ariaLabelKey=\"defaultGroups\"\n        searchPlaceholderKey=\"searchForGroups\"\n        toolbarItem={\n          canAddOrRemoveGroups && (\n            <>\n              <ToolbarItem>\n                <Button\n                  data-testid=\"openCreateGroupModal\"\n                  variant=\"primary\"\n                  onClick={toggleGroupPicker}\n                >\n                  {t(\"addGroups\")}\n                </Button>\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  onOpenChange={toggleKebab}\n                  toggle={(ref) => (\n                    <MenuToggle\n                      ref={ref}\n                      isExpanded={isKebabOpen}\n                      variant=\"plain\"\n                      onClick={toggleKebab}\n                      isDisabled={selectedRows!.length === 0}\n                    >\n                      <EllipsisVIcon />\n                    </MenuToggle>\n                  )}\n                  isOpen={isKebabOpen}\n                  shouldFocusToggleOnSelect\n                >\n                  <DropdownList>\n                    <DropdownItem\n                      key=\"action\"\n                      component=\"button\"\n                      onClick={() => {\n                        toggleRemoveDialog();\n                        toggleKebab();\n                      }}\n                    >\n                      {t(\"remove\")}\n                    </DropdownItem>\n                  </DropdownList>\n                </Dropdown>\n              </ToolbarItem>\n            </>\n          )\n        }\n        actions={\n          canAddOrRemoveGroups\n            ? [\n                {\n                  title: t(\"remove\"),\n                  onRowClick: (group) => {\n                    setSelectedRows([group]);\n                    toggleRemoveDialog();\n                    return Promise.resolve(false);\n                  },\n                } as Action<GroupRepresentation>,\n              ]\n            : []\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"groupName\",\n          },\n          {\n            name: \"path\",\n            displayKey: \"path\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon\n            message={t(\"noDefaultGroups\")}\n            instructions={\n              <Trans i18nKey=\"noDefaultGroupsInstructions\">\n                {\" \"}\n                <Link\n                  className=\"pf-v5-u-font-weight-light\"\n                  to={toUserFederation({ realm })}\n                  role=\"navigation\"\n                  aria-label={t(\"identityBrokeringLink\")}\n                />\n                Add groups...\n              </Trans>\n            }\n            primaryActionText={canAddOrRemoveGroups ? t(\"addGroups\") : \"\"}\n            onPrimaryAction={toggleGroupPicker}\n          />\n        }\n      />\n    </>\n  );\n};\n","import type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { AlertVariant, Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { RoleMapping } from \"../components/role-mapping/RoleMapping\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { DefaultsGroupsTab } from \"./DefaultGroupsTab\";\n\nexport const UserRegistration = () => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [activeTab, setActiveTab] = useState(10);\n  const { realmRepresentation: realm } = useRealm();\n  const [key, setKey] = useState(0);\n\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  const addComposites = async (composites: RoleRepresentation[]) => {\n    const compositeArray = composites;\n\n    try {\n      await adminClient.roles.createComposite(\n        { roleId: realm?.defaultRole!.id!, realm: realmName },\n        compositeArray,\n      );\n      setKey(key + 1);\n      addAlert(t(\"addAssociatedRolesSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"addAssociatedRolesError\", error);\n    }\n  };\n\n  return (\n    <Tabs\n      activeKey={activeTab}\n      onSelect={(_, key) => setActiveTab(key as number)}\n    >\n      <Tab\n        key={key}\n        id=\"roles\"\n        eventKey={10}\n        title={<TabTitleText>{t(\"defaultRoles\")}</TabTitleText>}\n        data-testid=\"default-roles-tab\"\n      >\n        <RoleMapping\n          name={realm?.defaultRole!.name!}\n          id={realm?.defaultRole!.id!}\n          type=\"roles\"\n          isManager\n          save={(rows) => addComposites(rows.map((r) => r.role))}\n        />\n      </Tab>\n      <Tab\n        id=\"groups\"\n        eventKey={20}\n        title={<TabTitleText>{t(\"defaultGroups\")}</TabTitleText>}\n        data-testid=\"default-groups-tab\"\n      >\n        <DefaultsGroupsTab />\n      </Tab>\n    </Tabs>\n  );\n};\n","import { Button, ToolbarItem } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { Action, KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { translationFormatter } from \"../../utils/translationFormatter\";\n\nexport type EventType = {\n  id: string;\n};\n\ntype EventsTypeTableProps = {\n  ariaLabelKey?: string;\n  eventTypes: string[];\n  addTypes?: () => void;\n  onSelect?: (value: EventType[]) => void;\n  onDelete?: (value: EventType) => void;\n};\n\nexport function EventsTypeTable({\n  ariaLabelKey = \"userEventsRegistered\",\n  eventTypes,\n  addTypes,\n  onSelect,\n  onDelete,\n}: EventsTypeTableProps) {\n  const { t } = useTranslation();\n\n  const data = eventTypes.map((type) => ({\n    id: type,\n    name: t(`eventTypes.${type}.name`),\n    description: t(`eventTypes.${type}.description`),\n  }));\n  return (\n    <KeycloakDataTable\n      ariaLabelKey={ariaLabelKey}\n      searchPlaceholderKey=\"searchEventType\"\n      loader={data}\n      onSelect={onSelect ? onSelect : undefined}\n      canSelectAll={!!onSelect}\n      toolbarItem={\n        addTypes && (\n          <ToolbarItem>\n            <Button id=\"addTypes\" onClick={addTypes} data-testid=\"addTypes\">\n              {t(\"addSavedTypes\")}\n            </Button>\n          </ToolbarItem>\n        )\n      }\n      actions={\n        !onDelete\n          ? []\n          : [\n              {\n                title: t(\"remove\"),\n                onRowClick: onDelete,\n              } as Action<EventType>,\n            ]\n      }\n      columns={[\n        {\n          name: \"name\",\n          displayKey: \"eventType\",\n        },\n        {\n          name: \"description\",\n          cellFormatters: [translationFormatter(t)],\n        },\n      ]}\n      emptyState={\n        <ListEmptyState\n          message={t(\"emptyEvents\")}\n          instructions={t(\"emptyEventsInstructions\")}\n        />\n      }\n    />\n  );\n}\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Modal, ModalVariant } from \"@patternfly/react-core\";\n\nimport { EventsTypeTable, EventType } from \"./EventsTypeTable\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype AddEventTypesDialogProps = {\n  onConfirm: (selected: EventType[]) => void;\n  onClose: () => void;\n  configured: string[];\n};\n\nexport const AddEventTypesDialog = ({\n  onConfirm,\n  onClose,\n  configured,\n}: AddEventTypesDialogProps) => {\n  const { t } = useTranslation();\n  const { enums } = useServerInfo();\n\n  const [selectedTypes, setSelectedTypes] = useState<EventType[]>([]);\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"addTypes\")}\n      isOpen={true}\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"addEventTypeConfirm\"\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => onConfirm(selectedTypes)}\n        >\n          {t(\"add\")}\n        </Button>,\n        <Button\n          data-testid=\"moveCancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <EventsTypeTable\n        ariaLabelKey=\"addTypes\"\n        onSelect={(selected) => setSelectedTypes(selected)}\n        eventTypes={enums![\"eventType\"].filter(\n          (type) => !configured.includes(type),\n        )}\n      />\n    </Modal>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  Divider,\n  FormGroup,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { Controller, FormProvider, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { TimeSelectorControl } from \"../../components/time-selector/TimeSelectorControl\";\n\nexport type EventsType = \"admin\" | \"user\";\n\ntype EventConfigFormProps = {\n  type: EventsType;\n  form: UseFormReturn;\n  reset: () => void;\n  clear: () => void;\n};\n\nexport const EventConfigForm = ({\n  type,\n  form,\n  reset,\n  clear,\n}: EventConfigFormProps) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    watch,\n    setValue,\n    formState: { isDirty },\n  } = form;\n  const eventKey = type === \"admin\" ? \"adminEventsEnabled\" : \"eventsEnabled\";\n  const eventsEnabled: boolean = watch(eventKey);\n\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"events-disable-title\",\n    messageKey: \"events-disable-confirm\",\n    continueButtonLabel: \"confirm\",\n    onConfirm: () => setValue(eventKey, false, { shouldDirty: true }),\n  });\n\n  return (\n    <FormProvider {...form}>\n      <DisableConfirm />\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"saveEvents\")}\n        fieldId={eventKey}\n        labelIcon={\n          <HelpItem\n            helpText={t(`save-${type}-eventsHelp`)}\n            fieldLabelId=\"saveEvents\"\n          />\n        }\n      >\n        <Controller\n          name={eventKey}\n          defaultValue={false}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              data-testid={eventKey}\n              id={`${eventKey}-switch`}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value}\n              onChange={(_event, value) => {\n                if (!value) {\n                  toggleDisableDialog();\n                } else {\n                  field.onChange(value);\n                }\n              }}\n              aria-label={t(\"saveEvents\")}\n            />\n          )}\n        />\n      </FormGroup>\n      {eventsEnabled && (\n        <>\n          {type === \"admin\" && (\n            <DefaultSwitchControl\n              name=\"adminEventsDetailsEnabled\"\n              label={t(\"includeRepresentation\")}\n              labelIcon={t(\"includeRepresentationHelp\")}\n            />\n          )}\n          <TimeSelectorControl\n            name={\n              type === \"user\" ? \"eventsExpiration\" : \"adminEventsExpiration\"\n            }\n            label={t(\"expiration\")}\n            labelIcon={t(\"expirationHelp\")}\n            defaultValue=\"\"\n            units={[\"minute\", \"hour\", \"day\"]}\n            controller={{\n              defaultValue: \"\",\n            }}\n          />\n        </>\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          id={`save-${type}`}\n          data-testid={`save-${type}`}\n          isDisabled={!isDirty}\n        >\n          {t(\"save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset}>\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n      <Divider />\n      <FormGroup\n        label={type === \"user\" ? t(\"clearUserEvents\") : t(\"clearAdminEvents\")}\n        fieldId={`clear-${type}-events`}\n        labelIcon={\n          <HelpItem\n            helpText={t(`${type}-clearEventsHelp`)}\n            fieldLabelId={`clear-${type}-events`}\n          />\n        }\n      >\n        <Button\n          variant=\"danger\"\n          id={`clear-${type}-events`}\n          data-testid={`clear-${type}-events`}\n          onClick={() => clear()}\n        >\n          {type === \"user\" ? t(\"clearUserEvents\") : t(\"clearAdminEvents\")}\n        </Button>\n      </FormGroup>\n    </FormProvider>\n  );\n};\n","import { ActionGroup, Button } from \"@patternfly/react-core\";\nimport { FormProvider, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectControl, SelectVariant } from \"@keycloak/keycloak-ui-shared\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype EventListenersFormProps = {\n  form: UseFormReturn;\n  reset: () => void;\n};\n\nexport const EventListenersForm = ({\n  form,\n  reset,\n}: EventListenersFormProps) => {\n  const { t } = useTranslation();\n\n  const serverInfo = useServerInfo();\n  const eventListeners = serverInfo.providers?.eventsListener.providers;\n\n  return (\n    <FormProvider {...form}>\n      <SelectControl\n        name=\"eventsListeners\"\n        label={t(\"eventListeners\")}\n        labelIcon={t(\"eventListenersHelpTextHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        className=\"kc_eventListeners_select\"\n        chipGroupProps={{\n          numChips: 3,\n          expandedText: t(\"hide\"),\n          collapsedText: t(\"showRemaining\"),\n        }}\n        variant={SelectVariant.typeaheadMulti}\n        options={Object.keys(eventListeners!)}\n      />\n      <ActionGroup>\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          data-testid={\"saveEventListenerBtn\"}\n        >\n          {t(\"save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          data-testid={\"revertEventListenerBtn\"}\n          onClick={reset}\n        >\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormProvider>\n  );\n};\n","import type { RealmEventsConfigRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/realmEventsConfigRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  PageSection,\n  Tab,\n  Tabs,\n  TabTitleText,\n} from \"@patternfly/react-core\";\nimport { isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertToFormValues } from \"../../util\";\nimport { AddEventTypesDialog } from \"./AddEventTypesDialog\";\nimport { EventConfigForm, EventsType } from \"./EventConfigForm\";\nimport { EventListenersForm } from \"./EventListenersForm\";\nimport { EventsTypeTable, EventType } from \"./EventsTypeTable\";\n\ntype EventsTabProps = {\n  realm: RealmRepresentation;\n};\n\ntype EventsConfigForm = RealmEventsConfigRepresentation & {\n  adminEventsExpiration?: number;\n};\n\nexport const EventsTab = ({ realm }: EventsTabProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const form = useForm<EventsConfigForm>();\n  const { setValue, handleSubmit } = form;\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n  const [tableKey, setTableKey] = useState(0);\n  const reload = () => setTableKey(new Date().getTime());\n\n  const [activeTab, setActiveTab] = useState(\"event\");\n  const [events, setEvents] = useState<RealmEventsConfigRepresentation>();\n  const [type, setType] = useState<EventsType>();\n  const [addEventType, setAddEventType] = useState(false);\n\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName, refresh: refreshRealm } = useRealm();\n\n  const setupForm = (eventConfig?: EventsConfigForm) => {\n    setEvents(eventConfig);\n    convertToFormValues(eventConfig || {}, setValue);\n  };\n\n  const clear = async (type: EventsType) => {\n    setType(type);\n    toggleDeleteDialog();\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteEvents\",\n    messageKey: \"deleteEventsConfirm\",\n    continueButtonLabel: \"clear\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        switch (type) {\n          case \"admin\":\n            await adminClient.realms.clearAdminEvents({ realm: realmName });\n            break;\n          case \"user\":\n            await adminClient.realms.clearEvents({ realm: realmName });\n            break;\n        }\n        addAlert(t(`${type}-events-cleared`), AlertVariant.success);\n      } catch (error) {\n        addError(`${type}-events-cleared-error`, error);\n      }\n    },\n  });\n\n  useFetch(\n    () => adminClient.realms.getConfigEvents({ realm: realmName }),\n    (eventConfig) => {\n      setupForm({\n        ...eventConfig,\n        adminEventsExpiration: realm.attributes?.adminEventsExpiration,\n      });\n      reload();\n    },\n    [key],\n  );\n\n  const save = async (config: EventsConfigForm) => {\n    const updatedEventListener = !isEqual(\n      events?.eventsListeners,\n      config.eventsListeners,\n    );\n\n    const { adminEventsExpiration, ...eventConfig } = config;\n    if (realm.attributes?.adminEventsExpiration !== adminEventsExpiration) {\n      await adminClient.realms.update(\n        { realm: realmName },\n        {\n          ...realm,\n          attributes: { ...(realm.attributes || {}), adminEventsExpiration },\n        },\n      );\n    }\n    refreshRealm();\n\n    try {\n      await adminClient.realms.updateConfigEvents(\n        { realm: realmName },\n        eventConfig,\n      );\n      setupForm({ ...events, ...eventConfig, adminEventsExpiration });\n      addAlert(\n        updatedEventListener\n          ? t(\"saveEventListenersSuccess\")\n          : t(\"eventConfigSuccessfully\"),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\n        updatedEventListener\n          ? t(\"saveEventListenersError\")\n          : t(\"eventConfigError\"),\n        error,\n      );\n    }\n  };\n\n  const addEventTypes = async (eventTypes: EventType[]) => {\n    const eventsTypes = eventTypes.map((type) => type.id);\n    const enabledEvents = events!.enabledEventTypes?.concat(eventsTypes);\n    await addEvents(enabledEvents);\n  };\n\n  const addEvents = async (events: string[] = []) => {\n    const eventConfig = { ...form.getValues(), enabledEventTypes: events };\n    await save(eventConfig);\n    setAddEventType(false);\n    refresh();\n  };\n\n  return (\n    <>\n      <DeleteConfirm />\n      {addEventType && (\n        <AddEventTypesDialog\n          onConfirm={(eventTypes) => addEventTypes(eventTypes)}\n          configured={events?.enabledEventTypes || []}\n          onClose={() => setAddEventType(false)}\n        />\n      )}\n      <Tabs\n        activeKey={activeTab}\n        onSelect={(_, key) => setActiveTab(key as string)}\n      >\n        <Tab\n          eventKey=\"event\"\n          title={<TabTitleText>{t(\"eventListeners\")}</TabTitleText>}\n          data-testid=\"rs-event-listeners-tab\"\n        >\n          <PageSection>\n            <FormAccess\n              role=\"manage-events\"\n              isHorizontal\n              onSubmit={handleSubmit(save)}\n            >\n              <EventListenersForm form={form} reset={() => setupForm(events)} />\n            </FormAccess>\n          </PageSection>\n        </Tab>\n        <Tab\n          eventKey=\"user\"\n          title={<TabTitleText>{t(\"userEventsSettings\")}</TabTitleText>}\n          data-testid=\"rs-events-tab\"\n        >\n          <PageSection>\n            <FormAccess\n              role=\"manage-events\"\n              isHorizontal\n              onSubmit={handleSubmit(save)}\n            >\n              <EventConfigForm\n                type=\"user\"\n                form={form}\n                reset={() => setupForm(events)}\n                clear={() => clear(\"user\")}\n              />\n            </FormAccess>\n          </PageSection>\n          <PageSection>\n            <EventsTypeTable\n              key={tableKey}\n              addTypes={() => setAddEventType(true)}\n              eventTypes={events?.enabledEventTypes || []}\n              onDelete={(value) => {\n                const enabledEventTypes = events?.enabledEventTypes?.filter(\n                  (e) => e !== value.id,\n                );\n                addEvents(enabledEventTypes);\n                setEvents({ ...events, enabledEventTypes });\n              }}\n            />\n          </PageSection>\n        </Tab>\n        <Tab\n          eventKey=\"admin\"\n          title={<TabTitleText>{t(\"adminEventsSettings\")}</TabTitleText>}\n          data-testid=\"rs-admin-events-tab\"\n        >\n          <PageSection>\n            <FormAccess\n              role=\"manage-events\"\n              isHorizontal\n              onSubmit={handleSubmit(save)}\n            >\n              <EventConfigForm\n                type=\"admin\"\n                form={form}\n                reset={() => setupForm(events)}\n                clear={() => clear(\"admin\")}\n              />\n            </FormAccess>\n          </PageSection>\n        </Tab>\n      </Tabs>\n    </>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type { KeyMetadataRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/keyMetadataRepresentation\";\nimport {\n  KeycloakDataTable,\n  KeycloakSelect,\n  SelectVariant,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  PageSection,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { emptyFormatter } from \"../../util\";\nimport useFormatDate from \"../../utils/useFormatDate\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toKeysTab } from \"../routes/KeysTab\";\n\nimport \"../realm-settings-section.css\";\n\nconst FILTER_OPTIONS = [\"ACTIVE\", \"PASSIVE\", \"DISABLED\"] as const;\ntype FilterType = (typeof FILTER_OPTIONS)[number];\n\ntype KeyData = KeyMetadataRepresentation & {\n  provider?: string;\n};\n\ntype KeysListTabProps = {\n  realmComponents: ComponentRepresentation[];\n};\n\ntype SelectFilterProps = {\n  onFilter: (filter: FilterType) => void;\n};\n\nconst SelectFilter = ({ onFilter }: SelectFilterProps) => {\n  const { t } = useTranslation();\n  const [filterType, setFilterType] = useState<FilterType>(FILTER_OPTIONS[0]);\n\n  const [filterDropdownOpen, toggleFilter] = useToggle();\n  return (\n    <KeycloakSelect\n      width={300}\n      data-testid=\"filter-type-select\"\n      isOpen={filterDropdownOpen}\n      className=\"kc-filter-type-select\"\n      variant={SelectVariant.single}\n      onToggle={toggleFilter}\n      toggleIcon={<FilterIcon />}\n      onSelect={(value) => {\n        const filter =\n          FILTER_OPTIONS.find((o) => o === value.toString()) ||\n          FILTER_OPTIONS[0];\n        setFilterType(filter);\n        onFilter(filter);\n        toggleFilter();\n      }}\n      selections={filterType}\n      aria-label={t(\"selectFilterType\")}\n    >\n      {FILTER_OPTIONS.map((option) => (\n        <SelectOption\n          key={option}\n          data-testid={`${option}-option`}\n          value={option}\n        >\n          {t(`keysFilter.${option}`)}\n        </SelectOption>\n      ))}\n    </KeycloakSelect>\n  );\n};\n\nexport const KeysListTab = ({ realmComponents }: KeysListTabProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const formatDate = useFormatDate();\n\n  const [publicKey, setPublicKey] = useState(\"\");\n  const [certificate, setCertificate] = useState(\"\");\n\n  const { realm } = useRealm();\n\n  const [keyData, setKeyData] = useState<KeyData[]>();\n  const [filteredKeyData, setFilteredKeyData] = useState<KeyData[]>();\n\n  useFetch(\n    async () => {\n      const keysMetaData = await adminClient.realms.getKeys({ realm });\n      return keysMetaData.keys?.map((key) => {\n        const provider = realmComponents.find(\n          (component: ComponentRepresentation) =>\n            component.id === key.providerId,\n        );\n        return { ...key, provider: provider?.name } as KeyData;\n      })!;\n    },\n    setKeyData,\n    [],\n  );\n\n  const [togglePublicKeyDialog, PublicKeyDialog] = useConfirmDialog({\n    titleKey: t(\"publicKey\"),\n    messageKey: publicKey,\n    continueButtonLabel: \"close\",\n    continueButtonVariant: ButtonVariant.primary,\n    onConfirm: () => Promise.resolve(),\n  });\n\n  const [toggleCertificateDialog, CertificateDialog] = useConfirmDialog({\n    titleKey: t(\"certificate\"),\n    messageKey: certificate,\n    continueButtonLabel: \"close\",\n    continueButtonVariant: ButtonVariant.primary,\n    onConfirm: () => Promise.resolve(),\n  });\n\n  if (!keyData) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant=\"light\" padding={{ default: \"noPadding\" }}>\n      <PublicKeyDialog />\n      <CertificateDialog />\n      <KeycloakDataTable\n        isNotCompact\n        className=\"kc-keys-list\"\n        loader={filteredKeyData || keyData}\n        ariaLabelKey=\"keysList\"\n        searchPlaceholderKey=\"searchKey\"\n        searchTypeComponent={\n          <SelectFilter\n            onFilter={(filterType) =>\n              setFilteredKeyData(\n                filterType !== FILTER_OPTIONS[0]\n                  ? keyData!.filter(({ status }) => status === filterType)\n                  : undefined,\n              )\n            }\n          />\n        }\n        columns={[\n          {\n            name: \"algorithm\",\n            displayKey: \"algorithm\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(15)],\n          },\n          {\n            name: \"type\",\n            displayKey: \"type\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"kid\",\n            displayKey: \"kid\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"use\",\n            displayKey: \"use\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"provider\",\n            displayKey: \"provider\",\n            cellRenderer: ({ provider }: KeyData) => provider || \"-\",\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"validTo\",\n            displayKey: \"validTo\",\n            cellRenderer: ({ validTo }: KeyData) =>\n              validTo ? formatDate(new Date(validTo)) : \"-\",\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"publicKeys\",\n            displayKey: \"publicKeys\",\n            cellRenderer: ({ type, publicKey, certificate }: KeyData) => {\n              if (type === \"EC\") {\n                return (\n                  <Button\n                    onClick={() => {\n                      togglePublicKeyDialog();\n                      setPublicKey(publicKey!);\n                    }}\n                    variant=\"secondary\"\n                    id=\"kc-public-key\"\n                  >\n                    {t(\"publicKey\")}\n                  </Button>\n                );\n              } else if (type === \"RSA\") {\n                return (\n                  <div className=\"button-wrapper\">\n                    <Button\n                      onClick={() => {\n                        togglePublicKeyDialog();\n                        setPublicKey(publicKey!);\n                      }}\n                      variant=\"secondary\"\n                      id={publicKey}\n                    >\n                      {t(\"publicKey\")}\n                    </Button>\n                    <Button\n                      onClick={() => {\n                        toggleCertificateDialog();\n                        setCertificate(certificate!);\n                      }}\n                      variant=\"secondary\"\n                      id={certificate}\n                      className=\"kc-certificate\"\n                    >\n                      {t(\"certificate\")}\n                    </Button>\n                  </div>\n                );\n              } else if (type === \"OKP\") {\n                return (\n                  <Button\n                    onClick={() => {\n                      togglePublicKeyDialog();\n                      setPublicKey(publicKey!);\n                    }}\n                    variant=\"secondary\"\n                    id=\"kc-public-key\"\n                  >\n                    {t(\"publicKey\")}\n                  </Button>\n                );\n              } else return \"\";\n            },\n            transforms: [cellWidth(20)],\n          },\n        ]}\n        isSearching={!!filteredKeyData}\n        emptyState={\n          <ListEmptyState\n            hasIcon\n            message={t(\"noKeys\")}\n            instructions={t(\"noKeysDescription\")}\n            primaryActionText={t(\"addProvider\")}\n            onPrimaryAction={() =>\n              navigate(toKeysTab({ realm, tab: \"providers\" }))\n            }\n          />\n        }\n      />\n    </PageSection>\n  );\n};\n","import { Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { KeyProviderForm } from \"./KeyProviderForm\";\nimport type { ProviderType } from \"../../routes/KeyProvider\";\n\nimport style from \"./key-provider-modal.module.css\";\n\ntype KeyProviderModalProps = {\n  providerType: ProviderType;\n  onClose: () => void;\n};\n\nexport const KeyProviderModal = ({\n  providerType,\n  onClose,\n}: KeyProviderModalProps) => {\n  const { t } = useTranslation();\n  return (\n    <Modal\n      className={style.dialog}\n      variant={ModalVariant.medium}\n      title={t(\"addProvider\")}\n      isOpen\n      onClose={onClose}\n    >\n      <KeyProviderForm providerType={providerType} onClose={onClose} />\n    </Modal>\n  );\n};\n","import {\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Modal,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useServerInfo } from \"../../../context/server-info/ServerInfoProvider\";\nimport { KEY_PROVIDER_TYPE } from \"../../../util\";\n\ntype KeyProvidersPickerProps = {\n  onConfirm: (provider: string) => void;\n  onClose: () => void;\n};\n\nexport const KeyProvidersPicker = ({\n  onConfirm,\n  onClose,\n}: KeyProvidersPickerProps) => {\n  const { t } = useTranslation();\n  const serverInfo = useServerInfo();\n  const keyProviderComponentTypes =\n    serverInfo.componentTypes?.[KEY_PROVIDER_TYPE] ?? [];\n  return (\n    <Modal variant=\"medium\" title={t(\"addProvider\")} isOpen onClose={onClose}>\n      <DataList\n        onSelectDataListItem={(_event, id) => {\n          onConfirm(id);\n        }}\n        aria-label={t(\"addPredefinedMappers\")}\n        isCompact\n      >\n        {keyProviderComponentTypes.map((provider) => (\n          <DataListItem\n            aria-label={provider.id}\n            key={provider.id}\n            id={provider.id}\n          >\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell\n                    key={`name-${provider.id}`}\n                    data-testid={`option-${provider.id}`}\n                  >\n                    {provider.id}\n                  </DataListCell>,\n                  <DataListCell width={2} key={`helpText-${provider.helpText}`}>\n                    {provider.helpText}\n                  </DataListCell>,\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n        ))}\n      </DataList>\n    </Modal>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport type { KeyMetadataRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/keyMetadataRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  InputGroup,\n  InputGroupItem,\n  PageSection,\n  TextInput,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport { KeyboardEvent, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { DraggableTable } from \"../../authentication/components/DraggableTable\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { KEY_PROVIDER_TYPE } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { ProviderType, toKeyProvider } from \"../routes/KeyProvider\";\nimport { KeyProviderModal } from \"./key-providers/KeyProviderModal\";\nimport { KeyProvidersPicker } from \"./key-providers/KeyProvidersPicker\";\n\nimport \"../realm-settings-section.css\";\n\ntype ComponentData = KeyMetadataRepresentation & {\n  id?: string;\n  providerDescription?: string;\n  name?: string;\n  toggleHidden?: boolean;\n  config?: any;\n  parentId?: string;\n};\n\ntype KeysProvidersTabProps = {\n  realmComponents: ComponentRepresentation[];\n  refresh: () => void;\n};\n\nexport const KeysProvidersTab = ({\n  realmComponents,\n  refresh,\n}: KeysProvidersTabProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [searchVal, setSearchVal] = useState(\"\");\n  const [filteredComponents, setFilteredComponents] = useState<ComponentData[]>(\n    [],\n  );\n\n  const [isCreateModalOpen, handleModalToggle] = useToggle();\n  const serverInfo = useServerInfo();\n  const keyProviderComponentTypes =\n    serverInfo.componentTypes?.[KEY_PROVIDER_TYPE] ?? [];\n\n  const [providerOpen, toggleProviderOpen] = useToggle();\n  const [defaultUIDisplayName, setDefaultUIDisplayName] =\n    useState<ProviderType>();\n\n  const [selectedComponent, setSelectedComponent] =\n    useState<ComponentRepresentation>();\n\n  const components = useMemo(\n    () =>\n      realmComponents.map((component) => {\n        const provider = keyProviderComponentTypes.find(\n          (componentType: ComponentTypeRepresentation) =>\n            component.providerId === componentType.id,\n        );\n\n        return {\n          ...component,\n          providerDescription: provider?.helpText,\n        };\n      }),\n    [realmComponents],\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteProviderTitle\",\n    messageKey: t(\"deleteProviderConfirm\", {\n      provider: selectedComponent?.name,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.components.del({\n          id: selectedComponent!.id!,\n          realm: realm,\n        });\n\n        refresh();\n\n        addAlert(t(\"deleteProviderSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"deleteProviderError\", error);\n      }\n    },\n  });\n\n  const onSearch = () => {\n    if (searchVal !== \"\") {\n      setSearchVal(searchVal);\n      const filteredComponents = components.filter(\n        (component) =>\n          component.name?.includes(searchVal) ||\n          component.providerId?.includes(searchVal),\n      );\n      setFilteredComponents(filteredComponents);\n    } else {\n      setSearchVal(\"\");\n      setFilteredComponents(components);\n    }\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      onSearch();\n    }\n  };\n\n  const handleInputChange = (value: string) => {\n    setSearchVal(value);\n  };\n\n  return (\n    <>\n      {providerOpen && (\n        <KeyProvidersPicker\n          onClose={() => toggleProviderOpen()}\n          onConfirm={(provider) => {\n            handleModalToggle();\n            setDefaultUIDisplayName(provider as ProviderType);\n            toggleProviderOpen();\n          }}\n        />\n      )}\n      {isCreateModalOpen && defaultUIDisplayName && (\n        <KeyProviderModal\n          providerType={defaultUIDisplayName}\n          onClose={() => {\n            handleModalToggle();\n            refresh();\n          }}\n        />\n      )}\n      <DeleteConfirm />\n      <PageSection variant=\"light\" padding={{ default: \"noPadding\" }}>\n        <Toolbar>\n          <ToolbarGroup className=\"providers-toolbar\">\n            <ToolbarItem>\n              <InputGroup>\n                <InputGroupItem isFill>\n                  <TextInput\n                    name={\"inputGroupName\"}\n                    id={\"inputGroupName\"}\n                    data-testid=\"provider-search-input\"\n                    type=\"search\"\n                    aria-label={t(\"search\")}\n                    placeholder={t(\"search\")}\n                    onChange={(_event, value: string) =>\n                      handleInputChange(value)\n                    }\n                    onKeyDown={handleKeyDown}\n                  />\n                </InputGroupItem>\n                <InputGroupItem>\n                  <Button\n                    variant={ButtonVariant.control}\n                    aria-label={t(\"search\")}\n                    onClick={onSearch}\n                  >\n                    <SearchIcon />\n                  </Button>\n                </InputGroupItem>\n              </InputGroup>\n            </ToolbarItem>\n            <ToolbarItem>\n              <Button\n                data-testid=\"addProviderDropdown\"\n                className=\"add-provider-dropdown\"\n                onClick={() => toggleProviderOpen()}\n              >\n                {t(\"addProvider\")}\n              </Button>\n            </ToolbarItem>\n          </ToolbarGroup>\n        </Toolbar>\n        <DraggableTable\n          variant=\"compact\"\n          className=\"kc-draggable-table\"\n          keyField=\"id\"\n          data={\n            filteredComponents.length === 0 ? components : filteredComponents\n          }\n          onDragFinish={async (_, itemOrder) => {\n            const updateAll = components.map((component: ComponentData) => {\n              const componentToSave = { ...component };\n              delete componentToSave.providerDescription;\n\n              return adminClient.components.update(\n                { id: component.id! },\n                {\n                  ...componentToSave,\n                  config: {\n                    priority: [\n                      (\n                        itemOrder.length -\n                        itemOrder.indexOf(component.id!) +\n                        100\n                      ).toString(),\n                    ],\n                  },\n                },\n              );\n            });\n\n            try {\n              await Promise.all(updateAll);\n              refresh();\n              addAlert(t(\"saveProviderListSuccess\"), AlertVariant.success);\n            } catch (error) {\n              addError(\"saveProviderError\", error);\n            }\n          }}\n          columns={[\n            {\n              name: \"name\",\n              displayKey: \"name\",\n              cellRenderer: (component) => (\n                <Link\n                  key={component.name}\n                  data-testid=\"provider-name-link\"\n                  to={toKeyProvider({\n                    realm,\n                    id: component.id!,\n                    providerType: component.providerId as ProviderType,\n                  })}\n                >\n                  {component.name}\n                </Link>\n              ),\n            },\n            {\n              name: \"providerId\",\n              displayKey: \"provider\",\n            },\n            {\n              name: \"providerDescription\",\n              displayKey: \"providerDescription\",\n            },\n          ]}\n          actions={[\n            {\n              title: t(\"delete\"),\n              onClick: (_key, _idx, component) => {\n                setSelectedComponent(component as ComponentRepresentation);\n                toggleDeleteDialog();\n              },\n            },\n          ]}\n        />\n      </PageSection>\n    </>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport { Tab, TabTitleText } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../../components/routable-tabs/RoutableTabs\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { KEY_PROVIDER_TYPE } from \"../../util\";\nimport { KeySubTab, toKeysTab } from \"../routes/KeysTab\";\nimport { KeysListTab } from \"./KeysListTab\";\nimport { KeysProvidersTab } from \"./KeysProvidersTab\";\n\nconst sortByPriority = (components: ComponentRepresentation[]) => {\n  const sortedComponents = [...components].sort((a, b) => {\n    const priorityA = Number(a.config?.priority);\n    const priorityB = Number(b.config?.priority);\n\n    return (\n      (!isNaN(priorityB) ? priorityB : 0) - (!isNaN(priorityA) ? priorityA : 0)\n    );\n  });\n\n  return sortedComponents;\n};\n\nexport const KeysTab = () => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n\n  const { realm: realmName } = useRealm();\n\n  const [realmComponents, setRealmComponents] =\n    useState<ComponentRepresentation[]>();\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setKey(key + 1);\n  };\n\n  useFetch(\n    () =>\n      adminClient.components.find({\n        type: KEY_PROVIDER_TYPE,\n        realm: realmName,\n      }),\n    (components) => setRealmComponents(sortByPriority(components)),\n    [key],\n  );\n\n  const useTab = (tab: KeySubTab) =>\n    useRoutableTab(toKeysTab({ realm: realmName, tab }));\n\n  const listTab = useTab(\"list\");\n  const providersTab = useTab(\"providers\");\n\n  if (!realmComponents) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <RoutableTabs\n      mountOnEnter\n      unmountOnExit\n      defaultLocation={toKeysTab({ realm: realmName, tab: \"list\" })}\n    >\n      <Tab\n        id=\"keysList\"\n        data-testid=\"rs-keys-list-tab\"\n        aria-label=\"keys-list-subtab\"\n        title={<TabTitleText>{t(\"keysList\")}</TabTitleText>}\n        {...listTab}\n      >\n        <KeysListTab realmComponents={realmComponents} />\n      </Tab>\n      <Tab\n        id=\"providers\"\n        data-testid=\"rs-providers-tab\"\n        aria-label=\"rs-providers-tab\"\n        title={<TabTitleText>{t(\"providers\")}</TabTitleText>}\n        {...providersTab}\n      >\n        <KeysProvidersTab realmComponents={realmComponents} refresh={refresh} />\n      </Tab>\n    </RoutableTabs>\n  );\n};\n","import { KeycloakSelect, SelectVariant } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  Chip,\n  ChipGroup,\n  Divider,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  SelectOption,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { pickBy } from \"lodash-es\";\nimport { useMemo, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport DropdownPanel from \"../../components/dropdown-panel/DropdownPanel\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { useWhoAmI } from \"../../context/whoami/WhoAmI\";\nimport { DEFAULT_LOCALE } from \"../../i18n/i18n\";\nimport { localeToDisplayName } from \"../../util\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\n\ntype EffectiveMessageBundlesProps = {\n  defaultSupportedLocales: string[];\n  defaultLocales: string[];\n};\n\ntype EffectiveMessageBundlesSearchForm = {\n  theme: string;\n  themeType: string;\n  locale: string;\n  hasWords: string[];\n};\n\nconst defaultValues: EffectiveMessageBundlesSearchForm = {\n  theme: \"\",\n  themeType: \"\",\n  locale: \"\",\n  hasWords: [],\n};\n\nexport const EffectiveMessageBundles = ({\n  defaultSupportedLocales,\n  defaultLocales,\n}: EffectiveMessageBundlesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const serverInfo = useServerInfo();\n  const { whoAmI } = useWhoAmI();\n  const localeSort = useLocaleSort();\n  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);\n  const [searchPerformed, setSearchPerformed] = useState(false);\n  const [selectThemesOpen, setSelectThemesOpen] = useState(false);\n  const [selectThemeTypeOpen, setSelectThemeTypeOpen] = useState(false);\n  const [selectLanguageOpen, setSelectLanguageOpen] = useState(false);\n  const [activeFilters, setActiveFilters] = useState<\n    Partial<EffectiveMessageBundlesSearchForm>\n  >({});\n  const [key, setKey] = useState(0);\n  const themes = serverInfo.themes;\n\n  const themeTypes = useMemo(() => {\n    if (!themes) {\n      return [];\n    }\n\n    return localeSort(Object.keys(themes), (key) => key);\n  }, [themes]);\n\n  const themeNames = useMemo(() => {\n    if (!themes) {\n      return [];\n    }\n\n    return localeSort(\n      Object.values(themes as Record<string, { name: string }[]>)\n        .flatMap((theme) => theme.map((item) => item.name))\n        .filter((value, index, self) => self.indexOf(value) === index),\n      (name) => name,\n    );\n  }, [themes]);\n\n  const combinedLocales = useMemo(() => {\n    return Array.from(new Set([...defaultLocales, ...defaultSupportedLocales]));\n  }, [defaultLocales, defaultSupportedLocales]);\n\n  const filterLabels: Record<keyof EffectiveMessageBundlesSearchForm, string> =\n    {\n      theme: t(\"theme\"),\n      themeType: t(\"themeType\"),\n      locale: t(\"language\"),\n      hasWords: t(\"hasWords\"),\n    };\n\n  const {\n    getValues,\n    reset,\n    formState: { isDirty, isValid },\n    control,\n  } = useForm<EffectiveMessageBundlesSearchForm>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n\n  const loader = async () => {\n    try {\n      const filter = getValues();\n\n      const requiredKeys = [\"theme\", \"themeType\", \"locale\"];\n      const shouldReturnEmpty = requiredKeys.some(\n        (key) => !filter[key as keyof EffectiveMessageBundlesSearchForm],\n      );\n\n      if (shouldReturnEmpty) {\n        return [];\n      }\n\n      const messages = await adminClient.serverInfo.findEffectiveMessageBundles(\n        {\n          realm,\n          ...filter,\n          locale: filter.locale || DEFAULT_LOCALE,\n          source: true,\n        },\n      );\n\n      const filteredMessages =\n        filter.hasWords.length > 0\n          ? messages.filter((m) =>\n              filter.hasWords.some(\n                (f) => m.value.includes(f) || m.key.includes(f),\n              ),\n            )\n          : messages;\n\n      const sortedMessages = localeSort([...filteredMessages], mapByKey(\"key\"));\n\n      return sortedMessages;\n    } catch {\n      return [];\n    }\n  };\n\n  function submitSearch() {\n    setSearchDropdownOpen(false);\n    commitFilters();\n  }\n\n  function resetSearch() {\n    reset();\n    commitFilters();\n  }\n\n  function removeFilter(key: keyof EffectiveMessageBundlesSearchForm) {\n    const formValues: EffectiveMessageBundlesSearchForm = { ...getValues() };\n    delete formValues[key];\n\n    reset({ ...defaultValues, ...formValues });\n    commitFilters();\n  }\n\n  function removeFilterValue(\n    key: keyof EffectiveMessageBundlesSearchForm,\n    valueToRemove: string,\n  ) {\n    const formValues = getValues();\n    const fieldValue = formValues[key];\n    const newFieldValue = Array.isArray(fieldValue)\n      ? fieldValue.filter((val) => val !== valueToRemove)\n      : fieldValue;\n\n    reset({ ...formValues, [key]: newFieldValue });\n    commitFilters();\n  }\n\n  function commitFilters() {\n    const newFilters: Partial<EffectiveMessageBundlesSearchForm> = pickBy(\n      getValues(),\n      (value) => value !== \"\" || (Array.isArray(value) && value.length > 0),\n    );\n\n    setActiveFilters(newFilters);\n    setKey(key + 1);\n  }\n\n  const effectiveMessageBunldesSearchFormDisplay = () => {\n    return (\n      <Flex\n        direction={{ default: \"column\" }}\n        spaceItems={{ default: \"spaceItemsNone\" }}\n      >\n        <FlexItem>\n          <TextContent>\n            <Text\n              className=\"pf-v5-u-mb-md pf-v5-u-mt-0 pf-v5-u-mr-md\"\n              component={TextVariants.p}\n            >\n              {t(\"effectiveMessageBundlesDescription\")}\n            </Text>\n          </TextContent>\n        </FlexItem>\n        <FlexItem>\n          <DropdownPanel\n            buttonText={t(\"searchForEffectiveMessageBundles\")}\n            setSearchDropdownOpen={setSearchDropdownOpen}\n            searchDropdownOpen={searchDropdownOpen}\n            marginRight=\"2.5rem\"\n            width=\"15vw\"\n          >\n            <Form\n              isHorizontal\n              className=\"pf-v5-u-w-25vw\"\n              data-testid=\"effectiveMessageBundlesSearchForm\"\n              onSubmit={(e) => e.preventDefault()}\n            >\n              <FormGroup label={t(\"theme\")} fieldId=\"kc-theme\" isRequired>\n                <Controller\n                  name=\"theme\"\n                  control={control}\n                  defaultValue=\"\"\n                  rules={{\n                    validate: (value) => (value || \"\").length > 0,\n                  }}\n                  render={({ field }) => (\n                    <KeycloakSelect\n                      data-testid=\"effective_message_bundles-theme-searchField\"\n                      chipGroupProps={{\n                        numChips: 1,\n                        expandedText: t(\"hide\"),\n                        collapsedText: t(\"showRemaining\"),\n                      }}\n                      variant={SelectVariant.single}\n                      typeAheadAriaLabel=\"Select\"\n                      onToggle={(val) => setSelectThemesOpen(val)}\n                      selections={field.value}\n                      onSelect={(selectedValue) => {\n                        field.onChange(selectedValue.toString());\n                        setSelectThemesOpen(false);\n                      }}\n                      onClear={() => {\n                        field.onChange(\"\");\n                      }}\n                      isOpen={selectThemesOpen}\n                      aria-label={t(\"selectTheme\")}\n                      chipGroupComponent={\n                        <ChipGroup>\n                          <Chip\n                            key={field.value}\n                            onClick={(theme) => {\n                              theme.stopPropagation();\n                              field.onChange(\"\");\n                            }}\n                          >\n                            {field.value}\n                          </Chip>\n                        </ChipGroup>\n                      }\n                    >\n                      {[\n                        <SelectOption\n                          key=\"theme_placeholder\"\n                          label={t(\"selectTheme\")}\n                          isDisabled\n                        >\n                          {t(\"selectTheme\")}\n                        </SelectOption>,\n                      ].concat(\n                        themeNames.map((option) => (\n                          <SelectOption key={option} value={option}>\n                            {option}\n                          </SelectOption>\n                        )),\n                      )}\n                    </KeycloakSelect>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"themeType\")}\n                fieldId=\"kc-themeType\"\n                isRequired\n              >\n                <Controller\n                  name=\"themeType\"\n                  control={control}\n                  defaultValue=\"\"\n                  rules={{\n                    validate: (value) => (value || \"\").length > 0,\n                  }}\n                  render={({ field }) => (\n                    <KeycloakSelect\n                      data-testid=\"effective-message-bundles-feature-searchField\"\n                      chipGroupProps={{\n                        numChips: 1,\n                        expandedText: t(\"hide\"),\n                        collapsedText: t(\"showRemaining\"),\n                      }}\n                      variant={SelectVariant.single}\n                      typeAheadAriaLabel=\"Select\"\n                      onToggle={(val) => setSelectThemeTypeOpen(val)}\n                      selections={field.value}\n                      onSelect={(selectedValue) => {\n                        field.onChange(selectedValue.toString());\n                        setSelectThemeTypeOpen(false);\n                      }}\n                      onClear={() => {\n                        field.onChange(\"\");\n                      }}\n                      isOpen={selectThemeTypeOpen}\n                      aria-label={t(\"selectThemeType\")}\n                      chipGroupComponent={\n                        <ChipGroup>\n                          <Chip\n                            key={field.value}\n                            onClick={(themeType) => {\n                              themeType.stopPropagation();\n                              field.onChange(\"\");\n                            }}\n                          >\n                            {field.value}\n                          </Chip>\n                        </ChipGroup>\n                      }\n                    >\n                      {[\n                        <SelectOption\n                          key=\"themeType_placeholder\"\n                          label={t(\"selectThemeType\")}\n                          isDisabled\n                        >\n                          {t(\"selectThemeType\")}\n                        </SelectOption>,\n                      ].concat(\n                        themeTypes.map((option) => (\n                          <SelectOption key={option} value={option}>\n                            {option}\n                          </SelectOption>\n                        )),\n                      )}\n                    </KeycloakSelect>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup label={t(\"language\")} fieldId=\"kc-language\" isRequired>\n                <Controller\n                  name=\"locale\"\n                  control={control}\n                  defaultValue=\"\"\n                  rules={{\n                    validate: (value) => (value || \"\").length > 0,\n                  }}\n                  render={({ field }) => (\n                    <KeycloakSelect\n                      data-testid=\"effective-message-bundles-language-searchField\"\n                      chipGroupProps={{\n                        numChips: 1,\n                        expandedText: t(\"hide\"),\n                        collapsedText: t(\"showRemaining\"),\n                      }}\n                      variant={SelectVariant.single}\n                      typeAheadAriaLabel=\"Select\"\n                      onToggle={(val) => setSelectLanguageOpen(val)}\n                      selections={field.value}\n                      onSelect={(selectedValue) => {\n                        field.onChange(selectedValue.toString());\n                        setSelectLanguageOpen(false);\n                      }}\n                      onClear={() => {\n                        field.onChange(\"\");\n                      }}\n                      isOpen={selectLanguageOpen}\n                      aria-label={t(\"selectLanguage\")}\n                      chipGroupComponent={\n                        <ChipGroup>\n                          {field.value ? (\n                            <Chip\n                              key={field.value}\n                              onClick={(language) => {\n                                language.stopPropagation();\n                                field.onChange(\"\");\n                              }}\n                            >\n                              {localeToDisplayName(\n                                field.value,\n                                whoAmI.getLocale(),\n                              )}\n                            </Chip>\n                          ) : null}\n                        </ChipGroup>\n                      }\n                    >\n                      {[\n                        <SelectOption\n                          key=\"language_placeholder\"\n                          label={t(\"selectLanguage\")}\n                          isDisabled\n                        >\n                          {t(\"selectLanguage\")}\n                        </SelectOption>,\n                      ].concat(\n                        combinedLocales.map((option) => (\n                          <SelectOption key={option} value={option}>\n                            {localeToDisplayName(option, whoAmI.getLocale())}\n                          </SelectOption>\n                        )),\n                      )}\n                    </KeycloakSelect>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup label={t(\"hasWords\")} fieldId=\"kc-hasWords\">\n                <Controller\n                  name=\"hasWords\"\n                  control={control}\n                  render={({ field }) => (\n                    <div>\n                      <TextInput\n                        id=\"kc-hasWords\"\n                        data-testid=\"effective-message-bundles-hasWords-searchField\"\n                        value={field.value.join(\" \")}\n                        onChange={(e) => {\n                          const target = e.target as HTMLInputElement;\n                          const input = target.value;\n\n                          if (input.trim().length === 0) {\n                            field.onChange([]);\n                          } else {\n                            const words = input\n                              .split(\" \")\n                              .map((word) => word.trim());\n                            field.onChange(words);\n                          }\n                        }}\n                      />\n                      <ChipGroup>\n                        {field.value.map((word, index) => (\n                          <Chip\n                            key={index}\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              const newWords = field.value.filter(\n                                (_, i) => i !== index,\n                              );\n                              field.onChange(newWords);\n                            }}\n                          >\n                            {word}\n                          </Chip>\n                        ))}\n                      </ChipGroup>\n                    </div>\n                  )}\n                />\n              </FormGroup>\n              <ActionGroup className=\"pf-v5-u-mt-sm\">\n                <Button\n                  variant={\"primary\"}\n                  onClick={() => {\n                    setSearchPerformed(true);\n                    submitSearch();\n                  }}\n                  data-testid=\"search-effective-message-bundles-btn\"\n                  isDisabled={!isValid}\n                >\n                  {t(\"search\")}\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={resetSearch}\n                  data-testid=\"reset-search-effective-message-bundles-btn\"\n                  isDisabled={!isDirty}\n                >\n                  {t(\"reset\")}\n                </Button>\n              </ActionGroup>\n            </Form>\n          </DropdownPanel>\n        </FlexItem>\n        <FlexItem>\n          {Object.entries(activeFilters).length > 0 && (\n            <>\n              {Object.entries(activeFilters).map((filter) => {\n                const [key, value] = filter as [\n                  keyof EffectiveMessageBundlesSearchForm,\n                  string | string[],\n                ];\n                return (\n                  <ChipGroup\n                    className=\"pf-v5-u-mt-md pf-v5-u-mr-md\"\n                    key={key}\n                    categoryName={filterLabels[key]}\n                    isClosable\n                    onClick={() => removeFilter(key)}\n                  >\n                    {typeof value === \"string\" ? (\n                      <Chip isReadOnly>\n                        {key === \"locale\"\n                          ? localeToDisplayName(\n                              value,\n                              whoAmI.getLocale(),\n                            )?.toLowerCase()\n                          : value}\n                      </Chip>\n                    ) : (\n                      value.map((entry) => (\n                        <Chip\n                          key={entry}\n                          onClick={() => removeFilterValue(key, entry)}\n                        >\n                          {entry}\n                        </Chip>\n                      ))\n                    )}\n                  </ChipGroup>\n                );\n              })}\n            </>\n          )}\n        </FlexItem>\n      </Flex>\n    );\n  };\n\n  if (!searchPerformed) {\n    return (\n      <>\n        <div className=\"pf-v5-u-py-lg pf-v5-u-pl-md\">\n          {effectiveMessageBunldesSearchFormDisplay()}\n        </div>\n        <Divider />\n        <ListEmptyState\n          message={t(\"emptyEffectiveMessageBundles\")}\n          instructions={t(\"emptyEffectiveMessageBundlesInstructions\")}\n          isSearchVariant\n        />\n      </>\n    );\n  }\n\n  return (\n    <KeycloakDataTable\n      key={key}\n      loader={loader}\n      ariaLabelKey=\"effectiveMessageBundles\"\n      toolbarItem={effectiveMessageBunldesSearchFormDisplay()}\n      columns={[\n        {\n          name: \"key\",\n          displayKey: \"key\",\n        },\n        {\n          name: \"value\",\n          displayKey: \"value\",\n        },\n      ]}\n      emptyState={\n        <ListEmptyState\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      }\n      isSearching={Object.keys(activeFilters).length > 0}\n    />\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { FormProvider, SubmitHandler, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\n\ntype AddTranslationModalProps = {\n  id?: string;\n  form: UseFormReturn<TranslationForm>;\n  save: SubmitHandler<TranslationForm>;\n  handleModalToggle: () => void;\n};\n\nexport type TranslationForm = {\n  key: string;\n  value: string;\n  translation: KeyValueType;\n};\n\nexport const AddTranslationModal = ({\n  handleModalToggle,\n  save,\n  form,\n}: AddTranslationModalProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"addTranslation\")}\n      isOpen\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          data-testid=\"add-translation-confirm-button\"\n          key=\"confirm\"\n          variant=\"primary\"\n          type=\"submit\"\n          form=\"translation-form\"\n        >\n          {t(\"create\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            handleModalToggle();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form\n        id=\"translation-form\"\n        isHorizontal\n        onSubmit={form.handleSubmit(save)}\n      >\n        <FormProvider {...form}>\n          <TextControl\n            name=\"key\"\n            label={t(\"key\")}\n            autoFocus\n            rules={{\n              required: t(\"required\"),\n            }}\n          />\n          <TextControl\n            name=\"value\"\n            label={t(\"value\")}\n            rules={{\n              required: t(\"required\"),\n            }}\n          />\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  KeycloakSelect,\n  ListEmptyState,\n  PaginatingTableToolbar,\n  SelectVariant,\n  useAlerts,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  Form,\n  FormGroup,\n  MenuToggle,\n  SelectGroup,\n  SelectOption,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  CheckIcon,\n  EllipsisVIcon,\n  PencilAltIcon,\n  SearchIcon,\n  TimesIcon,\n} from \"@patternfly/react-icons\";\nimport {\n  ActionsColumn,\n  IRow,\n  IRowCell,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { cloneDeep, isEqual, uniqWith } from \"lodash-es\";\nimport { ChangeEvent, useEffect, useState, type FormEvent } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeyValueType } from \"../../components/key-value-form/key-value-convert\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useWhoAmI } from \"../../context/whoami/WhoAmI\";\nimport { DEFAULT_LOCALE, i18n } from \"../../i18n/i18n\";\nimport { localeToDisplayName } from \"../../util\";\nimport { AddTranslationModal } from \"../AddTranslationModal\";\n\ntype RealmOverridesProps = {\n  internationalizationEnabled: boolean;\n  watchSupportedLocales: string[];\n  realm: RealmRepresentation;\n  tableData: Record<string, string>[] | undefined;\n};\n\ntype EditStatesType = { [key: number]: boolean };\n\nexport type TranslationForm = {\n  key: string;\n  value: string;\n  translation: KeyValueType;\n};\n\nexport enum RowEditAction {\n  Save = \"save\",\n  Cancel = \"cancel\",\n  Edit = \"edit\",\n  Delete = \"delete\",\n}\n\nexport const RealmOverrides = ({\n  internationalizationEnabled,\n  watchSupportedLocales,\n  realm,\n  tableData,\n}: RealmOverridesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [addTranslationModalOpen, setAddTranslationModalOpen] = useState(false);\n  const [filterDropdownOpen, setFilterDropdownOpen] = useState(false);\n  const [translations, setTranslations] = useState<[string, string][]>([]);\n  const [selectMenuLocale, setSelectMenuLocale] = useState(DEFAULT_LOCALE);\n  const [kebabOpen, setKebabOpen] = useState(false);\n  const { getValues, handleSubmit } = useForm();\n  const [selectMenuValueSelected, setSelectMenuValueSelected] = useState(false);\n  const [tableRows, setTableRows] = useState<IRow[]>([]);\n  const [tableKey, setTableKey] = useState(0);\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [filter, setFilter] = useState(\"\");\n  const translationForm = useForm<TranslationForm>({ mode: \"onChange\" });\n  const { addAlert, addError } = useAlerts();\n  const { realm: currentRealm } = useRealm();\n  const { whoAmI } = useWhoAmI();\n  const [selectedRowKeys, setSelectedRowKeys] = useState<string[]>([]);\n  const [areAllRowsSelected, setAreAllRowsSelected] = useState(false);\n  const [editStates, setEditStates] = useState<EditStatesType>({});\n  const [formValue, setFormValue] = useState(\"\");\n  const refreshTable = () => {\n    setTableKey(tableKey + 1);\n  };\n\n  useEffect(() => {\n    const fetchLocalizationTexts = async () => {\n      try {\n        let result = await adminClient.realms.getRealmLocalizationTexts({\n          first,\n          max,\n          realm: realm.realm!,\n          selectedLocale:\n            selectMenuLocale ||\n            getValues(\"defaultLocale\") ||\n            whoAmI.getLocale(),\n        });\n\n        setTranslations(Object.entries(result));\n\n        if (filter) {\n          const searchInTranslations = (idx: number) => {\n            return Object.entries(result).filter((i) =>\n              i[idx].includes(filter),\n            );\n          };\n\n          const filtered = uniqWith(\n            searchInTranslations(0).concat(searchInTranslations(1)),\n            isEqual,\n          );\n\n          result = Object.fromEntries(filtered);\n        }\n\n        return Object.entries(result).slice(first, first + max);\n      } catch {\n        return [];\n      }\n    };\n\n    fetchLocalizationTexts().then((translations) => {\n      const updatedRows: IRow[] = translations.map(\n        (translation): IRow => ({\n          rowEditBtnAriaLabel: () =>\n            t(\"rowEditBtnAriaLabel\", {\n              translation: translation[1],\n            }),\n          rowSaveBtnAriaLabel: () =>\n            t(\"rowSaveBtnAriaLabel\", {\n              translation: translation[1],\n            }),\n          rowCancelBtnAriaLabel: () =>\n            t(\"rowCancelBtnAriaLabel\", {\n              translation: translation[1],\n            }),\n          cells: [\n            {\n              title: translation[0],\n              props: {\n                value: translation[0],\n              },\n            },\n            {\n              title: translation[1],\n              props: {\n                value: translation[1],\n              },\n            },\n          ],\n        }),\n      );\n\n      setTableRows(updatedRows);\n    });\n  }, [tableKey, tableData, first, max, filter]);\n\n  const handleModalToggle = () => {\n    setAddTranslationModalOpen(!addTranslationModalOpen);\n  };\n\n  const options = [\n    <SelectGroup label={t(\"defaultLocale\")} key=\"group1\">\n      <SelectOption key={DEFAULT_LOCALE} value={DEFAULT_LOCALE}>\n        {localeToDisplayName(DEFAULT_LOCALE, whoAmI.getDisplayName())}\n      </SelectOption>\n    </SelectGroup>,\n    <Divider key=\"divider\" />,\n    <SelectGroup label={t(\"supportedLocales\")} key=\"group2\">\n      {watchSupportedLocales.map((locale) => (\n        <SelectOption key={locale} value={locale}>\n          {localeToDisplayName(locale, whoAmI.getLocale())}\n        </SelectOption>\n      ))}\n    </SelectGroup>,\n  ];\n\n  const addKeyValue = async (pair: KeyValueType): Promise<void> => {\n    try {\n      await adminClient.realms.addLocalization(\n        {\n          realm: currentRealm!,\n          selectedLocale:\n            selectMenuLocale || getValues(\"defaultLocale\") || DEFAULT_LOCALE,\n          key: pair.key,\n        },\n        pair.value,\n      );\n\n      adminClient.setConfig({\n        realmName: currentRealm!,\n      });\n      refreshTable();\n      translationForm.setValue(\"key\", \"\");\n      translationForm.setValue(\"value\", \"\");\n      i18n.reloadResources();\n\n      addAlert(t(\"addTranslationSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"addTranslationError\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteConfirmTranslationTitle\",\n    messageKey: t(\"translationDeleteConfirmDialog\", {\n      count: selectedRowKeys.length,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onCancel: () => {\n      setSelectedRowKeys([]);\n      setAreAllRowsSelected(false);\n    },\n    onConfirm: async () => {\n      try {\n        for (const key of selectedRowKeys) {\n          delete (\n            i18n.store.data[whoAmI.getLocale()][currentRealm] as Record<\n              string,\n              string\n            >\n          )[key];\n          await adminClient.realms.deleteRealmLocalizationTexts({\n            realm: currentRealm!,\n            selectedLocale: selectMenuLocale,\n            key: key,\n          });\n        }\n        setAreAllRowsSelected(false);\n        setSelectedRowKeys([]);\n        refreshTable();\n\n        addAlert(t(\"deleteAllTranslationsSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"deleteAllTranslationsError\", error);\n      }\n    },\n  });\n\n  const handleRowSelect = (\n    event: ChangeEvent<HTMLInputElement>,\n    rowIndex: number,\n  ) => {\n    const selectedKey = (tableRows[rowIndex].cells?.[0] as IRowCell).props\n      .value;\n    if (event.target.checked) {\n      setSelectedRowKeys((prevSelected) => [...prevSelected, selectedKey]);\n    } else {\n      setSelectedRowKeys((prevSelected) =>\n        prevSelected.filter((key) => key !== selectedKey),\n      );\n    }\n\n    setAreAllRowsSelected(\n      tableRows.length ===\n        selectedRowKeys.length + (event.target.checked ? 1 : -1),\n    );\n  };\n\n  const toggleSelectAllRows = () => {\n    if (areAllRowsSelected) {\n      setSelectedRowKeys([]);\n    } else {\n      setSelectedRowKeys(\n        tableRows.map((row) => (row.cells?.[0] as IRowCell).props.value),\n      );\n    }\n    setAreAllRowsSelected(!areAllRowsSelected);\n  };\n\n  const isRowSelected = (key: any) => {\n    return selectedRowKeys.includes(key);\n  };\n\n  const onSubmit = async (inputValue: string, rowIndex: number) => {\n    const newRows = cloneDeep(tableRows);\n\n    const newRow = cloneDeep(newRows[rowIndex]);\n    (newRow.cells?.[1] as IRowCell).props.value = inputValue;\n    newRows[rowIndex] = newRow;\n\n    try {\n      const key = (newRow.cells?.[0] as IRowCell).props.value;\n      const value = (newRow.cells?.[1] as IRowCell).props.value;\n\n      await adminClient.realms.addLocalization(\n        {\n          realm: realm.realm!,\n          selectedLocale:\n            selectMenuLocale || getValues(\"defaultLocale\") || DEFAULT_LOCALE,\n          key,\n        },\n        value,\n      );\n      i18n.reloadResources();\n\n      addAlert(t(\"updateTranslationSuccess\"), AlertVariant.success);\n      setTableRows(newRows);\n    } catch (error) {\n      addError(\"updateTranslationError\", error);\n    }\n\n    setEditStates((prevEditStates) => ({\n      ...prevEditStates,\n      [rowIndex]: false,\n    }));\n  };\n\n  return (\n    <>\n      <DeleteConfirm />\n      {addTranslationModalOpen && (\n        <AddTranslationModal\n          handleModalToggle={handleModalToggle}\n          save={(pair: any) => {\n            addKeyValue(pair);\n            handleModalToggle();\n          }}\n          form={translationForm}\n        />\n      )}\n      <TextContent>\n        <Text\n          className=\"pf-v5-u-mt-lg pf-v5-u-ml-md\"\n          component={TextVariants.p}\n        >\n          {t(\"realmOverridesDescription\")}\n        </Text>\n      </TextContent>\n      <PaginatingTableToolbar\n        count={translations.length}\n        first={first}\n        max={max}\n        onNextClick={setFirst}\n        onPreviousClick={setFirst}\n        onPerPageSelect={(first, max) => {\n          setFirst(first);\n          setMax(max);\n        }}\n        inputGroupName={\"search\"}\n        inputGroupOnEnter={(search) => {\n          setFilter(search);\n          setFirst(0);\n          setMax(10);\n        }}\n        inputGroupPlaceholder={t(\"searchForTranslation\")}\n        toolbarItem={\n          <>\n            <Button\n              data-testid=\"add-translationBtn\"\n              onClick={() => {\n                setAddTranslationModalOpen(true);\n                setAreAllRowsSelected(false);\n                setSelectedRowKeys([]);\n              }}\n            >\n              {t(\"addTranslation\")}\n            </Button>\n            <ToolbarItem>\n              <Dropdown\n                onOpenChange={(isOpen) => setKebabOpen(isOpen)}\n                toggle={(ref) => (\n                  <MenuToggle\n                    ref={ref}\n                    onClick={() => setKebabOpen(!kebabOpen)}\n                    variant=\"plain\"\n                    isExpanded={kebabOpen}\n                    data-testid=\"toolbar-deleteBtn\"\n                    aria-label=\"kebab\"\n                  >\n                    <EllipsisVIcon />\n                  </MenuToggle>\n                )}\n                isOpen={kebabOpen}\n                isPlain\n              >\n                <DropdownList>\n                  <DropdownItem\n                    key=\"action\"\n                    component=\"button\"\n                    data-testid=\"delete-selected-TranslationBtn\"\n                    isDisabled={\n                      translations.length === 0 || selectedRowKeys.length === 0\n                    }\n                    onClick={() => {\n                      toggleDeleteDialog();\n                      setKebabOpen(false);\n                    }}\n                  >\n                    {t(\"delete\")}\n                  </DropdownItem>\n                </DropdownList>\n              </Dropdown>\n            </ToolbarItem>\n          </>\n        }\n        searchTypeComponent={\n          <ToolbarItem>\n            <KeycloakSelect\n              width={180}\n              isOpen={filterDropdownOpen}\n              className=\"kc-filter-by-locale-select\"\n              variant={SelectVariant.single}\n              isDisabled={!internationalizationEnabled}\n              onToggle={(isExpanded) => setFilterDropdownOpen(isExpanded)}\n              onSelect={(value) => {\n                setSelectMenuLocale(value.toString());\n                setSelectMenuValueSelected(true);\n                refreshTable();\n                setFilterDropdownOpen(false);\n              }}\n              selections={\n                selectMenuValueSelected\n                  ? localeToDisplayName(selectMenuLocale, whoAmI.getLocale())\n                  : realm.defaultLocale !== \"\"\n                    ? localeToDisplayName(DEFAULT_LOCALE, whoAmI.getLocale())\n                    : t(\"placeholderText\")\n              }\n            >\n              {options}\n            </KeycloakSelect>\n          </ToolbarItem>\n        }\n      >\n        {translations.length === 0 && !filter && (\n          <ListEmptyState\n            hasIcon\n            message={t(\"noTranslations\")}\n            instructions={t(\"noTranslationsInstructions\")}\n            onPrimaryAction={handleModalToggle}\n          />\n        )}\n        {translations.length === 0 && filter && (\n          <ListEmptyState\n            hasIcon\n            icon={SearchIcon}\n            isSearchVariant\n            message={t(\"noSearchResults\")}\n            instructions={t(\"noRealmOverridesSearchResultsInstructions\")}\n          />\n        )}\n        {translations.length !== 0 && (\n          <Table\n            aria-label={t(\"editableRowsTable\")}\n            data-testid=\"editable-rows-table\"\n          >\n            <Thead>\n              <Tr>\n                <Th className=\"pf-v5-u-px-lg\">\n                  <input\n                    type=\"checkbox\"\n                    aria-label={t(\"selectAll\")}\n                    checked={areAllRowsSelected}\n                    onChange={toggleSelectAllRows}\n                    data-testid=\"selectAll\"\n                  />\n                </Th>\n                <Th className=\"pf-v5-u-py-lg\">{t(\"key\")}</Th>\n                <Th className=\"pf-v5-u-py-lg\">{t(\"value\")}</Th>\n                <Th aria-hidden=\"true\" />\n              </Tr>\n            </Thead>\n            <Tbody>\n              {tableRows.map((row, rowIndex) => (\n                <Tr key={(row.cells?.[0] as IRowCell).props.value}>\n                  <Td\n                    className=\"pf-v5-u-px-lg\"\n                    select={{\n                      rowIndex,\n                      onSelect: (event) =>\n                        handleRowSelect(\n                          event as ChangeEvent<HTMLInputElement>,\n                          rowIndex,\n                        ),\n                      isSelected: isRowSelected(\n                        (row.cells?.[0] as IRowCell).props.value,\n                      ),\n                    }}\n                  />\n                  <Td className=\"pf-m-sm pf-v5-u-px-sm\" dataLabel={t(\"key\")}>\n                    {(row.cells?.[0] as IRowCell).props.value}\n                  </Td>\n                  <Td\n                    className=\"pf-m-sm pf-v5-u-px-sm\"\n                    dataLabel={t(\"value\")}\n                    key={rowIndex}\n                  >\n                    <Form\n                      isHorizontal\n                      className=\"kc-form-translationValue\"\n                      onSubmit={handleSubmit(() => {\n                        onSubmit(formValue, rowIndex);\n                      })}\n                    >\n                      <FormGroup\n                        fieldId=\"kc-translationValue\"\n                        className=\"pf-v5-u-display-inline-block\"\n                      >\n                        {editStates[rowIndex] ? (\n                          <>\n                            <TextInput\n                              aria-label={t(\"editTranslationValue\")}\n                              type=\"text\"\n                              className=\"pf-v5-u-w-initial\"\n                              data-testid={`editTranslationValueInput-${rowIndex}`}\n                              value={formValue}\n                              onChange={(\n                                event: FormEvent<HTMLInputElement>,\n                                value: string,\n                              ) => {\n                                setFormValue(value);\n                              }}\n                              key={`edit-input-${rowIndex}`}\n                            />\n                            <Button\n                              variant=\"link\"\n                              className=\"pf-m-plain\"\n                              data-testid={`editTranslationAcceptBtn-${rowIndex}`}\n                              type=\"submit\"\n                              aria-label={t(\"acceptBtn\")}\n                              icon={<CheckIcon />}\n                            />\n                            <Button\n                              variant=\"link\"\n                              className=\"pf-m-plain\"\n                              data-testid={`editTranslationCancelBtn-${rowIndex}`}\n                              icon={<TimesIcon />}\n                              aria-label={t(\"cancelBtn\")}\n                              onClick={() => {\n                                setEditStates((prevEditStates) => ({\n                                  ...prevEditStates,\n                                  [rowIndex]: false,\n                                }));\n                              }}\n                            />\n                          </>\n                        ) : (\n                          <>\n                            <span>\n                              {(row.cells?.[1] as IRowCell).props.value}\n                            </span>\n                            <Button\n                              onClick={() => {\n                                const currentValue = (\n                                  tableRows[rowIndex].cells?.[1] as IRowCell\n                                ).props.value;\n                                setFormValue(currentValue);\n                                setEditStates((prevState) => ({\n                                  ...prevState,\n                                  [rowIndex]: true,\n                                }));\n                              }}\n                              key={`edit-button-${rowIndex}`}\n                              aria-label={t(\"editBtn\")}\n                              variant=\"link\"\n                              className=\"pf-m-plain\"\n                              data-testid={`editTranslationBtn-${rowIndex}`}\n                            >\n                              <PencilAltIcon />\n                            </Button>\n                          </>\n                        )}\n                      </FormGroup>\n                    </Form>\n                  </Td>\n                  <Td isActionCell>\n                    <ActionsColumn\n                      items={[\n                        {\n                          title: t(\"delete\"),\n                          onClick: () => {\n                            setSelectedRowKeys([\n                              (row.cells?.[0] as IRowCell).props.value,\n                            ]);\n\n                            if (translations.length === 1) {\n                              setAreAllRowsSelected(true);\n                            }\n\n                            toggleDeleteDialog();\n                            setKebabOpen(false);\n                          },\n                        },\n                      ]}\n                    />\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n        )}\n      </PaginatingTableToolbar>\n    </>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { SelectControl, SwitchControl } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  Tab,\n  TabTitleText,\n  Tabs,\n} from \"@patternfly/react-core\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { useWhoAmI } from \"../../context/whoami/WhoAmI\";\nimport { DEFAULT_LOCALE } from \"../../i18n/i18n\";\nimport { convertToFormValues, localeToDisplayName } from \"../../util\";\nimport { EffectiveMessageBundles } from \"./EffectiveMessageBundles\";\nimport { RealmOverrides } from \"./RealmOverrides\";\n\ntype LocalizationTabProps = {\n  save: (realm: RealmRepresentation) => void;\n  realm: RealmRepresentation;\n  tableData: Record<string, string>[] | undefined;\n};\n\nexport const LocalizationTab = ({\n  save,\n  realm,\n  tableData,\n}: LocalizationTabProps) => {\n  const { t } = useTranslation();\n  const { whoAmI } = useWhoAmI();\n\n  const [activeTab, setActiveTab] = useState(0);\n  const form = useForm();\n  const { setValue, control, handleSubmit, formState } = form;\n\n  const defaultSupportedLocales = realm.supportedLocales?.length\n    ? realm.supportedLocales\n    : [DEFAULT_LOCALE];\n\n  const themeTypes = useServerInfo().themes!;\n  const allLocales = useMemo(() => {\n    const locales = Object.values(themeTypes).flatMap((theme) =>\n      theme.flatMap(({ locales }) => (locales ? locales : [])),\n    );\n    return Array.from(new Set(locales));\n  }, [themeTypes]);\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n    setValue(\"supportedLocales\", defaultSupportedLocales);\n  };\n\n  useEffect(setupForm, []);\n\n  const watchSupportedLocales: string[] = useWatch({\n    control,\n    name: \"supportedLocales\",\n    defaultValue: defaultSupportedLocales,\n  });\n\n  const internationalizationEnabled = useWatch({\n    control,\n    name: \"internationalizationEnabled\",\n    defaultValue: realm.internationalizationEnabled,\n  });\n\n  const defaultLocales = useWatch({\n    name: \"defaultLocale\",\n    control,\n    defaultValue: realm.defaultLocale ? [realm.defaultLocale] : [],\n  });\n\n  return (\n    <Tabs\n      activeKey={activeTab}\n      onSelect={(_, key) => setActiveTab(key as number)}\n    >\n      <Tab\n        id=\"locales\"\n        eventKey={0}\n        title={<TabTitleText>{t(\"locales\")}</TabTitleText>}\n        data-testid=\"rs-localization-locales-tab\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-v5-u-mt-lg pf-v5-u-ml-md\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormProvider {...form}>\n            <SwitchControl\n              name=\"internationalizationEnabled\"\n              label={t(\"internationalization\")}\n              labelIcon={t(\"internationalizationHelp\")}\n              labelOn={t(\"enabled\")}\n              labelOff={t(\"disabled\")}\n              aria-label={t(\"internationalization\")}\n            />\n            {internationalizationEnabled && (\n              <>\n                <SelectControl\n                  name=\"supportedLocales\"\n                  isScrollable\n                  label={t(\"supportedLocales\")}\n                  controller={{\n                    defaultValue: defaultSupportedLocales,\n                  }}\n                  variant=\"typeaheadMulti\"\n                  placeholderText={t(\"selectLocales\")}\n                  options={allLocales.map((l) => ({\n                    key: l,\n                    value: localeToDisplayName(l, whoAmI.getLocale()) || l,\n                  }))}\n                />\n                <SelectControl\n                  name=\"defaultLocale\"\n                  label={t(\"defaultLocale\")}\n                  controller={{\n                    defaultValue: DEFAULT_LOCALE,\n                  }}\n                  data-testid=\"select-default-locale\"\n                  options={watchSupportedLocales.map((l) => ({\n                    key: l,\n                    value: localeToDisplayName(l, whoAmI.getLocale()) || l,\n                  }))}\n                />\n              </>\n            )}\n          </FormProvider>\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              isDisabled={!formState.isDirty}\n              type=\"submit\"\n              data-testid=\"localization-tab-save\"\n            >\n              {t(\"save\")}\n            </Button>\n            <Button variant=\"link\" onClick={setupForm}>\n              {t(\"revert\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      </Tab>\n      <Tab\n        id=\"realm-overrides\"\n        eventKey={1}\n        title={<TabTitleText>{t(\"realmOverrides\")} </TabTitleText>}\n        data-testid=\"rs-localization-realm-overrides-tab\"\n      >\n        <RealmOverrides\n          internationalizationEnabled={internationalizationEnabled}\n          watchSupportedLocales={watchSupportedLocales}\n          realm={realm}\n          tableData={tableData}\n        />\n      </Tab>\n      <Tab\n        id=\"effective-message-bundles\"\n        eventKey={2}\n        title={<TabTitleText>{t(\"effectiveMessageBundles\")}</TabTitleText>}\n        data-testid=\"rs-localization-effective-message-bundles-tab\"\n      >\n        <EffectiveMessageBundles\n          defaultSupportedLocales={defaultSupportedLocales}\n          defaultLocales={defaultLocales}\n        />\n      </Tab>\n    </Tabs>\n  );\n};\n","import { Trans, useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { FormattedLink } from \"../../components/external-link/FormattedLink\";\n\ntype HelpLinkTextInputProps = {\n  fieldName: string;\n  url: string;\n};\n\nexport const HelpLinkTextInput = ({\n  fieldName,\n  url,\n}: HelpLinkTextInputProps) => {\n  const { t } = useTranslation();\n  const name = fieldName.substring(fieldName.indexOf(\".\") + 1);\n  return (\n    <TextControl\n      name={fieldName}\n      label={t(name)}\n      labelIcon={\n        <Trans i18nKey={`${name}Help`}>\n          Default value prevents pages from being included\n          <FormattedLink href={url} title={t(\"learnMore\")} />\n        </Trans>\n      }\n    />\n  );\n};\n","import { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { ActionGroup, Button } from \"@patternfly/react-core\";\n\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpLinkTextInput } from \"./HelpLinkTextInput\";\nimport { convertToFormValues } from \"../../util\";\n\nimport \"./security-defences.css\";\n\ntype HeadersFormProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const HeadersForm = ({ realm, save }: HeadersFormProps) => {\n  const { t } = useTranslation();\n  const form = useForm();\n  const {\n    setValue,\n    formState: { isDirty },\n    handleSubmit,\n  } = form;\n\n  const setupForm = () => convertToFormValues(realm, setValue);\n  useEffect(setupForm, []);\n\n  return (\n    <FormProvider {...form}>\n      <FormAccess\n        isHorizontal\n        role=\"manage-realm\"\n        className=\"keycloak__security-defences__form\"\n        onSubmit={handleSubmit(save)}\n      >\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xFrameOptions\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.contentSecurityPolicy\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.contentSecurityPolicyReportOnly\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xContentTypeOptions\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xRobotsTag\"\n          url=\"https://developers.google.com/search/docs/advanced/robots/robots_meta_tag\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xXSSProtection\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.strictTransportSecurity\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.referrerPolicy\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\"\n        />\n\n        <ActionGroup>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"headers-form-tab-save\"\n            isDisabled={!isDirty}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button variant=\"link\" onClick={setupForm}>\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </FormProvider>\n  );\n};\n","import { CSSProperties } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { TimeSelectorControl } from \"../../components/time-selector/TimeSelectorControl\";\n\nexport const Time = ({\n  name,\n  style,\n}: {\n  name: string;\n  style?: CSSProperties;\n}) => {\n  const { t } = useTranslation();\n  return (\n    <TimeSelectorControl\n      name={name}\n      style={style}\n      label={t(name)}\n      labelIcon={t(`${name}Help`)}\n      controller={{\n        defaultValue: \"\",\n        rules: { required: t(\"required\") },\n      }}\n    />\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  HelpItem,\n  KeycloakSelect,\n  NumberControl,\n  SelectVariant,\n  SelectControl,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { convertToFormValues } from \"../../util\";\nimport { Time } from \"./Time\";\n\ntype BruteForceDetectionProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const BruteForceDetection = ({\n  realm,\n  save,\n}: BruteForceDetectionProps) => {\n  const { t } = useTranslation();\n  const form = useForm();\n  const {\n    setValue,\n    handleSubmit,\n    formState: { isDirty },\n  } = form;\n\n  const [isBruteForceModeOpen, setIsBruteForceModeOpen] = useState(false);\n  const [isBruteForceModeUpdated, setIsBruteForceModeUpdated] = useState(false);\n\n  enum BruteForceMode {\n    Disabled = \"Disabled\",\n    PermanentLockout = \"PermanentLockout\",\n    TemporaryLockout = \"TemporaryLockout\",\n    PermanentAfterTemporaryLockout = \"PermanentAfterTemporaryLockout\",\n  }\n\n  const bruteForceModes = [\n    BruteForceMode.Disabled,\n    BruteForceMode.PermanentLockout,\n    BruteForceMode.TemporaryLockout,\n    BruteForceMode.PermanentAfterTemporaryLockout,\n  ];\n\n  const bruteForceStrategyTypes = [\"MULTIPLE\", \"LINEAR\"];\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n    setIsBruteForceModeUpdated(false);\n  };\n  useEffect(setupForm, []);\n\n  const bruteForceMode = (() => {\n    if (!form.getValues(\"bruteForceProtected\")) {\n      return BruteForceMode.Disabled;\n    }\n    if (!form.getValues(\"permanentLockout\")) {\n      return BruteForceMode.TemporaryLockout;\n    }\n    return form.getValues(\"maxTemporaryLockouts\") == 0\n      ? BruteForceMode.PermanentLockout\n      : BruteForceMode.PermanentAfterTemporaryLockout;\n  })();\n\n  return (\n    <FormProvider {...form}>\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(save)}\n      >\n        <FormGroup\n          label={t(\"bruteForceMode\")}\n          fieldId=\"kc-brute-force-mode\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"bruteForceModeHelpText\")}\n              fieldLabelId=\"bruteForceMode\"\n            />\n          }\n        >\n          <KeycloakSelect\n            toggleId=\"kc-brute-force-mode\"\n            onToggle={() => setIsBruteForceModeOpen(!isBruteForceModeOpen)}\n            onSelect={(value) => {\n              switch (value as BruteForceMode) {\n                case BruteForceMode.Disabled:\n                  form.setValue(\"bruteForceProtected\", false);\n                  form.setValue(\"permanentLockout\", false);\n                  form.setValue(\"maxTemporaryLockouts\", 0);\n                  break;\n                case BruteForceMode.TemporaryLockout:\n                  form.setValue(\"bruteForceProtected\", true);\n                  form.setValue(\"permanentLockout\", false);\n                  form.setValue(\"maxTemporaryLockouts\", 0);\n                  break;\n                case BruteForceMode.PermanentLockout:\n                  form.setValue(\"bruteForceProtected\", true);\n                  form.setValue(\"permanentLockout\", true);\n                  form.setValue(\"maxTemporaryLockouts\", 0);\n                  break;\n                case BruteForceMode.PermanentAfterTemporaryLockout:\n                  form.setValue(\"bruteForceProtected\", true);\n                  form.setValue(\"permanentLockout\", true);\n                  form.setValue(\"maxTemporaryLockouts\", 1);\n                  break;\n              }\n              setIsBruteForceModeUpdated(true);\n              setIsBruteForceModeOpen(false);\n            }}\n            selections={bruteForceMode}\n            variant={SelectVariant.single}\n            isOpen={isBruteForceModeOpen}\n            data-testid=\"select-brute-force-mode\"\n            aria-label={t(\"selectUnmanagedAttributePolicy\")}\n          >\n            {bruteForceModes.map((mode) => (\n              <SelectOption key={mode} value={mode}>\n                {t(`bruteForceMode.${mode}`)}\n              </SelectOption>\n            ))}\n          </KeycloakSelect>\n        </FormGroup>\n        {bruteForceMode !== BruteForceMode.Disabled && (\n          <>\n            <NumberControl\n              name=\"failureFactor\"\n              label={t(\"failureFactor\")}\n              labelIcon={t(\"failureFactorHelp\")}\n              controller={{\n                defaultValue: 0,\n                rules: { required: t(\"required\") },\n              }}\n            />\n            {bruteForceMode ===\n              BruteForceMode.PermanentAfterTemporaryLockout && (\n              <NumberControl\n                name=\"maxTemporaryLockouts\"\n                label={t(\"maxTemporaryLockouts\")}\n                labelIcon={t(\"maxTemporaryLockoutsHelp\")}\n                controller={{\n                  defaultValue: 0,\n                }}\n              />\n            )}\n            {(bruteForceMode === BruteForceMode.TemporaryLockout ||\n              bruteForceMode ===\n                BruteForceMode.PermanentAfterTemporaryLockout) && (\n              <>\n                <SelectControl\n                  name=\"bruteForceStrategy\"\n                  label={t(\"bruteForceStrategy\")}\n                  labelIcon={t(\"bruteForceStrategyHelp\")}\n                  controller={{ defaultValue: \"\" }}\n                  options={bruteForceStrategyTypes.map((key) => ({\n                    key,\n                    value: t(`bruteForceStrategy.${key}`),\n                  }))}\n                />\n                <Time name=\"waitIncrementSeconds\" />\n                <Time name=\"maxFailureWaitSeconds\" />\n                <Time name=\"maxDeltaTimeSeconds\" />\n              </>\n            )}\n            <NumberControl\n              name=\"quickLoginCheckMilliSeconds\"\n              label={t(\"quickLoginCheckMilliSeconds\")}\n              labelIcon={t(\"quickLoginCheckMilliSecondsHelp\")}\n              controller={{\n                defaultValue: 0,\n              }}\n            />\n            <Time name=\"minimumQuickLoginWaitSeconds\" />\n          </>\n        )}\n\n        <ActionGroup>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"brute-force-tab-save\"\n            isDisabled={!isDirty && !isBruteForceModeUpdated}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button variant=\"link\" onClick={setupForm}>\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </FormProvider>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { PageSection, Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\n\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { HeadersForm } from \"./HeadersForm\";\nimport { BruteForceDetection } from \"./BruteForceDetection\";\n\ntype SecurityDefensesProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const SecurityDefenses = ({ realm, save }: SecurityDefensesProps) => {\n  const { t } = useTranslation();\n  const [activeTab, setActiveTab] = useState(10);\n  return (\n    <Tabs\n      activeKey={activeTab}\n      onSelect={(_, key) => setActiveTab(key as number)}\n    >\n      <Tab\n        id=\"headers\"\n        eventKey={10}\n        data-testid=\"security-defenses-headers-tab\"\n        title={<TabTitleText>{t(\"headers\")}</TabTitleText>}\n      >\n        <PageSection variant=\"light\">\n          <HeadersForm realm={realm} save={save} />\n        </PageSection>\n      </Tab>\n      <Tab\n        id=\"bruteForce\"\n        eventKey={20}\n        data-testid=\"security-defenses-brute-force-tab\"\n        title={<TabTitleText>{t(\"bruteForceDetection\")}</TabTitleText>}\n      >\n        <PageSection variant=\"light\">\n          <BruteForceDetection realm={realm} save={save} />\n        </PageSection>\n      </Tab>\n    </Tabs>\n  );\n};\n","import type { UserProfileGroup } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport {\n  Button,\n  ButtonVariant,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { Action, KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toEditAttributesGroup } from \"../routes/EditAttributesGroup\";\nimport { toNewAttributesGroup } from \"../routes/NewAttributesGroup\";\nimport { useUserProfile } from \"./UserProfileContext\";\nimport useLocale from \"../../utils/useLocale\";\nimport { useAdminClient } from \"../../admin-client\";\n\ntype AttributesGroupTabProps = {\n  setTableData: React.Dispatch<\n    React.SetStateAction<Record<string, string>[] | undefined>\n  >;\n};\n\nexport const AttributesGroupTab = ({\n  setTableData,\n}: AttributesGroupTabProps) => {\n  const { adminClient } = useAdminClient();\n  const { config, save } = useUserProfile();\n  const { t } = useTranslation();\n  const combinedLocales = useLocale();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n  const [key, setKey] = useState(0);\n  const [groupToDelete, setGroupToDelete] = useState<UserProfileGroup>();\n\n  // Refresh data in table when config changes.\n  useEffect(() => setKey((value) => value + 1), [config]);\n\n  async function loader() {\n    return config?.groups ?? [];\n  }\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteDialogTitle\",\n    children: (\n      <Trans i18nKey=\"deleteDialogDescription\">\n        {\" \"}\n        <strong>{{ group: groupToDelete?.name }}</strong>.\n      </Trans>\n    ),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const groups = (config?.groups ?? []).filter(\n        (group) => group !== groupToDelete,\n      );\n      const translationsForDisplayHeaderToDelete =\n        groupToDelete?.displayHeader?.substring(\n          2,\n          groupToDelete?.displayHeader.length - 1,\n        );\n      const translationsForDisplayDescriptionToDelete =\n        groupToDelete?.displayDescription?.substring(\n          2,\n          groupToDelete?.displayDescription.length - 1,\n        );\n\n      try {\n        await Promise.all(\n          combinedLocales.map(async (locale) => {\n            try {\n              const response =\n                await adminClient.realms.getRealmLocalizationTexts({\n                  realm,\n                  selectedLocale: locale,\n                });\n\n              if (response) {\n                await adminClient.realms.deleteRealmLocalizationTexts({\n                  realm,\n                  selectedLocale: locale,\n                  key: translationsForDisplayHeaderToDelete,\n                });\n\n                await adminClient.realms.deleteRealmLocalizationTexts({\n                  realm,\n                  selectedLocale: locale,\n                  key: translationsForDisplayDescriptionToDelete,\n                });\n\n                const updatedData =\n                  await adminClient.realms.getRealmLocalizationTexts({\n                    realm,\n                    selectedLocale: locale,\n                  });\n                setTableData([updatedData]);\n              }\n            } catch {\n              console.error(`Error removing translations for ${locale}`);\n            }\n          }),\n        );\n\n        save(\n          { ...config, groups },\n          {\n            successMessageKey: \"deleteSuccess\",\n            errorMessageKey: \"deleteAttributeGroupError\",\n          },\n        );\n      } catch (error) {\n        console.error(\n          `Error removing translations or updating attributes group: ${error}`,\n        );\n      }\n    },\n  });\n\n  function deleteAttributeGroup(group: UserProfileGroup) {\n    setGroupToDelete(group);\n    toggleDeleteDialog();\n  }\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <DeleteConfirm />\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        ariaLabelKey=\"tableTitle\"\n        toolbarItem={\n          <ToolbarItem>\n            <Button\n              component={(props) => (\n                <Link\n                  data-testid=\"create-attributes-groups-action\"\n                  {...props}\n                  to={toNewAttributesGroup({ realm })}\n                />\n              )}\n            >\n              {t(\"createGroupText\")}\n            </Button>\n          </ToolbarItem>\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"columnName\",\n            cellRenderer: (group) => (\n              <Link\n                to={toEditAttributesGroup({\n                  realm,\n                  name: group.name!,\n                })}\n              >\n                {group.name}\n              </Link>\n            ),\n          },\n          {\n            name: \"displayHeader\",\n            displayKey: \"columnDisplayName\",\n          },\n          {\n            name: \"displayDescription\",\n            displayKey: \"columnDisplayDescription\",\n          },\n        ]}\n        actions={[\n          {\n            title: t(\"delete\"),\n            onRowClick: deleteAttributeGroup,\n          } as Action<UserProfileGroup>,\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyStateMessage\")}\n            instructions={t(\"emptyStateInstructions\")}\n            primaryActionText={t(\"createGroupText\")}\n            onPrimaryAction={() => navigate(toNewAttributesGroup({ realm }))}\n          />\n        }\n      />\n    </PageSection>\n  );\n};\n","import type { UserProfileAttribute } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport { KeycloakSelect, SelectVariant } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  Divider,\n  SelectOption,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { uniqBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { DraggableTable } from \"../../authentication/components/DraggableTable\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useLocale from \"../../utils/useLocale\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toAddAttribute } from \"../routes/AddAttribute\";\nimport { toAttribute } from \"../routes/Attribute\";\nimport { useUserProfile } from \"./UserProfileContext\";\n\nconst RESTRICTED_ATTRIBUTES = [\"username\", \"email\"];\n\ntype movedAttributeType = UserProfileAttribute;\n\ntype AttributesTabProps = {\n  setTableData: React.Dispatch<\n    React.SetStateAction<Record<string, string>[] | undefined>\n  >;\n};\n\nexport const AttributesTab = ({ setTableData }: AttributesTabProps) => {\n  const { adminClient } = useAdminClient();\n  const { config, save } = useUserProfile();\n  const { realm } = useRealm();\n  const { t } = useTranslation();\n  const combinedLocales = useLocale();\n  const navigate = useNavigate();\n  const [filter, setFilter] = useState(\"allGroups\");\n  const [isFilterTypeDropdownOpen, toggleIsFilterTypeDropdownOpen] =\n    useToggle();\n  const [data, setData] = useState(config?.attributes);\n  const [attributeToDelete, setAttributeToDelete] = useState(\"\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteAttributeConfirmTitle\"),\n    messageKey: t(\"deleteAttributeConfirm\", {\n      attributeName: attributeToDelete,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      if (!config?.attributes) return;\n\n      const translationsToDelete = config.attributes.find(\n        (attribute) => attribute.name === attributeToDelete,\n      )?.displayName;\n\n      // Remove the the `${}` from translationsToDelete string\n      const formattedTranslationsToDelete = translationsToDelete?.substring(\n        2,\n        translationsToDelete.length - 1,\n      );\n\n      try {\n        await Promise.all(\n          combinedLocales.map(async (locale) => {\n            try {\n              const response =\n                await adminClient.realms.getRealmLocalizationTexts({\n                  realm,\n                  selectedLocale: locale,\n                });\n\n              if (response) {\n                await adminClient.realms.deleteRealmLocalizationTexts({\n                  realm,\n                  selectedLocale: locale,\n                  key: formattedTranslationsToDelete,\n                });\n\n                const updatedData =\n                  await adminClient.realms.getRealmLocalizationTexts({\n                    realm,\n                    selectedLocale: locale,\n                  });\n                setTableData([updatedData]);\n              }\n            } catch {\n              console.error(`Error removing translations for ${locale}`);\n            }\n          }),\n        );\n\n        const updatedAttributes = config.attributes.filter(\n          (attribute) => attribute.name !== attributeToDelete,\n        );\n\n        save(\n          { ...config, attributes: updatedAttributes, groups: config.groups },\n          {\n            successMessageKey: \"deleteAttributeSuccess\",\n            errorMessageKey: \"deleteAttributeError\",\n          },\n        );\n\n        setAttributeToDelete(\"\");\n      } catch (error) {\n        console.error(\n          `Error removing translations or updating attributes: ${error}`,\n        );\n      }\n    },\n  });\n\n  if (!config) {\n    return <KeycloakSpinner />;\n  }\n\n  const attributes = config.attributes ?? [];\n  const groups = config.groups ?? [];\n\n  const executeMove = async (\n    attribute: UserProfileAttribute,\n    newIndex: number,\n  ) => {\n    const fromIndex = attributes.findIndex((attr) => {\n      return attr.name === attribute.name;\n    });\n\n    let movedAttribute: movedAttributeType = {};\n    movedAttribute = attributes[fromIndex];\n    attributes.splice(fromIndex, 1);\n    attributes.splice(newIndex, 0, movedAttribute);\n\n    save(\n      { attributes, groups },\n      {\n        successMessageKey: \"updatedUserProfileSuccess\",\n        errorMessageKey: \"updatedUserProfileError\",\n      },\n    );\n  };\n\n  const cellFormatter = (row: UserProfileAttribute) => (\n    <Link\n      to={toAttribute({\n        realm,\n        attributeName: row.name!,\n      })}\n      key={row.name}\n    >\n      {row.name}\n    </Link>\n  );\n\n  return (\n    <>\n      <Toolbar>\n        <ToolbarContent>\n          <ToolbarItem>\n            <KeycloakSelect\n              toggleId=\"kc-group-filter\"\n              width={200}\n              data-testid=\"filter-select\"\n              isOpen={isFilterTypeDropdownOpen}\n              variant={SelectVariant.single}\n              onToggle={toggleIsFilterTypeDropdownOpen}\n              toggleIcon={<FilterIcon />}\n              onSelect={(value) => {\n                const filter = value.toString();\n                setFilter(filter);\n                setData(\n                  filter === \"allGroups\"\n                    ? attributes\n                    : attributes.filter((attr) => attr.group === filter),\n                );\n                toggleIsFilterTypeDropdownOpen();\n              }}\n              selections={filter === \"allGroups\" ? t(filter) : filter}\n            >\n              {[\n                <SelectOption\n                  key=\"allGroups\"\n                  data-testid=\"all-groups\"\n                  value=\"allGroups\"\n                >\n                  {t(\"allGroups\")}\n                </SelectOption>,\n                ...uniqBy(\n                  attributes.filter((attr) => !!attr.group),\n                  \"group\",\n                ).map((attr) => (\n                  <SelectOption key={attr.group} value={attr.group}>\n                    {attr.group}\n                  </SelectOption>\n                )),\n              ]}\n            </KeycloakSelect>\n          </ToolbarItem>\n          <ToolbarItem className=\"kc-toolbar-attributesTab\">\n            <Button\n              data-testid=\"createAttributeBtn\"\n              variant=\"primary\"\n              component={(props) => (\n                <Link {...props} to={toAddAttribute({ realm })} />\n              )}\n            >\n              {t(\"createAttribute\")}\n            </Button>\n          </ToolbarItem>\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n      <DeleteConfirm />\n      <DraggableTable\n        keyField=\"name\"\n        onDragFinish={async (nameDragged, items) => {\n          const keys = attributes.map((e) => e.name);\n          const newIndex = items.indexOf(nameDragged);\n          const oldIndex = keys.indexOf(nameDragged);\n          const dragged = attributes[oldIndex];\n          if (!dragged.name) return;\n\n          executeMove(dragged, newIndex);\n        }}\n        actions={[\n          {\n            title: t(\"edit\"),\n            onClick: (_key, _idx, component) => {\n              navigate(\n                toAttribute({\n                  realm,\n                  attributeName: component.name,\n                }),\n              );\n            },\n          },\n          {\n            title: t(\"delete\"),\n            isActionable: ({ name }) => !RESTRICTED_ATTRIBUTES.includes(name!),\n            onClick: (_key, _idx, component) => {\n              setAttributeToDelete(component.name);\n              toggleDeleteDialog();\n            },\n          },\n        ]}\n        columns={[\n          {\n            name: \"name\",\n            displayKey: t(\"attributeName\"),\n            cellRenderer: cellFormatter,\n          },\n          {\n            name: \"displayName\",\n            displayKey: t(\"attributeDisplayName\"),\n          },\n          {\n            name: \"group\",\n            displayKey: t(\"attributeGroup\"),\n          },\n        ]}\n        data={data ?? attributes}\n      />\n    </>\n  );\n};\n","import { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport { ActionGroup, Button, Form, PageSection } from \"@patternfly/react-core\";\nimport type { editor } from \"monaco-editor\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { useUserProfile } from \"./UserProfileContext\";\n\nexport const JsonEditorTab = () => {\n  const { config, save, isSaving } = useUserProfile();\n  const { t } = useTranslation();\n  const { addError } = useAlerts();\n  const [editor, setEditor] = useState<editor.IStandaloneCodeEditor>();\n\n  useEffect(() => resetCode(), [config, editor]);\n\n  function resetCode() {\n    editor?.setValue(config ? prettyPrintJSON(config) : \"\");\n  }\n\n  async function handleSave() {\n    const value = editor?.getValue();\n\n    if (!value) {\n      return;\n    }\n\n    try {\n      await save(JSON.parse(value));\n    } catch (error) {\n      addError(\"invalidJsonError\", error);\n      return;\n    }\n  }\n\n  return (\n    <PageSection variant=\"light\">\n      <CodeEditor\n        language={Language.json}\n        height=\"30rem\"\n        onEditorDidMount={(editor) => setEditor(editor)}\n        isLanguageLabelVisible\n      />\n      <Form>\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            onClick={handleSave}\n            isDisabled={isSaving}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button variant=\"link\" onClick={resetCode} isDisabled={isSaving}>\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </Form>\n    </PageSection>\n  );\n};\n","import { Tab, TabTitleText } from \"@patternfly/react-core\";\n\nimport { useTranslation } from \"react-i18next\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../../components/routable-tabs/RoutableTabs\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport {\n  toUserProfile,\n  UserProfileTab as IUserProfileTab,\n} from \"../routes/UserProfile\";\nimport { AttributesGroupTab } from \"./AttributesGroupTab\";\nimport { AttributesTab } from \"./AttributesTab\";\nimport { JsonEditorTab } from \"./JsonEditorTab\";\nimport { UserProfileProvider } from \"./UserProfileContext\";\n\ntype UserProfileTabProps = {\n  setTableData: React.Dispatch<\n    React.SetStateAction<Record<string, string>[] | undefined>\n  >;\n};\n\nexport const UserProfileTab = ({ setTableData }: UserProfileTabProps) => {\n  const { realm } = useRealm();\n  const { t } = useTranslation();\n\n  const useTab = (tab: IUserProfileTab) =>\n    useRoutableTab(toUserProfile({ realm, tab }));\n\n  const attributesTab = useTab(\"attributes\");\n  const attributesGroupTab = useTab(\"attributes-group\");\n  const jsonEditorTab = useTab(\"json-editor\");\n\n  return (\n    <UserProfileProvider>\n      <RoutableTabs\n        defaultLocation={toUserProfile({ realm, tab: \"attributes\" })}\n        mountOnEnter\n      >\n        <Tab\n          title={<TabTitleText>{t(\"attributes\")}</TabTitleText>}\n          data-testid=\"attributesTab\"\n          {...attributesTab}\n        >\n          <AttributesTab setTableData={setTableData} />\n        </Tab>\n        <Tab\n          title={<TabTitleText>{t(\"attributesGroup\")}</TabTitleText>}\n          data-testid=\"attributesGroupTab\"\n          {...attributesGroupTab}\n        >\n          <AttributesGroupTab setTableData={setTableData} />\n        </Tab>\n        <Tab\n          title={<TabTitleText>{t(\"jsonEditor\")}</TabTitleText>}\n          data-testid=\"jsonEditorTab\"\n          {...jsonEditorTab}\n        >\n          <JsonEditorTab />\n        </Tab>\n      </RoutableTabs>\n    </UserProfileProvider>\n  );\n};\n","import { fetchWithError } from \"@keycloak/keycloak-admin-client\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { UserProfileConfig } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport { useEnvironment } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  Divider,\n  DropdownItem,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toDashboard } from \"../dashboard/routes/Dashboard\";\nimport type { Environment } from \"../environment\";\nimport helpUrls from \"../help-urls\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../util\";\nimport { getAuthorizationHeaders } from \"../utils/getAuthorizationHeaders\";\nimport { joinPath } from \"../utils/joinPath\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport useLocale from \"../utils/useLocale\";\nimport { RealmSettingsEmailTab } from \"./EmailTab\";\nimport { RealmSettingsGeneralTab } from \"./GeneralTab\";\nimport { RealmSettingsLoginTab } from \"./LoginTab\";\nimport { PartialExportDialog } from \"./PartialExport\";\nimport { PartialImportDialog } from \"./PartialImport\";\nimport { PoliciesTab } from \"./PoliciesTab\";\nimport ProfilesTab from \"./ProfilesTab\";\nimport { RealmSettingsSessionsTab } from \"./SessionsTab\";\nimport { RealmSettingsThemesTab } from \"./ThemesTab\";\nimport { RealmSettingsTokensTab } from \"./TokensTab\";\nimport { UserRegistration } from \"./UserRegistration\";\nimport { EventsTab } from \"./event-config/EventsTab\";\nimport { KeysTab } from \"./keys/KeysTab\";\nimport { LocalizationTab } from \"./localization/LocalizationTab\";\nimport { ClientPoliciesTab, toClientPolicies } from \"./routes/ClientPolicies\";\nimport { RealmSettingsTab, toRealmSettings } from \"./routes/RealmSettings\";\nimport { SecurityDefenses } from \"./security-defences/SecurityDefenses\";\nimport { UserProfileTab } from \"./user-profile/UserProfileTab\";\n\nexport interface UIRealmRepresentation extends RealmRepresentation {\n  upConfig?: UserProfileConfig;\n}\n\ntype RealmSettingsHeaderProps = {\n  onChange: (value: boolean) => void;\n  value: boolean;\n  save: () => void;\n  realmName: string;\n  refresh: () => void;\n};\n\nconst RealmSettingsHeader = ({\n  save,\n  onChange,\n  value,\n  realmName,\n  refresh,\n}: RealmSettingsHeaderProps) => {\n  const { adminClient } = useAdminClient();\n  const { environment } = useEnvironment<Environment>();\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const [partialImportOpen, setPartialImportOpen] = useState(false);\n  const [partialExportOpen, setPartialExportOpen] = useState(false);\n  const { hasAccess } = useAccess();\n  const canManageRealm = hasAccess(\"manage-realm\");\n\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"disableConfirmTitle\",\n    messageKey: \"disableConfirmRealm\",\n    continueButtonLabel: \"disable\",\n    onConfirm: () => {\n      onChange(!value);\n      save();\n    },\n  });\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteConfirmTitle\",\n    messageKey: \"deleteConfirmRealmSetting\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.realms.del({ realm: realmName });\n        addAlert(t(\"deletedSuccessRealmSetting\"), AlertVariant.success);\n        navigate(toDashboard({ realm: environment.masterRealm }));\n        refresh();\n      } catch (error) {\n        addError(\"deleteErrorRealmSetting\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <DisableConfirm />\n      <DeleteConfirm />\n      <PartialImportDialog\n        open={partialImportOpen}\n        toggleDialog={() => setPartialImportOpen(!partialImportOpen)}\n      />\n      <PartialExportDialog\n        isOpen={partialExportOpen}\n        onClose={() => setPartialExportOpen(false)}\n      />\n      <ViewHeader\n        titleKey={realmName}\n        subKey=\"realmSettingsExplain\"\n        helpUrl={helpUrls.realmSettingsUrl}\n        divider={false}\n        dropdownItems={[\n          <DropdownItem\n            key=\"import\"\n            data-testid=\"openPartialImportModal\"\n            isDisabled={!canManageRealm}\n            onClick={() => {\n              setPartialImportOpen(true);\n            }}\n          >\n            {t(\"partialImport\")}\n          </DropdownItem>,\n          <DropdownItem\n            key=\"export\"\n            data-testid=\"openPartialExportModal\"\n            isDisabled={!canManageRealm}\n            onClick={() => setPartialExportOpen(true)}\n          >\n            {t(\"partialExport\")}\n          </DropdownItem>,\n          <Divider key=\"separator\" />,\n          <DropdownItem\n            key=\"delete\"\n            isDisabled={!canManageRealm}\n            onClick={toggleDeleteDialog}\n          >\n            {t(\"delete\")}\n          </DropdownItem>,\n        ]}\n        isEnabled={value}\n        isReadOnly={!canManageRealm}\n        onToggle={(value) => {\n          if (!value) {\n            toggleDisableDialog();\n          } else {\n            onChange(value);\n            save();\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport const RealmSettingsTabs = () => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName, realmRepresentation: realm, refresh } = useRealm();\n  const combinedLocales = useLocale();\n  const navigate = useNavigate();\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const [tableData, setTableData] = useState<\n    Record<string, string>[] | undefined\n  >(undefined);\n  const { control, setValue, getValues } = useForm({\n    mode: \"onChange\",\n  });\n  const [key, setKey] = useState(0);\n  const refreshHeader = () => {\n    setKey(key + 1);\n  };\n\n  const setupForm = (r: RealmRepresentation = realm!) => {\n    convertToFormValues(r, setValue);\n  };\n\n  useEffect(() => {\n    setupForm();\n    const fetchLocalizationTexts = async () => {\n      try {\n        await Promise.all(\n          combinedLocales.map(async (locale) => {\n            try {\n              const response =\n                await adminClient.realms.getRealmLocalizationTexts({\n                  realm: realmName,\n                  selectedLocale: locale,\n                });\n\n              if (response) {\n                setTableData([response]);\n              }\n            } catch {\n              return [];\n            }\n          }),\n        );\n      } catch {\n        return [];\n      }\n    };\n    fetchLocalizationTexts();\n  }, [setValue, realm]);\n\n  const save = async (r: UIRealmRepresentation) => {\n    r = convertFormValuesToObject(r);\n    if (\n      r.attributes?.[\"acr.loa.map\"] &&\n      typeof r.attributes[\"acr.loa.map\"] !== \"string\"\n    ) {\n      r.attributes[\"acr.loa.map\"] = JSON.stringify(\n        Object.fromEntries(\n          (r.attributes[\"acr.loa.map\"] as KeyValueType[])\n            .filter(({ key }) => key !== \"\")\n            .map(({ key, value }) => [key, value]),\n        ),\n      );\n    }\n\n    try {\n      const savedRealm: UIRealmRepresentation = {\n        ...realm,\n        ...r,\n        id: r.realm,\n      };\n\n      // For the default value, null is expected instead of an empty string.\n      if (savedRealm.smtpServer?.port === \"\") {\n        savedRealm.smtpServer = { ...savedRealm.smtpServer, port: null };\n      }\n      const response = await fetchWithError(\n        joinPath(adminClient.baseUrl, `admin/realms/${realmName}/ui-ext`),\n        {\n          method: \"PUT\",\n          body: JSON.stringify(savedRealm),\n          headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthorizationHeaders(await adminClient.getAccessToken()),\n          },\n        },\n      );\n      if (!response.ok) throw new Error(response.statusText);\n      addAlert(t(\"realmSaveSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"realmSaveError\", error);\n    }\n\n    const isRealmRenamed = realmName !== (r.realm || realm?.realm);\n    if (isRealmRenamed) {\n      navigate(toRealmSettings({ realm: r.realm!, tab: \"general\" }));\n    }\n    refresh();\n  };\n\n  const useTab = (tab: RealmSettingsTab) =>\n    useRoutableTab(toRealmSettings({ realm: realmName, tab }));\n\n  const generalTab = useTab(\"general\");\n  const loginTab = useTab(\"login\");\n  const emailTab = useTab(\"email\");\n  const themesTab = useTab(\"themes\");\n  const keysTab = useTab(\"keys\");\n  const eventsTab = useTab(\"events\");\n  const localizationTab = useTab(\"localization\");\n  const securityDefensesTab = useTab(\"security-defenses\");\n  const sessionsTab = useTab(\"sessions\");\n  const tokensTab = useTab(\"tokens\");\n  const clientPoliciesTab = useTab(\"client-policies\");\n  const userProfileTab = useTab(\"user-profile\");\n  const userRegistrationTab = useTab(\"user-registration\");\n  const { hasAccess, hasSomeAccess } = useAccess();\n  const canViewOrManageEvents =\n    hasAccess(\"view-realm\") && hasSomeAccess(\"view-events\", \"manage-events\");\n  const canViewUserRegistration =\n    hasAccess(\"view-realm\") && hasSomeAccess(\"view-clients\", \"manage-clients\");\n\n  const useClientPoliciesTab = (tab: ClientPoliciesTab) =>\n    useRoutableTab(\n      toClientPolicies({\n        realm: realmName,\n        tab,\n      }),\n    );\n\n  const clientPoliciesProfilesTab = useClientPoliciesTab(\"profiles\");\n  const clientPoliciesPoliciesTab = useClientPoliciesTab(\"policies\");\n\n  return (\n    <>\n      <Controller\n        name=\"enabled\"\n        defaultValue={true}\n        control={control}\n        render={({ field }) => (\n          <RealmSettingsHeader\n            value={field.value}\n            onChange={field.onChange}\n            realmName={realmName}\n            refresh={refreshHeader}\n            save={() => save(getValues())}\n          />\n        )}\n      />\n      <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n        <RoutableTabs\n          isBox\n          mountOnEnter\n          aria-label=\"realm-settings-tabs\"\n          defaultLocation={toRealmSettings({\n            realm: realmName,\n            tab: \"general\",\n          })}\n        >\n          <Tab\n            title={<TabTitleText>{t(\"general\")}</TabTitleText>}\n            data-testid=\"rs-general-tab\"\n            {...generalTab}\n          >\n            <RealmSettingsGeneralTab realm={realm!} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"login\")}</TabTitleText>}\n            data-testid=\"rs-login-tab\"\n            {...loginTab}\n          >\n            <RealmSettingsLoginTab refresh={refresh} realm={realm!} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"email\")}</TabTitleText>}\n            data-testid=\"rs-email-tab\"\n            {...emailTab}\n          >\n            <RealmSettingsEmailTab realm={realm!} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"themes\")}</TabTitleText>}\n            data-testid=\"rs-themes-tab\"\n            {...themesTab}\n          >\n            <RealmSettingsThemesTab realm={realm!} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"keys\")}</TabTitleText>}\n            data-testid=\"rs-keys-tab\"\n            {...keysTab}\n          >\n            <KeysTab />\n          </Tab>\n          {canViewOrManageEvents && (\n            <Tab\n              title={<TabTitleText>{t(\"events\")}</TabTitleText>}\n              data-testid=\"rs-realm-events-tab\"\n              {...eventsTab}\n            >\n              <EventsTab realm={realm!} />\n            </Tab>\n          )}\n          <Tab\n            title={<TabTitleText>{t(\"localization\")}</TabTitleText>}\n            data-testid=\"rs-localization-tab\"\n            {...localizationTab}\n          >\n            <LocalizationTab\n              key={key}\n              save={save}\n              realm={realm!}\n              tableData={tableData}\n            />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"securityDefences\")}</TabTitleText>}\n            data-testid=\"rs-security-defenses-tab\"\n            {...securityDefensesTab}\n          >\n            <SecurityDefenses realm={realm!} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"sessions\")}</TabTitleText>}\n            data-testid=\"rs-sessions-tab\"\n            {...sessionsTab}\n          >\n            <RealmSettingsSessionsTab key={key} realm={realm!} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"tokens\")}</TabTitleText>}\n            data-testid=\"rs-tokens-tab\"\n            {...tokensTab}\n          >\n            <RealmSettingsTokensTab save={save} realm={realm!} />\n          </Tab>\n          {isFeatureEnabled(Feature.ClientPolicies) && (\n            <Tab\n              title={<TabTitleText>{t(\"clientPolicies\")}</TabTitleText>}\n              data-testid=\"rs-clientPolicies-tab\"\n              {...clientPoliciesTab}\n            >\n              <RoutableTabs\n                mountOnEnter\n                defaultLocation={toClientPolicies({\n                  realm: realmName,\n                  tab: \"profiles\",\n                })}\n              >\n                <Tab\n                  id=\"profiles\"\n                  data-testid=\"rs-policies-clientProfiles-tab\"\n                  aria-label={t(\"clientProfilesSubTab\")}\n                  title={<TabTitleText>{t(\"profiles\")}</TabTitleText>}\n                  tooltip={\n                    <Tooltip content={t(\"clientPoliciesProfilesHelpText\")} />\n                  }\n                  {...clientPoliciesProfilesTab}\n                >\n                  <ProfilesTab />\n                </Tab>\n                <Tab\n                  id=\"policies\"\n                  data-testid=\"rs-policies-clientPolicies-tab\"\n                  aria-label={t(\"clientPoliciesSubTab\")}\n                  {...clientPoliciesPoliciesTab}\n                  title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n                  tooltip={\n                    <Tooltip content={t(\"clientPoliciesPoliciesHelpText\")} />\n                  }\n                >\n                  <PoliciesTab />\n                </Tab>\n              </RoutableTabs>\n            </Tab>\n          )}\n          <Tab\n            title={<TabTitleText>{t(\"userProfile\")}</TabTitleText>}\n            data-testid=\"rs-user-profile-tab\"\n            {...userProfileTab}\n          >\n            <UserProfileTab setTableData={setTableData as any} />\n          </Tab>\n          {canViewUserRegistration && (\n            <Tab\n              title={<TabTitleText>{t(\"userRegistration\")}</TabTitleText>}\n              data-testid=\"rs-userRegistration-tab\"\n              {...userRegistrationTab}\n            >\n              <UserRegistration />\n            </Tab>\n          )}\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n};\n","import { RealmSettingsTabs } from \"./RealmSettingsTabs\";\n\nexport default function RealmSettingsSection() {\n  return <RealmSettingsTabs />;\n}\n"],"names":["SelectGroup","_a","children","className","label","props","__rest","React","MenuGroup","css","flatten","array","length","baseFlatten","flatRest","func","setToString","overRest","objectTag","funcProto","objectProto","funcToString","hasOwnProperty","objectCtorString","isPlainObject","value","isObjectLike","baseGetTag","proto","getPrototype","Ctor","parent","object","path","baseGet","baseSlice","baseUnset","castPath","toKey","last","customOmitClone","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","omit","paths","result","isDeep","arrayMap","copyObject","getAllKeysIn","baseClone","uniqWith","comparator","baseUniq","useCurrentUser","adminClient","useAdminClient","whoAmI","useWhoAmI","currentUser","setCurrentUser","useState","userId","useFetch","RealmSettingsEmailTab","realm","save","useTranslation","addAlert","addError","useAlerts","form","useForm","control","handleSubmit","watch","resetForm","getValues","reset","watchFromValue","watchHostValue","isTesting","toggleTest","useToggle","authenticationEnabled","useWatch","testConnection","toNumber","toBoolean","valueMapper","serverSettings","key","mapperFn","AlertVariant","error","PageSection","jsxs","FormProvider","jsx","FormPanel","FormAccess","TextControl","emailRegexPattern","FormGroup","Controller","field","Checkbox","_event","SwitchControl","Fragment","PasswordControl","Alert","AlertActionLink","Link","toUser","ActionGroup","ActionListItem","Button","RealmSettingsGeneralTab","realmName","useRealm","userProfileConfig","setUserProfileConfig","config","RealmSettingsGeneralTabForm","KeycloakSpinner","REQUIRE_SSL_TYPES","UNMANAGED_ATTRIBUTE_POLICIES","UnmanagedAttributePolicy","serverBaseUrl","useEnvironment","t","setValue","errors","isFeatureEnabled","useIsFeatureEnabled","isOrganizationsEnabled","Feature","isOpenid4vciEnabled","setupForm","convertToFormValues","convertAttributeNameToForm","useEffect","onSubmit","unmanagedAttributePolicy","data","upConfig","ClipboardCopy","FormErrorText","SelectControl","sslType","HelpItem","KeyValueInput","DefaultSwitchControl","policy","Stack","StackItem","FormattedLink","addTrailingSlash","FixedButtonsGroup","RealmSettingsLoginTab","refresh","updateSwitchValue","switches","name","s","Switch","PartialExportDialog","isOpen","onClose","exportGroupsAndRoles","setExportGroupsAndRoles","exportClients","setExportClients","isExporting","setIsExporting","showWarning","exportRealm","realmExport","saveAs","prettyPrintJSON","Modal","ModalVariant","ButtonVariant","TextContent","Text","Form","val","INITIAL_RESOURCES","PartialImportDialog","importedFile","setImportedFile","isFileSelected","isRealmSelectOpen","setIsRealmSelectOpen","isCollisionSelectOpen","setIsCollisionSelectOpen","importInProgress","setImportInProgress","collisionOption","setCollisionOption","targetRealm","setTargetRealm","importResponse","setImportResponse","resourcesToImport","setResourcesToImport","isAnyResourceChecked","checked","resetResourcesToImport","resetInputState","handleFileChange","handleRealmSelect","handleResourceCheckBox","event","resource","realmSelectOptions","realms","SelectOption","handleCollisionSelect","option","collisionOptions","targetHasResources","targetHasResource","targetHasRealmRoles","targetHasClientRoles","itemCount","clientRolesCount","clientRoles","total","role","resourceDataListItem","resourceDisplayName","DataListItem","DataListItemRow","DataListItemCells","DataListCell","jsonForImport","jsonToImport","doImport","importResults","importModal","JsonFileUpload","Divider","KeycloakSelect","DataList","importCompleteMessage","loader","first","max","ActionLabel","importRecord","Label","TypeRenderer","typeMap","importCompletedModal","KeycloakDataTable","PoliciesTab","navigate","useNavigate","show","setShow","policies","setPolicies","selectedPolicy","setSelectedPolicy","setKey","code","setCode","tablePolicies","setTablePolicies","allPolicies","globalPolicies","allClientPolicies","saveStatus","switchValues","updatedPolicies","enabled","enabledPolicy","toClientPolicies","normalizePolicy","obj","changedPolicies","changedGlobalPolicies","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","newPolicy","Flex","FlexItem","Title","Radio","CodeEditor","Language","ListEmptyState","toAddClientPolicy","ToolbarItem","item","toEditClientPolicy","clientPolicy","SwitchRenderer","translationFormatter","onConfirm","toggleDisableDialog","DisableConfirm","ProfilesTab","tableProfiles","setTableProfiles","globalProfiles","setGlobalProfiles","selectedProfile","setSelectedProfile","allProfiles","profiles","allClientProfiles","normalizeProfile","profile","updatedProfiles","cellFormatter","row","toClientProfile","changedProfiles","changedGlobalProfiles","toAddClientProfile","RealmSettingsSessionsTab","formState","offlineSessionMaxEnabled","TimeSelector","RealmSettingsThemesTab","loginThemeOpen","setLoginThemeOpen","accountThemeOpen","setAccountThemeOpen","adminUIThemeOpen","setAdminUIThemeOpen","emailThemeOpen","setEmailThemeOpen","themeTypes","useServerInfo","SelectVariant","theme","idx","RealmSettingsTokensTab","serverInfo","defaultSigAlgDrpdwnIsOpen","setDefaultSigAlgDrpdwnOpen","defaultSigAlgOptions","sortProviders","ssoSessionIdleTimeout","revokeRefreshToken","p","NumberInput","newValue","TextInput","FormHelperText","HelperText","HelperTextItem","toHumanFormat","TextVariants","beerify","DefaultsGroupsTab","isKebabOpen","toggleKebab","isGroupPickerOpen","toggleGroupPicker","defaultGroups","setDefaultGroups","selectedRows","setSelectedRows","load","setLoad","reload","useHelp","hasAccess","useAccess","canAddOrRemoveGroups","groups","removeGroup","group","addGroups","toggleRemoveDialog","RemoveDialog","GroupPickerDialog","Popover","Trans","toUserFederation","QuestionCircleIcon","rows","Dropdown","ref","MenuToggle","EllipsisVIcon","DropdownList","DropdownItem","UserRegistration","activeTab","setActiveTab","addComposites","composites","compositeArray","Tabs","_","Tab","TabTitleText","RoleMapping","r","EventsTypeTable","ariaLabelKey","eventTypes","addTypes","onSelect","onDelete","type","AddEventTypesDialog","configured","enums","selectedTypes","setSelectedTypes","selected","EventConfigForm","clear","isDirty","eventKey","eventsEnabled","TimeSelectorControl","EventListenersForm","eventListeners","EventsTab","tableKey","setTableKey","events","setEvents","setType","addEventType","setAddEventType","refreshRealm","eventConfig","updatedEventListener","isEqual","adminEventsExpiration","addEventTypes","eventsTypes","enabledEvents","addEvents","enabledEventTypes","e","FILTER_OPTIONS","SelectFilter","onFilter","filterType","setFilterType","filterDropdownOpen","toggleFilter","FilterIcon","filter","o","KeysListTab","realmComponents","formatDate","useFormatDate","publicKey","setPublicKey","certificate","setCertificate","keyData","setKeyData","filteredKeyData","setFilteredKeyData","provider","component","togglePublicKeyDialog","PublicKeyDialog","toggleCertificateDialog","CertificateDialog","status","emptyFormatter","cellWidth","validTo","toKeysTab","KeyProviderModal","providerType","style","KeyProviderForm","KeyProvidersPicker","keyProviderComponentTypes","KEY_PROVIDER_TYPE","id","KeysProvidersTab","searchVal","setSearchVal","filteredComponents","setFilteredComponents","isCreateModalOpen","handleModalToggle","providerOpen","toggleProviderOpen","defaultUIDisplayName","setDefaultUIDisplayName","selectedComponent","setSelectedComponent","components","useMemo","componentType","onSearch","handleKeyDown","handleInputChange","Toolbar","ToolbarGroup","InputGroup","InputGroupItem","SearchIcon","DraggableTable","itemOrder","updateAll","componentToSave","toKeyProvider","_key","_idx","sortByPriority","b","priorityA","priorityB","KeysTab","setRealmComponents","useTab","tab","useRoutableTab","listTab","providersTab","RoutableTabs","defaultValues","EffectiveMessageBundles","defaultSupportedLocales","defaultLocales","localeSort","useLocaleSort","searchDropdownOpen","setSearchDropdownOpen","searchPerformed","setSearchPerformed","selectThemesOpen","setSelectThemesOpen","selectThemeTypeOpen","setSelectThemeTypeOpen","selectLanguageOpen","setSelectLanguageOpen","activeFilters","setActiveFilters","themes","themeNames","index","self","combinedLocales","filterLabels","isValid","messages","DEFAULT_LOCALE","filteredMessages","m","f","mapByKey","submitSearch","commitFilters","resetSearch","removeFilter","formValues","removeFilterValue","valueToRemove","fieldValue","newFieldValue","newFilters","pickBy","effectiveMessageBunldesSearchFormDisplay","DropdownPanel","selectedValue","ChipGroup","Chip","themeType","language","localeToDisplayName","input","words","word","newWords","i","entry","AddTranslationModal","RealmOverrides","internationalizationEnabled","watchSupportedLocales","tableData","addTranslationModalOpen","setAddTranslationModalOpen","setFilterDropdownOpen","translations","setTranslations","selectMenuLocale","setSelectMenuLocale","kebabOpen","setKebabOpen","selectMenuValueSelected","setSelectMenuValueSelected","tableRows","setTableRows","setMax","setFirst","setFilter","translationForm","currentRealm","selectedRowKeys","setSelectedRowKeys","areAllRowsSelected","setAreAllRowsSelected","editStates","setEditStates","formValue","setFormValue","refreshTable","searchInTranslations","filtered","updatedRows","translation","options","locale","addKeyValue","pair","i18n","handleRowSelect","rowIndex","selectedKey","prevSelected","toggleSelectAllRows","isRowSelected","inputValue","newRows","cloneDeep","newRow","prevEditStates","PaginatingTableToolbar","search","isExpanded","Table","Thead","Tr","Th","Tbody","Td","CheckIcon","TimesIcon","currentValue","prevState","PencilAltIcon","ActionsColumn","LocalizationTab","allLocales","locales","l","HelpLinkTextInput","fieldName","url","HeadersForm","Time","BruteForceDetection","isBruteForceModeOpen","setIsBruteForceModeOpen","isBruteForceModeUpdated","setIsBruteForceModeUpdated","BruteForceMode","bruteForceModes","bruteForceStrategyTypes","bruteForceMode","mode","NumberControl","SecurityDefenses","AttributesGroupTab","setTableData","useUserProfile","useLocale","groupToDelete","setGroupToDelete","translationsForDisplayHeaderToDelete","translationsForDisplayDescriptionToDelete","updatedData","deleteAttributeGroup","toNewAttributesGroup","toEditAttributesGroup","RESTRICTED_ATTRIBUTES","AttributesTab","isFilterTypeDropdownOpen","toggleIsFilterTypeDropdownOpen","setData","attributeToDelete","setAttributeToDelete","translationsToDelete","attribute","formattedTranslationsToDelete","updatedAttributes","attributes","executeMove","newIndex","fromIndex","attr","movedAttribute","toAttribute","ToolbarContent","uniqBy","toAddAttribute","nameDragged","items","keys","oldIndex","dragged","JsonEditorTab","isSaving","editor","setEditor","resetCode","handleSave","UserProfileTab","toUserProfile","attributesTab","attributesGroupTab","jsonEditorTab","UserProfileProvider","RealmSettingsHeader","onChange","environment","partialImportOpen","setPartialImportOpen","partialExportOpen","setPartialExportOpen","canManageRealm","toDashboard","ViewHeader","helpUrls","RealmSettingsTabs","refreshHeader","response","convertFormValuesToObject","savedRealm","fetchWithError","joinPath","getAuthorizationHeaders","toRealmSettings","generalTab","loginTab","emailTab","themesTab","keysTab","eventsTab","localizationTab","securityDefensesTab","sessionsTab","tokensTab","clientPoliciesTab","userProfileTab","userRegistrationTab","hasSomeAccess","canViewOrManageEvents","canViewUserRegistration","useClientPoliciesTab","clientPoliciesProfilesTab","clientPoliciesPoliciesTab","Tooltip","RealmSettingsSection"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}