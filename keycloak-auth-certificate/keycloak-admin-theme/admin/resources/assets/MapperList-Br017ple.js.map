{"version":3,"file":"MapperList-Br017ple.js","sources":["../../../../../../../src/client-scopes/add/MapperDialog.tsx","../../../../../../../src/client-scopes/details/MapperList.tsx"],"sourcesContent":["import { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  ButtonVariant,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Modal,\n  ModalVariant,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\n\nimport type ProtocolMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/protocolMapperRepresentation\";\nimport type { ProtocolMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\n\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\n\ntype Row = {\n  id: string;\n  description: string;\n  item: ProtocolMapperRepresentation;\n};\n\nexport type AddMapperDialogModalProps = {\n  protocol: string;\n  filter?: ProtocolMapperRepresentation[];\n  onConfirm: (\n    value: ProtocolMapperTypeRepresentation | ProtocolMapperRepresentation[],\n  ) => void;\n};\n\nexport type AddMapperDialogProps = AddMapperDialogModalProps & {\n  open: boolean;\n  toggleDialog: () => void;\n};\n\nexport const AddMapperDialog = (props: AddMapperDialogProps) => {\n  const { t } = useTranslation();\n\n  const serverInfo = useServerInfo();\n  const protocol = props.protocol;\n  const protocolMappers = serverInfo.protocolMapperTypes![protocol];\n  const builtInMappers = serverInfo.builtinProtocolMappers![protocol];\n  const [filter, setFilter] = useState<ProtocolMapperRepresentation[]>([]);\n  const [selectedRows, setSelectedRows] = useState<Row[]>([]);\n  const localeSort = useLocaleSort();\n\n  const allRows = useMemo(\n    () =>\n      localeSort(builtInMappers, mapByKey(\"name\")).map((mapper) => {\n        const mapperType = protocolMappers.find(\n          (type) => type.id === mapper.protocolMapper,\n        )!;\n        return {\n          item: mapper,\n          id: mapper.name!,\n          description: mapperType.helpText,\n        };\n      }),\n    [builtInMappers, protocolMappers],\n  );\n  const [rows, setRows] = useState(allRows);\n\n  if (props.filter && props.filter.length !== filter.length) {\n    setFilter(props.filter);\n    const nameFilter = props.filter.map((f) => f.name);\n    setRows([...allRows.filter((row) => !nameFilter.includes(row.item.name))]);\n  }\n\n  const sortedProtocolMappers = useMemo(\n    () => localeSort(protocolMappers, mapByKey(\"name\")),\n    [protocolMappers],\n  );\n\n  const isBuiltIn = !!props.filter;\n\n  const header = [t(\"name\"), t(\"description\")];\n\n  return (\n    <Modal\n      aria-label={\n        isBuiltIn ? t(\"addPredefinedMappers\") : t(\"emptySecondaryAction\")\n      }\n      variant={ModalVariant.medium}\n      header={\n        <TextContent\n          role=\"dialog\"\n          aria-label={\n            isBuiltIn ? t(\"addPredefinedMappers\") : t(\"emptySecondaryAction\")\n          }\n        >\n          <Text component={TextVariants.h1}>\n            {isBuiltIn ? t(\"addPredefinedMappers\") : t(\"emptySecondaryAction\")}\n          </Text>\n          <Text>\n            {isBuiltIn\n              ? t(\"predefinedMappingDescription\")\n              : t(\"configureMappingDescription\")}\n          </Text>\n        </TextContent>\n      }\n      isOpen={props.open}\n      onClose={props.toggleDialog}\n      actions={\n        isBuiltIn\n          ? [\n              <Button\n                id=\"modal-confirm\"\n                data-testid=\"confirm\"\n                key=\"confirm\"\n                isDisabled={rows.length === 0 || selectedRows.length === 0}\n                onClick={() => {\n                  props.onConfirm(selectedRows.map(({ item }) => item));\n                  props.toggleDialog();\n                }}\n              >\n                {t(\"add\")}\n              </Button>,\n              <Button\n                id=\"modal-cancel\"\n                data-testid=\"cancel\"\n                key=\"cancel\"\n                variant={ButtonVariant.link}\n                onClick={() => {\n                  props.toggleDialog();\n                }}\n              >\n                {t(\"cancel\")}\n              </Button>,\n            ]\n          : []\n      }\n    >\n      {!isBuiltIn && (\n        <DataList\n          onSelectDataListItem={(_event, id) => {\n            const mapper = protocolMappers.find((mapper) => mapper.id === id);\n            props.onConfirm(mapper!);\n            props.toggleDialog();\n          }}\n          aria-label={t(\"addPredefinedMappers\")}\n          isCompact\n        >\n          <DataListItem aria-label={t(\"headerName\")} id=\"header\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={header.map((name) => (\n                  <DataListCell style={{ fontWeight: 700 }} key={name}>\n                    {name}\n                  </DataListCell>\n                ))}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          {sortedProtocolMappers.map((mapper) => (\n            <DataListItem\n              aria-label={mapper.name}\n              key={mapper.id}\n              id={mapper.id}\n            >\n              <DataListItemRow>\n                <DataListItemCells\n                  dataListCells={[\n                    <DataListCell key={`name-${mapper.id}`}>\n                      {mapper.name}\n                    </DataListCell>,\n                    <DataListCell key={`helpText-${mapper.id}`}>\n                      {mapper.helpText}\n                    </DataListCell>,\n                  ]}\n                />\n              </DataListItemRow>\n            </DataListItem>\n          ))}\n        </DataList>\n      )}\n      {isBuiltIn && (\n        <KeycloakDataTable\n          loader={rows}\n          onSelect={setSelectedRows}\n          canSelectAll\n          ariaLabelKey=\"addPredefinedMappers\"\n          searchPlaceholderKey=\"searchForMapper\"\n          columns={[\n            {\n              name: \"id\",\n              displayKey: \"name\",\n            },\n            {\n              name: \"description\",\n              displayKey: \"description\",\n            },\n          ]}\n          emptyState={\n            <ListEmptyState\n              message={t(\"emptyMappers\")}\n              instructions={t(\"emptyBuiltInMappersInstructions\")}\n            />\n          }\n        />\n      )}\n    </Modal>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Path } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\n\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type ProtocolMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/protocolMapperRepresentation\";\nimport type { ProtocolMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { AddMapperDialog } from \"../add/MapperDialog\";\nimport { Action, KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n} from \"@patternfly/react-core\";\n\ntype MapperListProps = {\n  model: ClientScopeRepresentation | ClientRepresentation;\n  onAdd: (\n    mappers: ProtocolMapperTypeRepresentation | ProtocolMapperRepresentation[],\n  ) => void;\n  onDelete: (mapper: ProtocolMapperRepresentation) => void;\n  detailLink: (id: string) => Partial<Path>;\n};\n\ntype Row = ProtocolMapperRepresentation & {\n  category: string;\n  type: string;\n  priority: number;\n};\n\ntype MapperLinkProps = Row & {\n  detailLink: (id: string) => Partial<Path>;\n};\n\nconst MapperLink = ({ id, name, detailLink }: MapperLinkProps) => (\n  <Link to={detailLink(id!)}>{name}</Link>\n);\n\nexport const MapperList = ({\n  model,\n  onAdd,\n  onDelete,\n  detailLink,\n}: MapperListProps) => {\n  const { t } = useTranslation();\n\n  const [mapperAction, setMapperAction] = useState(false);\n  const mapperList = model.protocolMappers;\n  const mapperTypes = useServerInfo().protocolMapperTypes![model.protocol!];\n\n  const [key, setKey] = useState(0);\n  useEffect(() => setKey(key + 1), [mapperList]);\n\n  const [addMapperDialogOpen, setAddMapperDialogOpen] = useState(false);\n  const [filter, setFilter] = useState(model.protocolMappers);\n  const toggleAddMapperDialog = (buildIn: boolean) => {\n    if (buildIn) {\n      setFilter(mapperList || []);\n    } else {\n      setFilter(undefined);\n    }\n    setAddMapperDialogOpen(!addMapperDialogOpen);\n  };\n\n  const loader = async () => {\n    if (!mapperList) {\n      return [];\n    }\n\n    const list = mapperList.reduce<Row[]>((rows, mapper) => {\n      const mapperType = mapperTypes.find(\n        ({ id }) => id === mapper.protocolMapper,\n      );\n\n      if (!mapperType) {\n        return rows;\n      }\n\n      return rows.concat({\n        ...mapper,\n        category: mapperType.category,\n        type: mapperType.name,\n        priority: mapperType.priority,\n      });\n    }, []);\n\n    return list.sort((a, b) => a.priority - b.priority);\n  };\n\n  return (\n    <>\n      <AddMapperDialog\n        protocol={model.protocol!}\n        filter={filter}\n        onConfirm={onAdd}\n        open={addMapperDialogOpen}\n        toggleDialog={() => setAddMapperDialogOpen(!addMapperDialogOpen)}\n      />\n\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        ariaLabelKey=\"clientScopeList\"\n        searchPlaceholderKey=\"searchForMapper\"\n        toolbarItem={\n          <Dropdown\n            onSelect={() => setMapperAction(false)}\n            onOpenChange={(isOpen) => setMapperAction(isOpen)}\n            toggle={(ref) => (\n              <MenuToggle\n                ref={ref}\n                variant=\"primary\"\n                id=\"mapperAction\"\n                onClick={() => setMapperAction(!mapperAction)}\n              >\n                {t(\"addMapper\")}\n              </MenuToggle>\n            )}\n            isOpen={mapperAction}\n          >\n            <DropdownList>\n              <DropdownItem onClick={() => toggleAddMapperDialog(true)}>\n                {t(\"fromPredefinedMapper\")}\n              </DropdownItem>\n              <DropdownItem onClick={() => toggleAddMapperDialog(false)}>\n                {t(\"byConfiguration\")}\n              </DropdownItem>\n            </DropdownList>\n          </Dropdown>\n        }\n        actions={[\n          {\n            title: t(\"delete\"),\n            onRowClick: onDelete,\n          } as Action<Row>,\n        ]}\n        columns={[\n          {\n            name: \"name\",\n            cellRenderer: (row) => (\n              <MapperLink {...row} detailLink={detailLink} />\n            ),\n          },\n          { name: \"category\" },\n          {\n            name: \"type\",\n          },\n          {\n            name: \"priority\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyMappers\")}\n            instructions={t(\"emptyMappersInstructions\")}\n            secondaryActions={[\n              {\n                text: t(\"emptyPrimaryAction\"),\n                onClick: () => toggleAddMapperDialog(true),\n              },\n              {\n                text: t(\"emptySecondaryAction\"),\n                onClick: () => toggleAddMapperDialog(false),\n              },\n            ]}\n          />\n        }\n      />\n    </>\n  );\n};\n"],"names":["AddMapperDialog","props","t","useTranslation","serverInfo","useServerInfo","protocol","protocolMappers","builtInMappers","filter","setFilter","useState","selectedRows","setSelectedRows","localeSort","useLocaleSort","allRows","useMemo","mapByKey","mapper","mapperType","type","rows","setRows","nameFilter","f","row","sortedProtocolMappers","isBuiltIn","header","jsxs","Modal","ModalVariant","TextContent","jsx","Text","TextVariants","Button","item","ButtonVariant","DataList","_event","id","DataListItem","DataListItemRow","DataListItemCells","name","DataListCell","KeycloakDataTable","ListEmptyState","MapperLink","detailLink","Link","MapperList","model","onAdd","onDelete","mapperAction","setMapperAction","mapperList","mapperTypes","key","setKey","useEffect","addMapperDialogOpen","setAddMapperDialogOpen","toggleAddMapperDialog","buildIn","loader","a","b","Fragment","Dropdown","isOpen","ref","MenuToggle","DropdownList","DropdownItem"],"mappings":"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"}