{"version":3,"file":"AddRoleMappingModal-BqwO7G2x.js","sources":["../../../../../../../src/components/role-mapping/queries.ts","../../../../../../../src/components/role-mapping/resource.ts","../../../../../../../src/components/role-mapping/RoleMapping.tsx","../../../../../../../src/components/role-mapping/AddRoleMappingModal.tsx"],"sourcesContent":["import type KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport type MappingsRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/mappingsRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type { ClientScopes } from \"@keycloak/keycloak-admin-client/lib/resources/clientScopes\";\nimport type { Clients } from \"@keycloak/keycloak-admin-client/lib/resources/clients\";\nimport type { Groups } from \"@keycloak/keycloak-admin-client/lib/resources/groups\";\nimport type { Roles } from \"@keycloak/keycloak-admin-client/lib/resources/roles\";\nimport type { Users } from \"@keycloak/keycloak-admin-client/lib/resources/users\";\nimport { Row } from \"./RoleMapping\";\n\nexport type ResourcesKey = keyof KeycloakAdminClient;\n\ntype DeleteFunctions =\n  | keyof Pick<Groups, \"delClientRoleMappings\" | \"delRealmRoleMappings\">\n  | keyof Pick<ClientScopes, \"delClientScopeMappings\" | \"delRealmScopeMappings\">\n  | keyof Pick<Roles, \"delCompositeRoles\">;\n\ntype ListEffectiveFunction =\n  | keyof Pick<Clients, \"listCompositeRealmScopeMappings\">\n  | keyof Pick<Groups, \"listRoleMappings\" | \"listAvailableRealmRoleMappings\">\n  | keyof Pick<\n      ClientScopes,\n      | \"listScopeMappings\"\n      | \"listAvailableRealmScopeMappings\"\n      | \"listCompositeClientScopeMappings\"\n    >\n  | keyof Pick<Roles, \"getCompositeRoles\" | \"getCompositeRolesForClient\">\n  | keyof Pick<\n      Users,\n      \"listCompositeClientRoleMappings\" | \"listCompositeRealmRoleMappings\"\n    >;\n\ntype ListAvailableFunction =\n  | keyof Pick<\n      Groups,\n      \"listAvailableClientRoleMappings\" | \"listAvailableRealmRoleMappings\"\n    >\n  | keyof Pick<\n      ClientScopes,\n      \"listAvailableClientScopeMappings\" | \"listAvailableRealmScopeMappings\"\n    >\n  | keyof Pick<Roles, \"find\">\n  | keyof Pick<Clients, \"listRoles\">;\n\ntype FunctionMapping = {\n  delete: DeleteFunctions[];\n  listAvailable: ListAvailableFunction[];\n  listEffective: ListEffectiveFunction[];\n};\n\ntype ResourceMapping = Partial<Record<ResourcesKey, FunctionMapping>>;\nconst groupFunctions: FunctionMapping = {\n  delete: [\"delClientRoleMappings\", \"delRealmRoleMappings\"],\n  listEffective: [\n    \"listRoleMappings\",\n    \"listCompositeRealmRoleMappings\",\n    \"listCompositeClientRoleMappings\",\n  ],\n  listAvailable: [\n    \"listAvailableClientRoleMappings\",\n    \"listAvailableRealmRoleMappings\",\n  ],\n};\n\nconst clientFunctions: FunctionMapping = {\n  delete: [\"delClientScopeMappings\", \"delRealmScopeMappings\"],\n  listEffective: [\n    \"listScopeMappings\",\n    \"listCompositeRealmScopeMappings\",\n    \"listCompositeClientScopeMappings\",\n  ],\n  listAvailable: [\n    \"listAvailableClientScopeMappings\",\n    \"listAvailableRealmScopeMappings\",\n  ],\n};\n\nconst mapping: ResourceMapping = {\n  groups: groupFunctions,\n  users: groupFunctions,\n  clientScopes: clientFunctions,\n  clients: clientFunctions,\n  roles: {\n    delete: [\"delCompositeRoles\", \"delCompositeRoles\"],\n    listEffective: [\n      \"getCompositeRoles\",\n      \"getCompositeRoles\",\n      \"getCompositeRolesForClient\",\n    ],\n    listAvailable: [\"listRoles\", \"find\"],\n  },\n};\n\ntype queryType =\n  | DeleteFunctions\n  | ListAvailableFunction\n  | ListEffectiveFunction;\n\nconst castAdminClient = (\n  adminClient: KeycloakAdminClient,\n  resource: ResourcesKey,\n) =>\n  adminClient[resource] as unknown as {\n    [index in queryType]: (...params: any) => Promise<RoleRepresentation[]>;\n  };\n\nconst applyQuery = (\n  adminClient: KeycloakAdminClient,\n  type: ResourcesKey,\n  query: queryType,\n  ...params: object[]\n): Promise<RoleRepresentation[]> =>\n  castAdminClient(adminClient, type)[query](...params);\n\nexport const deleteMapping = (\n  adminClient: KeycloakAdminClient,\n  type: ResourcesKey,\n  id: string,\n  rows: Row[],\n) =>\n  rows.map((row) => {\n    const role = { id: row.role.id!, name: row.role.name! };\n    const query = mapping[type]?.delete[row.client ? 0 : 1]!;\n\n    return applyQuery(\n      adminClient,\n      type,\n      query,\n      {\n        id,\n        clientUniqueId: row.client?.id,\n        client: row.client?.id,\n        roles: [role],\n      },\n      [role],\n    );\n  });\n\nexport const getMapping = async (\n  adminClient: KeycloakAdminClient,\n  type: ResourcesKey,\n  id: string,\n): Promise<MappingsRepresentation> => {\n  const query = mapping[type]!.listEffective[0];\n  const result = applyQuery(adminClient, type, query, { id });\n  if (type !== \"roles\") {\n    return result as MappingsRepresentation;\n  }\n  const roles = await result;\n  const clientRoles = await Promise.all(\n    roles\n      .filter((r) => r.clientRole)\n      .map(async (role) => {\n        const client = await adminClient.clients.findOne({\n          id: role.containerId!,\n        });\n\n        role.containerId = client?.clientId;\n        return { ...client, mappings: [role] };\n      }),\n  );\n\n  return {\n    clientMappings: clientRoles,\n    realmMappings: roles.filter((r) => !r.clientRole),\n  };\n};\n\nexport const getEffectiveRoles = async (\n  adminClient: KeycloakAdminClient,\n  type: ResourcesKey,\n  id: string,\n): Promise<Row[]> => {\n  const query = mapping[type]!.listEffective[1];\n  if (type !== \"roles\") {\n    return (await applyQuery(adminClient, type, query, { id })).map((role) => ({\n      role,\n    }));\n  }\n  const roles = await applyQuery(adminClient, type, query, { id });\n  const parentRoles = await Promise.all(\n    roles\n      .filter((r) => r.composite)\n      .map((r) => applyQuery(adminClient, type, query, { id: r.id })),\n  );\n  return [...roles, ...parentRoles.flat()].map((role) => ({ role }));\n};\n\nexport const getAvailableRoles = async (\n  adminClient: KeycloakAdminClient,\n  type: ResourcesKey,\n  params: Record<string, string | number>,\n): Promise<Row[]> => {\n  const query = mapping[type]!.listAvailable[1];\n  return (await applyQuery(adminClient, type, query, params)).map((role) => ({\n    role,\n  }));\n};\n","import type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\n\nimport { fetchAdminUI } from \"../../context/auth/admin-ui-endpoint\";\nimport KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\n\ntype IDQuery = {\n  id: string;\n  type: string;\n};\n\ntype PaginatingQuery = IDQuery & {\n  first: number;\n  max: number;\n  search?: string;\n};\n\ntype EffectiveClientRolesQuery = IDQuery;\n\ntype Query = Partial<Omit<PaginatingQuery, \"adminClient\">> & {\n  endpoint: string;\n};\n\ntype ClientRole = {\n  id: string;\n  role: string;\n  description?: string;\n  client: string;\n  clientId: string;\n};\n\nconst fetchEndpoint = async (\n  adminClient: KeycloakAdminClient,\n  { id, type, first, max, search, endpoint }: Query,\n): Promise<any> =>\n  fetchAdminUI(adminClient, `/ui-ext/${endpoint}/${type}/${id}`, {\n    first: (first || 0).toString(),\n    max: (max || 10).toString(),\n    search: search || \"\",\n  });\n\nexport const getAvailableClientRoles = (\n  adminClient: KeycloakAdminClient,\n  query: PaginatingQuery,\n): Promise<ClientRole[]> =>\n  fetchEndpoint(adminClient, { ...query, endpoint: \"available-roles\" });\n\nexport const getEffectiveClientRoles = (\n  adminClient: KeycloakAdminClient,\n  query: EffectiveClientRolesQuery,\n): Promise<ClientRole[]> =>\n  fetchEndpoint(adminClient, { ...query, endpoint: \"effective-roles\" });\n\ntype UserQuery = {\n  lastName?: string;\n  firstName?: string;\n  email?: string;\n  username?: string;\n  emailVerified?: boolean;\n  idpAlias?: string;\n  idpUserId?: string;\n  enabled?: boolean;\n  briefRepresentation?: boolean;\n  exact?: boolean;\n  q?: string;\n};\n\nexport type BruteUser = UserRepresentation & {\n  bruteForceStatus?: Record<string, object>;\n};\n\nexport const findUsers = (\n  adminClient: KeycloakAdminClient,\n  query: UserQuery,\n): Promise<BruteUser[]> =>\n  fetchAdminUI(\n    adminClient,\n    \"ui-ext/brute-force-user\",\n    query as Record<string, string>,\n  );\n\nexport const fetchUsedBy = (\n  adminClient: KeycloakAdminClient,\n  query: PaginatingQuery,\n): Promise<string[]> =>\n  fetchEndpoint(adminClient, {\n    ...query,\n    endpoint: \"authentication-management\",\n  });\n","import type KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Badge,\n  Button,\n  ButtonVariant,\n  Checkbox,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { emptyFormatter, upperCaseFormatter } from \"../../util\";\nimport { translationFormatter } from \"../../utils/translationFormatter\";\nimport { useConfirmDialog } from \"../confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { Action, KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { AddRoleMappingModal } from \"./AddRoleMappingModal\";\nimport { deleteMapping, getEffectiveRoles, getMapping } from \"./queries\";\nimport { getEffectiveClientRoles } from \"./resource\";\n\nimport \"./role-mapping.css\";\n\nexport type CompositeRole = RoleRepresentation & {\n  parent: RoleRepresentation;\n  isInherited?: boolean;\n};\n\nexport type Row = {\n  client?: ClientRepresentation;\n  role: RoleRepresentation | CompositeRole;\n  id?: string; // KeycloakDataTable expects an id for the row\n};\n\nexport const mapRoles = (\n  assignedRoles: Row[],\n  effectiveRoles: Row[],\n  hide: boolean,\n) => [\n  ...(hide\n    ? assignedRoles.map((row) => ({\n        ...row,\n        role: {\n          ...row.role,\n          isInherited: false,\n        },\n      }))\n    : effectiveRoles.map((row) => ({\n        ...row,\n        role: {\n          ...row.role,\n          isInherited:\n            assignedRoles.find((r) => r.role.id === row.role.id) === undefined,\n        },\n      }))),\n];\n\nexport const ServiceRole = ({ role, client }: Row) => (\n  <>\n    {client?.clientId && (\n      <Badge isRead className=\"keycloak-admin--role-mapping__client-name\">\n        {client.clientId}\n      </Badge>\n    )}\n    {role.name}\n  </>\n);\n\nexport type ResourcesKey = keyof KeycloakAdminClient;\n\ntype RoleMappingProps = {\n  name: string;\n  id: string;\n  type: ResourcesKey;\n  isManager?: boolean;\n  save: (rows: Row[]) => Promise<void>;\n};\n\nexport const RoleMapping = ({\n  name,\n  id,\n  type,\n  isManager = true,\n  save,\n}: RoleMappingProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [hide, setHide] = useState(true);\n  const [showAssign, setShowAssign] = useState(false);\n  const [selected, setSelected] = useState<Row[]>([]);\n\n  const assignRoles = async (rows: Row[]) => {\n    await save(rows);\n    refresh();\n  };\n\n  const loader = async () => {\n    let effectiveRoles: Row[] = [];\n    let effectiveClientRoles: Row[] = [];\n\n    if (!hide) {\n      effectiveRoles = await getEffectiveRoles(adminClient, type, id);\n\n      effectiveClientRoles = (\n        await getEffectiveClientRoles(adminClient, {\n          type,\n          id,\n        })\n      ).map((e) => ({\n        client: { clientId: e.client, id: e.clientId },\n        role: { id: e.id, name: e.role, description: e.description },\n      }));\n\n      effectiveRoles = effectiveRoles.filter(\n        (role) =>\n          !effectiveClientRoles.some(\n            (clientRole) => clientRole.role.id === role.role.id,\n          ),\n      );\n    }\n\n    const roles = await getMapping(adminClient, type, id);\n    const realmRolesMapping =\n      roles.realmMappings?.map((role) => ({ role })) || [];\n    const clientMapping = Object.values(roles.clientMappings || {})\n      .map((client) =>\n        client.mappings.map((role: RoleRepresentation) => ({\n          client: { clientId: client.client, ...client },\n          role,\n        })),\n      )\n      .flat();\n\n    return [\n      ...mapRoles(\n        [...clientMapping, ...realmRolesMapping],\n        [...effectiveClientRoles, ...effectiveRoles],\n        hide,\n      ),\n    ];\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"removeMappingTitle\",\n    messageKey: t(\"removeMappingConfirm\", { count: selected.length }),\n    continueButtonLabel: \"remove\",\n    continueButtonVariant: ButtonVariant.danger,\n    onCancel: () => {\n      setSelected([]);\n      refresh();\n    },\n    onConfirm: async () => {\n      try {\n        await Promise.all(deleteMapping(adminClient, type, id, selected));\n        addAlert(t(\"clientScopeRemoveSuccess\"), AlertVariant.success);\n        setSelected([]);\n        refresh();\n      } catch (error) {\n        addError(\"clientScopeRemoveError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      {showAssign && (\n        <AddRoleMappingModal\n          id={id}\n          type={type}\n          name={name}\n          onAssign={assignRoles}\n          onClose={() => setShowAssign(false)}\n        />\n      )}\n      <DeleteConfirm />\n      <KeycloakDataTable\n        data-testid=\"assigned-roles\"\n        key={`${id}${key}`}\n        loader={loader}\n        canSelectAll\n        onSelect={(rows) => setSelected(rows)}\n        searchPlaceholderKey=\"searchByName\"\n        ariaLabelKey=\"clientScopeList\"\n        isRowDisabled={(value) =>\n          (value.role as CompositeRole).isInherited || false\n        }\n        toolbarItem={\n          <>\n            <ToolbarItem>\n              <Checkbox\n                label={t(\"hideInheritedRoles\")}\n                id=\"hideInheritedRoles\"\n                data-testid=\"hideInheritedRoles\"\n                isChecked={hide}\n                onChange={(_event, check) => {\n                  setHide(check);\n                  refresh();\n                }}\n              />\n            </ToolbarItem>\n            {isManager && (\n              <>\n                <ToolbarItem>\n                  <Button\n                    data-testid=\"assignRole\"\n                    onClick={() => setShowAssign(true)}\n                  >\n                    {t(\"assignRole\")}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    variant=\"link\"\n                    data-testid=\"unAssignRole\"\n                    onClick={toggleDeleteDialog}\n                    isDisabled={selected.length === 0}\n                  >\n                    {t(\"unAssignRole\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            )}\n          </>\n        }\n        actions={\n          isManager\n            ? [\n                {\n                  title: t(\"unAssignRole\"),\n                  onRowClick: async (role) => {\n                    setSelected([role]);\n                    toggleDeleteDialog();\n                    return false;\n                  },\n                } as Action<Awaited<ReturnType<typeof loader>>[0]>,\n              ]\n            : []\n        }\n        columns={[\n          {\n            name: \"role.name\",\n            displayKey: \"name\",\n            transforms: [cellWidth(30)],\n            cellRenderer: ServiceRole,\n          },\n          {\n            name: \"role.isInherited\",\n            displayKey: \"inherent\",\n            cellFormatters: [upperCaseFormatter(), emptyFormatter()],\n          },\n          {\n            name: \"role.description\",\n            displayKey: \"description\",\n            cellFormatters: [translationFormatter(t)],\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(`noRoles-${type}`)}\n            instructions={t(`noRolesInstructions-${type}`)}\n            primaryActionText={t(\"assignRole\")}\n            onPrimaryAction={() => setShowAssign(true)}\n            secondaryActions={[\n              {\n                text: t(\"showInheritedRoles\"),\n                onClick: () => {\n                  setHide(false);\n                  refresh();\n                },\n              },\n            ]}\n          />\n        }\n      />\n    </>\n  );\n};\n","import {\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  Modal,\n  ModalVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { translationFormatter } from \"../../utils/translationFormatter\";\nimport useLocaleSort from \"../../utils/useLocaleSort\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { ResourcesKey, Row, ServiceRole } from \"./RoleMapping\";\nimport { getAvailableRoles } from \"./queries\";\nimport { getAvailableClientRoles } from \"./resource\";\n\ntype AddRoleMappingModalProps = {\n  id: string;\n  type: ResourcesKey;\n  name?: string;\n  isRadio?: boolean;\n  onAssign: (rows: Row[]) => void;\n  onClose: () => void;\n  isLDAPmapper?: boolean;\n};\n\ntype FilterType = \"roles\" | \"clients\";\n\nexport const AddRoleMappingModal = ({\n  id,\n  name,\n  type,\n  isRadio = false,\n  isLDAPmapper,\n  onAssign,\n  onClose,\n}: AddRoleMappingModalProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { hasAccess } = useAccess();\n  const canViewRealmRoles = hasAccess(\"view-realm\") || hasAccess(\"query-users\");\n\n  const [searchToggle, setSearchToggle] = useState(false);\n\n  const [filterType, setFilterType] = useState<FilterType>(\"clients\");\n  const [selectedRows, setSelectedRows] = useState<Row[]>([]);\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const localeSort = useLocaleSort();\n  const compareRow = ({ role: { name } }: Row) => name?.toUpperCase();\n\n  const loader = async (\n    first?: number,\n    max?: number,\n    search?: string,\n  ): Promise<Row[]> => {\n    const params: Record<string, string | number> = {\n      first: first!,\n      max: max!,\n    };\n\n    if (search) {\n      params.search = search;\n    }\n\n    const roles = await getAvailableRoles(adminClient, type, { ...params, id });\n    const sorted = localeSort(roles, compareRow);\n    return sorted.map((row) => {\n      return {\n        role: row.role,\n        id: row.role.id,\n      };\n    });\n  };\n\n  const clientRolesLoader = async (\n    first?: number,\n    max?: number,\n    search?: string,\n  ): Promise<Row[]> => {\n    const roles = await getAvailableClientRoles(adminClient, {\n      id,\n      type,\n      first: first || 0,\n      max: max || 10,\n      search,\n    });\n\n    return localeSort(\n      roles.map((e) => ({\n        client: { clientId: e.client, id: e.clientId },\n        role: { id: e.id, name: e.role, description: e.description },\n        id: e.id,\n      })),\n      ({ client: { clientId }, role: { name } }) => `${clientId}${name}`,\n    );\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      title={\n        isLDAPmapper ? t(\"assignRole\") : t(\"assignRolesTo\", { client: name })\n      }\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"assign\"\n          key=\"confirm\"\n          isDisabled={selectedRows.length === 0}\n          variant=\"primary\"\n          onClick={() => {\n            onAssign(selectedRows);\n            onClose();\n          }}\n        >\n          {t(\"assign\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        key={key}\n        onSelect={(rows) => setSelectedRows([...rows])}\n        searchPlaceholderKey=\"searchByRoleName\"\n        isPaginated={!(filterType === \"roles\" && type !== \"roles\")}\n        searchTypeComponent={\n          canViewRealmRoles && (\n            <ToolbarItem>\n              <Dropdown\n                onOpenChange={(isOpen) => setSearchToggle(isOpen)}\n                onSelect={() => {\n                  setFilterType(filterType === \"roles\" ? \"clients\" : \"roles\");\n                  setSearchToggle(false);\n                  refresh();\n                }}\n                toggle={(ref) => (\n                  <MenuToggle\n                    data-testid=\"filter-type-dropdown\"\n                    ref={ref}\n                    onClick={() => setSearchToggle(!searchToggle)}\n                    icon={<FilterIcon />}\n                  >\n                    {filterType === \"roles\"\n                      ? t(\"filterByRoles\")\n                      : t(\"filterByClients\")}\n                  </MenuToggle>\n                )}\n                isOpen={searchToggle}\n              >\n                <DropdownList>\n                  <DropdownItem key=\"filter-type\" data-testid={filterType}>\n                    {filterType === \"roles\"\n                      ? t(\"filterByClients\")\n                      : t(\"filterByRoles\")}\n                  </DropdownItem>\n                </DropdownList>\n              </Dropdown>\n            </ToolbarItem>\n          )\n        }\n        canSelectAll\n        isRadio={isRadio}\n        loader={filterType === \"roles\" ? loader : clientRolesLoader}\n        ariaLabelKey=\"roles\"\n        columns={[\n          {\n            name: \"name\",\n            cellRenderer: ServiceRole,\n          },\n          {\n            name: \"role.description\",\n            displayKey: \"description\",\n            cellFormatters: [translationFormatter(t)],\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"noRoles\")}\n            instructions={t(\"noRealmRolesToAssign\")}\n            secondaryActions={[\n              {\n                text: t(\"filterByClients\"),\n                onClick: () => {\n                  setFilterType(\"clients\");\n                  refresh();\n                },\n              },\n            ]}\n          />\n        }\n      />\n    </Modal>\n  );\n};\n"],"names":["groupFunctions","clientFunctions","mapping","castAdminClient","adminClient","resource","applyQuery","type","query","params","deleteMapping","id","rows","row","role","getMapping","result","roles","r","client","getEffectiveRoles","parentRoles","getAvailableRoles","fetchEndpoint","first","max","search","endpoint","fetchAdminUI","getAvailableClientRoles","getEffectiveClientRoles","findUsers","fetchUsedBy","mapRoles","assignedRoles","effectiveRoles","hide","ServiceRole","jsxs","Fragment","Badge","RoleMapping","name","isManager","save","useAdminClient","t","useTranslation","addAlert","addError","useAlerts","key","setKey","useState","refresh","setHide","showAssign","setShowAssign","selected","setSelected","assignRoles","loader","effectiveClientRoles","e","clientRole","realmRolesMapping","clientMapping","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","AlertVariant","error","jsx","AddRoleMappingModal","KeycloakDataTable","value","ToolbarItem","Checkbox","_event","check","Button","cellWidth","upperCaseFormatter","emptyFormatter","translationFormatter","ListEmptyState","isRadio","isLDAPmapper","onAssign","onClose","hasAccess","useAccess","canViewRealmRoles","searchToggle","setSearchToggle","filterType","setFilterType","selectedRows","setSelectedRows","localeSort","useLocaleSort","compareRow","clientRolesLoader","clientId","Modal","ModalVariant","Dropdown","isOpen","ref","MenuToggle","FilterIcon","DropdownList","DropdownItem"],"mappings":"kfAmDA,MAAMA,EAAkC,CACtC,OAAQ,CAAC,wBAAyB,sBAAsB,EACxD,cAAe,CACb,mBACA,iCACA,iCACF,EACA,cAAe,CACb,kCACA,gCACF,CACF,EAEMC,EAAmC,CACvC,OAAQ,CAAC,yBAA0B,uBAAuB,EAC1D,cAAe,CACb,oBACA,kCACA,kCACF,EACA,cAAe,CACb,mCACA,iCACF,CACF,EAEMC,EAA2B,CAC/B,OAAQF,EACR,MAAOA,EACP,aAAcC,EACd,QAASA,EACT,MAAO,CACL,OAAQ,CAAC,oBAAqB,mBAAmB,EACjD,cAAe,CACb,oBACA,oBACA,4BACF,EACA,cAAe,CAAC,YAAa,MAAM,CACrC,CACF,EAOME,GAAkB,CACtBC,EACAC,IAEAD,EAAYC,CAAQ,EAIhBC,EAAa,CACjBF,EACAG,EACAC,KACGC,IAEHN,GAAgBC,EAAaG,CAAI,EAAEC,CAAK,EAAE,GAAGC,CAAM,EAExCC,GAAgB,CAC3BN,EACAG,EACAI,EACAC,IAEAA,EAAK,IAAKC,GAAQ,CACV,MAAAC,EAAO,CAAE,GAAID,EAAI,KAAK,GAAK,KAAMA,EAAI,KAAK,MAC1CL,EAAQN,EAAQK,CAAI,GAAG,OAAOM,EAAI,OAAS,EAAI,CAAC,EAE/C,OAAAP,EACLF,EACAG,EACAC,EACA,CACE,GAAAG,EACA,eAAgBE,EAAI,QAAQ,GAC5B,OAAQA,EAAI,QAAQ,GACpB,MAAO,CAACC,CAAI,CACd,EACA,CAACA,CAAI,CAAA,CAET,CAAC,EAEUC,GAAa,MACxBX,EACAG,EACAI,IACoC,CACpC,MAAMH,EAAQN,EAAQK,CAAI,EAAG,cAAc,CAAC,EACtCS,EAASV,EAAWF,EAAaG,EAAMC,EAAO,CAAE,GAAAG,EAAI,EAC1D,GAAIJ,IAAS,QACJ,OAAAS,EAET,MAAMC,EAAQ,MAAMD,EAcb,MAAA,CACL,eAdkB,MAAM,QAAQ,IAChCC,EACG,OAAQC,GAAMA,EAAE,UAAU,EAC1B,IAAI,MAAOJ,GAAS,CACnB,MAAMK,EAAS,MAAMf,EAAY,QAAQ,QAAQ,CAC/C,GAAIU,EAAK,WAAA,CACV,EAED,OAAAA,EAAK,YAAcK,GAAQ,SACpB,CAAE,GAAGA,EAAQ,SAAU,CAACL,CAAI,CAAE,CAAA,CACtC,CAAA,EAKH,cAAeG,EAAM,OAAQC,GAAM,CAACA,EAAE,UAAU,CAAA,CAEpD,EAEaE,GAAoB,MAC/BhB,EACAG,EACAI,IACmB,CACnB,MAAMH,EAAQN,EAAQK,CAAI,EAAG,cAAc,CAAC,EAC5C,GAAIA,IAAS,QACH,OAAA,MAAMD,EAAWF,EAAaG,EAAMC,EAAO,CAAE,GAAAG,EAAI,GAAG,IAAKG,IAAU,CACzE,KAAAA,CACA,EAAA,EAEE,MAAAG,EAAQ,MAAMX,EAAWF,EAAaG,EAAMC,EAAO,CAAE,GAAAG,EAAI,EACzDU,EAAc,MAAM,QAAQ,IAChCJ,EACG,OAAQC,GAAMA,EAAE,SAAS,EACzB,IAAKA,GAAMZ,EAAWF,EAAaG,EAAMC,EAAO,CAAE,GAAIU,EAAE,EAAA,CAAI,CAAC,CAAA,EAElE,MAAO,CAAC,GAAGD,EAAO,GAAGI,EAAY,KAAM,CAAA,EAAE,IAAKP,IAAU,CAAE,KAAAA,GAAO,CACnE,EAEaQ,GAAoB,MAC/BlB,EACAG,EACAE,IACmB,CACnB,MAAMD,EAAQN,EAAQK,CAAI,EAAG,cAAc,CAAC,EACpC,OAAA,MAAMD,EAAWF,EAAaG,EAAMC,EAAOC,CAAM,GAAG,IAAKK,IAAU,CACzE,KAAAA,CACA,EAAA,CACJ,ECvKMS,EAAgB,MACpBnB,EACA,CAAE,GAAAO,EAAI,KAAAJ,EAAM,MAAAiB,EAAO,IAAAC,EAAK,OAAAC,EAAQ,SAAAC,KAEhCC,EAAaxB,EAAa,WAAWuB,CAAQ,IAAIpB,CAAI,IAAII,CAAE,GAAI,CAC7D,OAAQa,GAAS,GAAG,SAAS,EAC7B,KAAMC,GAAO,IAAI,SAAS,EAC1B,OAAQC,GAAU,EACpB,CAAC,EAEUG,GAA0B,CACrCzB,EACAI,IAEAe,EAAcnB,EAAa,CAAE,GAAGI,EAAO,SAAU,iBAAA,CAAmB,EAEzDsB,GAA0B,CACrC1B,EACAI,IAEAe,EAAcnB,EAAa,CAAE,GAAGI,EAAO,SAAU,iBAAA,CAAmB,EAoBzDuB,GAAY,CACvB3B,EACAI,IAEAoB,EACExB,EACA,0BACAI,CACF,EAEWwB,GAAc,CACzB5B,EACAI,IAEAe,EAAcnB,EAAa,CACzB,GAAGI,EACH,SAAU,2BACZ,CAAC,ECjDUyB,GAAW,CACtBC,EACAC,EACAC,IACG,CACH,GAAIA,EACAF,EAAc,IAAKrB,IAAS,CAC1B,GAAGA,EACH,KAAM,CACJ,GAAGA,EAAI,KACP,YAAa,EACf,CACA,EAAA,EACFsB,EAAe,IAAKtB,IAAS,CAC3B,GAAGA,EACH,KAAM,CACJ,GAAGA,EAAI,KACP,YACEqB,EAAc,KAAMhB,GAAMA,EAAE,KAAK,KAAOL,EAAI,KAAK,EAAE,IAAM,MAC7D,CAAA,EACA,CACR,EAEawB,EAAc,CAAC,CAAE,KAAAvB,EAAM,OAAAK,KAE/BmB,EAAAC,EAAA,CAAA,SAAA,CAAQpB,GAAA,YACNqB,GAAM,CAAA,OAAM,GAAC,UAAU,4CACrB,WAAO,QACV,CAAA,EAED1B,EAAK,IAAA,EACR,EAaW2B,GAAc,CAAC,CAC1B,KAAAC,EACA,GAAA/B,EACA,KAAAJ,EACA,UAAAoC,EAAY,GACZ,KAAAC,CACF,IAAwB,CAChB,KAAA,CAAE,YAAAxC,GAAgByC,IAElB,CAAE,EAAAC,GAAMC,IACR,CAAE,SAAAC,EAAU,SAAAC,CAAS,EAAIC,EAAU,EAEnC,CAACC,EAAKC,CAAM,EAAIC,EAAS,CAAC,EAC1BC,EAAU,IAAMF,EAAOD,EAAM,CAAC,EAE9B,CAACf,EAAMmB,CAAO,EAAIF,EAAS,EAAI,EAC/B,CAACG,EAAYC,CAAa,EAAIJ,EAAS,EAAK,EAC5C,CAACK,EAAUC,CAAW,EAAIN,EAAgB,CAAE,CAAA,EAE5CO,EAAc,MAAOhD,GAAgB,CACzC,MAAMgC,EAAKhC,CAAI,EACP0C,GAAA,EAGJO,EAAS,SAAY,CACzB,IAAI1B,EAAwB,CAAA,EACxB2B,EAA8B,CAAA,EAE7B1B,IACHD,EAAiB,MAAMf,GAAkBhB,EAAaG,EAAMI,CAAE,EAG5DmD,GAAA,MAAMhC,GAAwB1B,EAAa,CACzC,KAAAG,EACA,GAAAI,CAAA,CACD,GACD,IAAKoD,IAAO,CACZ,OAAQ,CAAE,SAAUA,EAAE,OAAQ,GAAIA,EAAE,QAAS,EAC7C,KAAM,CAAE,GAAIA,EAAE,GAAI,KAAMA,EAAE,KAAM,YAAaA,EAAE,WAAY,CAC3D,EAAA,EAEF5B,EAAiBA,EAAe,OAC7BrB,GACC,CAACgD,EAAqB,KACnBE,GAAeA,EAAW,KAAK,KAAOlD,EAAK,KAAK,EACnD,CAAA,GAIN,MAAMG,EAAQ,MAAMF,GAAWX,EAAaG,EAAMI,CAAE,EAC9CsD,EACJhD,EAAM,eAAe,IAAKH,IAAU,CAAE,KAAAA,CAAA,EAAO,GAAK,GAC9CoD,EAAgB,OAAO,OAAOjD,EAAM,gBAAkB,CAAE,CAAA,EAC3D,IAAKE,GACJA,EAAO,SAAS,IAAKL,IAA8B,CACjD,OAAQ,CAAE,SAAUK,EAAO,OAAQ,GAAGA,CAAO,EAC7C,KAAAL,CAAA,EACA,GAEH,KAAK,EAED,MAAA,CACL,GAAGmB,GACD,CAAC,GAAGiC,EAAe,GAAGD,CAAiB,EACvC,CAAC,GAAGH,EAAsB,GAAG3B,CAAc,EAC3CC,CACF,CAAA,CACF,EAGI,CAAC+B,EAAoBC,CAAa,EAAIC,GAAiB,CAC3D,SAAU,qBACV,WAAYvB,EAAE,uBAAwB,CAAE,MAAOY,EAAS,OAAQ,EAChE,oBAAqB,SACrB,sBAAuBY,EAAc,OACrC,SAAU,IAAM,CACdX,EAAY,CAAE,CAAA,EACNL,GACV,EACA,UAAW,SAAY,CACjB,GAAA,CACF,MAAM,QAAQ,IAAI5C,GAAcN,EAAaG,EAAMI,EAAI+C,CAAQ,CAAC,EAChEV,EAASF,EAAE,0BAA0B,EAAGyB,EAAa,OAAO,EAC5DZ,EAAY,CAAE,CAAA,EACNL,UACDkB,EAAO,CACdvB,EAAS,yBAA0BuB,CAAK,CAC1C,CACF,CAAA,CACD,EAED,OAEKlC,EAAAC,EAAA,CAAA,SAAA,CACCiB,GAAAiB,EAACC,GAAA,CACC,GAAA/D,EACA,KAAAJ,EACA,KAAAmC,EACA,SAAUkB,EACV,QAAS,IAAMH,EAAc,EAAK,CAAA,CACpC,IAEDW,EAAc,EAAA,EACfK,EAACE,EAAA,CACC,cAAY,iBAEZ,OAAAd,EACA,aAAY,GACZ,SAAWjD,GAAS+C,EAAY/C,CAAI,EACpC,qBAAqB,eACrB,aAAa,kBACb,cAAgBgE,GACbA,EAAM,KAAuB,aAAe,GAE/C,YAEItC,EAAAC,EAAA,CAAA,SAAA,CAAAkC,EAACI,EACC,CAAA,SAAAJ,EAACK,EAAA,CACC,MAAOhC,EAAE,oBAAoB,EAC7B,GAAG,qBACH,cAAY,qBACZ,UAAWV,EACX,SAAU,CAAC2C,EAAQC,IAAU,CAC3BzB,EAAQyB,CAAK,EACL1B,GACV,CAAA,CAAA,EAEJ,EACCX,GAEGL,EAAAC,EAAA,CAAA,SAAA,CAAAkC,EAACI,EACC,CAAA,SAAAJ,EAACQ,EAAA,CACC,cAAY,aACZ,QAAS,IAAMxB,EAAc,EAAI,EAEhC,WAAE,YAAY,CAAA,CAAA,EAEnB,IACCoB,EACC,CAAA,SAAAJ,EAACQ,EAAA,CACC,QAAQ,OACR,cAAY,eACZ,QAASd,EACT,WAAYT,EAAS,SAAW,EAE/B,WAAE,cAAc,CAAA,CAAA,EAErB,CAAA,EACF,CAAA,EAEJ,EAEF,QACEf,EACI,CACE,CACE,MAAOG,EAAE,cAAc,EACvB,WAAY,MAAOhC,IACL6C,EAAA,CAAC7C,CAAI,CAAC,EACCqD,IACZ,GAEX,CAAA,EAEF,CAAC,EAEP,QAAS,CACP,CACE,KAAM,YACN,WAAY,OACZ,WAAY,CAACe,EAAU,EAAE,CAAC,EAC1B,aAAc7C,CAChB,EACA,CACE,KAAM,mBACN,WAAY,WACZ,eAAgB,CAAC8C,KAAsBC,IAAgB,CACzD,EACA,CACE,KAAM,mBACN,WAAY,cACZ,eAAgB,CAACC,EAAqBvC,CAAC,CAAC,CAC1C,CACF,EACA,WACE2B,EAACa,EAAA,CACC,QAASxC,EAAE,WAAWvC,CAAI,EAAE,EAC5B,aAAcuC,EAAE,uBAAuBvC,CAAI,EAAE,EAC7C,kBAAmBuC,EAAE,YAAY,EACjC,gBAAiB,IAAMW,EAAc,EAAI,EACzC,iBAAkB,CAChB,CACE,KAAMX,EAAE,oBAAoB,EAC5B,QAAS,IAAM,CACbS,EAAQ,EAAK,EACLD,GACV,CACF,CACF,CAAA,CACF,CAAA,EA9FG,GAAG3C,CAAE,GAAGwC,CAAG,EAgGlB,CACF,CAAA,CAAA,CAEJ,EC3PauB,GAAsB,CAAC,CAClC,GAAA/D,EACA,KAAA+B,EACA,KAAAnC,EACA,QAAAgF,EAAU,GACV,aAAAC,EACA,SAAAC,EACA,QAAAC,CACF,IAAgC,CACxB,KAAA,CAAE,YAAAtF,GAAgByC,IAElB,CAAE,EAAAC,GAAMC,IACR,CAAE,UAAA4C,GAAcC,KAChBC,EAAoBF,EAAU,YAAY,GAAKA,EAAU,aAAa,EAEtE,CAACG,EAAcC,CAAe,EAAI1C,EAAS,EAAK,EAEhD,CAAC2C,EAAYC,CAAa,EAAI5C,EAAqB,SAAS,EAC5D,CAAC6C,EAAcC,CAAe,EAAI9C,EAAgB,CAAE,CAAA,EACpD,CAACF,EAAKC,CAAM,EAAIC,EAAS,CAAC,EAC1BC,EAAU,IAAMF,EAAOD,EAAM,CAAC,EAE9BiD,EAAaC,KACbC,EAAa,CAAC,CAAE,KAAM,CAAE,KAAA5D,EAAkBA,IAAAA,GAAM,cAEhDmB,EAAS,MACbrC,EACAC,EACAC,IACmB,CACnB,MAAMjB,EAA0C,CAC9C,MAAAe,EACA,IAAAC,CAAA,EAGEC,IACFjB,EAAO,OAASiB,GAGZ,MAAAT,EAAQ,MAAMK,GAAkBlB,EAAaG,EAAM,CAAE,GAAGE,EAAQ,GAAAE,CAAA,CAAI,EAEnE,OADQyF,EAAWnF,EAAOqF,CAAU,EAC7B,IAAKzF,IACV,CACL,KAAMA,EAAI,KACV,GAAIA,EAAI,KAAK,EAAA,EAEhB,CAAA,EAGG0F,EAAoB,MACxB/E,EACAC,EACAC,IACmB,CACb,MAAAT,EAAQ,MAAMY,GAAwBzB,EAAa,CACvD,GAAAO,EACA,KAAAJ,EACA,MAAOiB,GAAS,EAChB,IAAKC,GAAO,GACZ,OAAAC,CAAA,CACD,EAEM,OAAA0E,EACLnF,EAAM,IAAK8C,IAAO,CAChB,OAAQ,CAAE,SAAUA,EAAE,OAAQ,GAAIA,EAAE,QAAS,EAC7C,KAAM,CAAE,GAAIA,EAAE,GAAI,KAAMA,EAAE,KAAM,YAAaA,EAAE,WAAY,EAC3D,GAAIA,EAAE,EAAA,EACN,EACF,CAAC,CAAE,OAAQ,CAAE,SAAAyC,CAAY,EAAA,KAAM,CAAE,KAAA9D,EAAO,IAAM,GAAG8D,CAAQ,GAAG9D,CAAI,EAAA,CAClE,EAIA,OAAA+B,EAACgC,GAAA,CACC,QAASC,GAAa,MACtB,MACElB,EAAe1C,EAAE,YAAY,EAAIA,EAAE,gBAAiB,CAAE,OAAQJ,EAAM,EAEtE,OAAM,GACN,QAAAgD,EACA,QAAS,CACPjB,EAACQ,EAAA,CACC,cAAY,SAEZ,WAAYiB,EAAa,SAAW,EACpC,QAAQ,UACR,QAAS,IAAM,CACbT,EAASS,CAAY,EACbR,GACV,EAEC,WAAE,QAAQ,CAAA,EARP,SASN,EACAjB,EAACQ,EAAA,CACC,cAAY,SAEZ,QAAQ,OACR,QAASS,EAER,WAAE,QAAQ,CAAA,EAJP,QAKN,CACF,EAEA,SAAAjB,EAACE,EAAA,CAEC,SAAW/D,GAASuF,EAAgB,CAAC,GAAGvF,CAAI,CAAC,EAC7C,qBAAqB,mBACrB,YAAa,EAAEoF,IAAe,SAAWzF,IAAS,SAClD,oBACEsF,GACEpB,EAACI,EACC,CAAA,SAAAJ,EAACkC,GAAA,CACC,aAAeC,GAAWb,EAAgBa,CAAM,EAChD,SAAU,IAAM,CACAX,EAAAD,IAAe,QAAU,UAAY,OAAO,EAC1DD,EAAgB,EAAK,EACbzC,GACV,EACA,OAASuD,GACPpC,EAACqC,GAAA,CACC,cAAY,uBACZ,IAAAD,EACA,QAAS,IAAMd,EAAgB,CAACD,CAAY,EAC5C,OAAOiB,GAAW,EAAA,EAEjB,SACGjE,MADY,QACV,gBACA,iBADe,CACE,CACzB,EAEF,OAAQgD,EAER,SAACrB,EAAAuC,GAAA,CACC,SAACvC,EAAAwC,GAAA,CAA+B,cAAajB,EAC1C,SACGlD,EADHkD,IAAe,QACV,kBACA,eADiB,CACF,EAHL,aAIlB,EACF,CAAA,CAAA,EAEJ,EAGJ,aAAY,GACZ,QAAAT,EACA,OAAQS,IAAe,QAAUnC,EAAS0C,EAC1C,aAAa,QACb,QAAS,CACP,CACE,KAAM,OACN,aAAclE,CAChB,EACA,CACE,KAAM,mBACN,WAAY,cACZ,eAAgB,CAACgD,EAAqBvC,CAAC,CAAC,CAC1C,CACF,EACA,WACE2B,EAACa,EAAA,CACC,QAASxC,EAAE,SAAS,EACpB,aAAcA,EAAE,sBAAsB,EACtC,iBAAkB,CAChB,CACE,KAAMA,EAAE,iBAAiB,EACzB,QAAS,IAAM,CACbmD,EAAc,SAAS,EACf3C,GACV,CACF,CACF,CAAA,CACF,CAAA,EAnEGH,CAqEP,CAAA,CAAA,CAGN"}