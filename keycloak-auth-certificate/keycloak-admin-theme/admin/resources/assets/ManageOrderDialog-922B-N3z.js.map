{"version":3,"file":"ManageOrderDialog-922B-N3z.js","sources":["../../../../../../../src/identity-providers/ManageOrderDialog.tsx"],"sourcesContent":["import type IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport {\n  KeycloakSpinner,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  DataList,\n  DataListCell,\n  DataListControl,\n  DataListDragButton,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  DragDrop,\n  Draggable,\n  DraggableItemPosition,\n  Droppable,\n  Modal,\n  ModalVariant,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\n\ntype ManageOrderDialogProps = {\n  orgId?: string;\n  hideRealmBasedIdps?: boolean;\n  onClose: () => void;\n};\n\nexport const ManageOrderDialog = ({\n  orgId,\n  hideRealmBasedIdps = false,\n  onClose,\n}: ManageOrderDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const [liveText, setLiveText] = useState(\"\");\n  const [providers, setProviders] =\n    useState<IdentityProviderRepresentation[]>();\n  const [order, setOrder] = useState<string[]>([]);\n\n  const onDragStart = ({ index }: DraggableItemPosition) => {\n    setLiveText(t(\"onDragStart\", { item: order[index] }));\n    return true;\n  };\n\n  const onDragMove = ({ index }: DraggableItemPosition) => {\n    setLiveText(t(\"onDragMove\", { item: order[index] }));\n  };\n\n  const onDragFinish = (\n    source: DraggableItemPosition,\n    dest?: DraggableItemPosition,\n  ) => {\n    if (dest) {\n      const result = [...order];\n      const [removed] = result.splice(source.index, 1);\n      result.splice(dest.index, 0, removed);\n      setLiveText(t(\"onDragFinish\", { list: result }));\n      setOrder(result);\n      return true;\n    } else {\n      setLiveText(t(\"onDragCancel\"));\n      return false;\n    }\n  };\n\n  useFetch(\n    () =>\n      orgId\n        ? adminClient.organizations.listIdentityProviders({ orgId })\n        : adminClient.identityProviders.find({ realmOnly: hideRealmBasedIdps }),\n    (providers) => {\n      setProviders(providers);\n      setOrder(\n        sortBy(providers, [\"config.guiOrder\", \"alias\"]).map(\n          (provider) => provider.alias!,\n        ),\n      );\n    },\n    [],\n  );\n\n  if (!providers) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"manageDisplayOrder\")}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          onClick={async () => {\n            const updates = order.map((alias, index) => {\n              const provider = providers.find((p) => p.alias === alias)!;\n              provider.config!.guiOrder = index;\n              return adminClient.identityProviders.update({ alias }, provider);\n            });\n\n            try {\n              await Promise.all(updates);\n              addAlert(t(\"orderChangeSuccess\"));\n            } catch (error) {\n              addError(\"orderChangeError\", error);\n            }\n\n            onClose();\n          }}\n        >\n          {t(\"save\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent className=\"pf-v5-u-pb-lg\">\n        <Text>{t(\"orderDialogIntro\")}</Text>\n      </TextContent>\n\n      <DragDrop\n        onDrag={onDragStart}\n        onDragMove={onDragMove}\n        onDrop={onDragFinish}\n      >\n        <Droppable hasNoWrapper>\n          <DataList\n            aria-label={t(\"manageOrderTableAria\")}\n            data-testid=\"manageOrderDataList\"\n            isCompact\n          >\n            {order.map((alias) => (\n              <Draggable hasNoWrapper key={alias}>\n                <DataListItem aria-label={alias} id={alias}>\n                  <DataListItemRow>\n                    <DataListControl>\n                      <DataListDragButton aria-label={t(\"dragHelp\")} />\n                    </DataListControl>\n                    <DataListItemCells\n                      dataListCells={[\n                        <DataListCell key={alias} data-testid={alias}>\n                          {alias}\n                        </DataListCell>,\n                      ]}\n                    />\n                  </DataListItemRow>\n                </DataListItem>\n              </Draggable>\n            ))}\n          </DataList>\n        </Droppable>\n      </DragDrop>\n      <div className=\"pf-v5-screen-reader\" aria-live=\"assertive\">\n        {liveText}\n      </div>\n    </Modal>\n  );\n};\n"],"names":["ManageOrderDialog","orgId","hideRealmBasedIdps","onClose","adminClient","useAdminClient","t","useTranslation","addAlert","addError","useAlerts","liveText","setLiveText","useState","providers","setProviders","order","setOrder","onDragStart","index","onDragMove","onDragFinish","source","dest","result","removed","useFetch","sortBy","provider","jsxs","Modal","ModalVariant","jsx","Button","updates","alias","p","error","ButtonVariant","TextContent","Text","DragDrop","Droppable","DataList","Draggable","DataListItem","DataListItemRow","DataListControl","DataListDragButton","DataListItemCells","DataListCell","KeycloakSpinner"],"mappings":"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"}