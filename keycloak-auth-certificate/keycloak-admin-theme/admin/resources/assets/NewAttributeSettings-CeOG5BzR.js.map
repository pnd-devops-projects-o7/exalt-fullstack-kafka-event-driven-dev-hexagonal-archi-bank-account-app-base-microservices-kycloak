{"version":3,"file":"NewAttributeSettings-CeOG5BzR.js","sources":["../../../../../../../src/realm-settings/user-profile/attribute/AttributeAnnotations.tsx","../../../../../../../src/realm-settings/user-profile/attribute/AttributeGeneralSettings.tsx","../../../../../../../src/realm-settings/user-profile/attribute/AttributePermission.tsx","../../../../../../../src/realm-settings/user-profile/attribute/ValidatorSelect.tsx","../../../../../../../src/realm-settings/user-profile/attribute/AddValidatorDialog.tsx","../../../../../../../src/realm-settings/user-profile/attribute/AttributeValidations.tsx","../../../../../../../src/realm-settings/NewAttributeSettings.tsx"],"sourcesContent":["import { useTranslation } from \"react-i18next\";\nimport { FormGroup, Grid, GridItem } from \"@patternfly/react-core\";\n\nimport { FormAccess } from \"../../../components/form/FormAccess\";\nimport { KeyValueInput } from \"../../../components/key-value-form/KeyValueInput\";\n\nimport \"../../realm-settings-section.css\";\n\nexport const AttributeAnnotations = () => {\n  const { t } = useTranslation();\n\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"annotations\")}\n        fieldId=\"kc-annotations\"\n        className=\"kc-annotations-label\"\n      >\n        <Grid className=\"kc-annotations\">\n          <GridItem>\n            <KeyValueInput\n              name=\"annotations\"\n              label={t(\"annotations\")}\n              defaultKeyValue={[\n                {\n                  key: \"inputType\",\n                  label: t(\"inputType\"),\n                  values: [\n                    \"text\",\n                    \"textarea\",\n                    \"select\",\n                    \"select-radiobuttons\",\n                    \"multiselect\",\n                    \"multiselect-checkboxes\",\n                    \"html5-email\",\n                    \"html5-tel\",\n                    \"html5-url\",\n                    \"html5-number\",\n                    \"html5-range\",\n                    \"html5-datetime-local\",\n                    \"html5-date\",\n                    \"html5-month\",\n                    \"html5-week\",\n                    \"html5-time\",\n                  ],\n                },\n                {\n                  key: \"inputHelperTextBefore\",\n                  label: t(\"inputHelperTextBefore\"),\n                },\n                {\n                  key: \"inputHelperTextAfter\",\n                  label: t(\"inputHelperTextAfter\"),\n                },\n                {\n                  key: \"inputOptionLabelsI18nPrefix\",\n                  label: t(\"inputOptionLabelsI18nPrefix\"),\n                },\n                {\n                  key: \"inputTypePlaceholder\",\n                  label: t(\"inputTypePlaceholder\"),\n                },\n                {\n                  key: \"inputTypeSize\",\n                  label: t(\"inputTypeSize\"),\n                },\n                {\n                  key: \"inputTypeCols\",\n                  label: t(\"inputTypeCols\"),\n                },\n                {\n                  key: \"inputTypeRows\",\n                  label: t(\"inputTypeRows\"),\n                },\n                {\n                  key: \"inputTypeStep\",\n                  label: t(\"inputTypeStep\"),\n                },\n                {\n                  key: \"kcNumberFormat\",\n                  label: t(\"kcNumberFormat\"),\n                },\n                {\n                  key: \"kcNumberUnFormat\",\n                  label: t(\"kcNumberUnFormat\"),\n                },\n              ]}\n            />\n          </GridItem>\n        </Grid>\n      </FormGroup>\n    </FormAccess>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type { UserProfileConfig } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport {\n  FormErrorText,\n  HelpItem,\n  KeycloakSelect,\n  SelectControl,\n  SelectVariant,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Alert,\n  Button,\n  Divider,\n  FormGroup,\n  Grid,\n  GridItem,\n  Radio,\n  SelectOption,\n  Switch,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { GlobeRouteIcon } from \"@patternfly/react-icons\";\nimport { isEqual } from \"lodash-es\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useWatch,\n} from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../../admin-client\";\nimport { FormAccess } from \"../../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../../components/SwitchControl\";\nimport { useRealm } from \"../../../context/realm-context/RealmContext\";\nimport { useParams } from \"../../../utils/useParams\";\nimport useToggle from \"../../../utils/useToggle\";\nimport { USERNAME_EMAIL } from \"../../NewAttributeSettings\";\nimport { AttributeParams } from \"../../routes/Attribute\";\nimport {\n  AddTranslationsDialog,\n  TranslationsType,\n} from \"./AddTranslationsDialog\";\n\nimport \"../../realm-settings-section.css\";\n\nconst REQUIRED_FOR = [\n  { label: \"requiredForLabel.both\", value: [\"admin\", \"user\"] },\n  { label: \"requiredForLabel.users\", value: [\"user\"] },\n  { label: \"requiredForLabel.admins\", value: [\"admin\"] },\n] as const;\n\ntype TranslationForm = {\n  locale: string;\n  value: string;\n};\n\ntype Translations = {\n  key: string;\n  translations: TranslationForm[];\n};\n\nexport type AttributeGeneralSettingsProps = {\n  onHandlingTranslationData: (data: Translations) => void;\n  onHandlingGeneratedDisplayName: (displayName: string) => void;\n};\n\nexport const AttributeGeneralSettings = ({\n  onHandlingTranslationData,\n  onHandlingGeneratedDisplayName,\n}: AttributeGeneralSettingsProps) => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const { realmRepresentation: realm } = useRealm();\n  const form = useFormContext();\n  const [clientScopes, setClientScopes] =\n    useState<ClientScopeRepresentation[]>();\n  const [config, setConfig] = useState<UserProfileConfig>();\n  const [selectEnabledWhenOpen, setSelectEnabledWhenOpen] = useState(false);\n  const [selectRequiredForOpen, setSelectRequiredForOpen] = useState(false);\n  const [addTranslationsModalOpen, toggleModal] = useToggle();\n  const { attributeName } = useParams<AttributeParams>();\n  const editMode = attributeName ? true : false;\n  const [newAttributeName, setNewAttributeName] = useState(\"\");\n  const [generatedDisplayName, setGeneratedDisplayName] = useState(\"\");\n  const [type, setType] = useState<TranslationsType>();\n  const [translationsData, setTranslationsData] = useState<Translations>({\n    key: \"\",\n    translations: [],\n  });\n  const displayNameRegex = /\\$\\{([^}]+)\\}/;\n\n  const handleAttributeNameChange = (\n    _event: React.FormEvent<HTMLInputElement>,\n    value: string,\n  ) => {\n    setNewAttributeName(value);\n    const newDisplayName =\n      value !== \"\" && realm?.internationalizationEnabled\n        ? \"${profile.attributes.\" + `${value}}`\n        : \"\";\n    setGeneratedDisplayName(newDisplayName);\n  };\n\n  const hasSelector = useWatch({\n    control: form.control,\n    name: \"hasSelector\",\n  });\n\n  const hasRequiredScopes = useWatch({\n    control: form.control,\n    name: \"hasRequiredScopes\",\n  });\n\n  const required = useWatch({\n    control: form.control,\n    name: \"isRequired\",\n    defaultValue: false,\n  });\n\n  const attributeDisplayName = useWatch({\n    control: form.control,\n    name: \"displayName\",\n  });\n\n  const displayNamePatternMatch = displayNameRegex.test(attributeDisplayName);\n\n  useFetch(() => adminClient.clientScopes.find(), setClientScopes, []);\n  useFetch(() => adminClient.users.getProfile(), setConfig, []);\n\n  const handleTranslationsData = (translationsData: Translations) => {\n    onHandlingTranslationData(translationsData);\n  };\n\n  const handleGeneratedDisplayName = (displayName: string) => {\n    onHandlingGeneratedDisplayName(displayName);\n  };\n\n  useEffect(() => {\n    handleTranslationsData(translationsData);\n    handleGeneratedDisplayName(generatedDisplayName);\n  }, [translationsData, generatedDisplayName]);\n\n  if (!clientScopes) {\n    return <KeycloakSpinner />;\n  }\n\n  function setHasSelector(hasSelector: boolean) {\n    form.setValue(\"hasSelector\", hasSelector);\n  }\n\n  function setHasRequiredScopes(hasRequiredScopes: boolean) {\n    form.setValue(\"hasRequiredScopes\", hasRequiredScopes);\n  }\n\n  const handleTranslationsAdded = (translationsData: Translations) => {\n    setTranslationsData(translationsData);\n  };\n\n  const handleToggleDialog = () => {\n    toggleModal();\n    handleTranslationsData(translationsData);\n    handleGeneratedDisplayName(generatedDisplayName);\n  };\n\n  const formattedAttributeDisplayName = attributeDisplayName?.substring(\n    2,\n    attributeDisplayName.length - 1,\n  );\n\n  return (\n    <>\n      {addTranslationsModalOpen && (\n        <AddTranslationsDialog\n          translationKey={\n            editMode\n              ? formattedAttributeDisplayName\n              : `profile.attributes.${newAttributeName}`\n          }\n          translations={translationsData}\n          type={type ?? \"displayName\"}\n          onTranslationsAdded={handleTranslationsAdded}\n          toggleDialog={handleToggleDialog}\n          onCancel={() => {\n            toggleModal();\n          }}\n        />\n      )}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormProvider {...form}>\n          <FormGroup\n            label={t(\"attributeName\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"upAttributeNameHelp\")}\n                fieldLabelId=\"attributeName\"\n              />\n            }\n            fieldId=\"kc-attribute-name\"\n            isRequired\n          >\n            <TextInput\n              isRequired\n              id=\"kc-attribute-name\"\n              defaultValue=\"\"\n              data-testid=\"attribute-name\"\n              isDisabled={editMode}\n              validated={form.formState.errors.name ? \"error\" : \"default\"}\n              {...form.register(\"name\", { required: true })}\n              onChange={handleAttributeNameChange}\n            />\n            {form.formState.errors.name && (\n              <FormErrorText message={t(\"validateAttributeName\")} />\n            )}\n          </FormGroup>\n          <FormGroup\n            label={t(\"attributeDisplayName\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"attributeDisplayNameHelp\")}\n                fieldLabelId=\"attributeDisplayName\"\n              />\n            }\n            fieldId=\"kc-attribute-display-name\"\n          >\n            <Grid hasGutter>\n              <GridItem span={realm?.internationalizationEnabled ? 11 : 12}>\n                <TextInput\n                  id=\"kc-attribute-display-name\"\n                  data-testid=\"attribute-display-name\"\n                  isDisabled={\n                    (realm?.internationalizationEnabled &&\n                      newAttributeName !== \"\") ||\n                    (editMode && displayNamePatternMatch)\n                  }\n                  value={\n                    editMode\n                      ? attributeDisplayName\n                      : realm?.internationalizationEnabled\n                        ? generatedDisplayName\n                        : undefined\n                  }\n                  {...form.register(\"displayName\")}\n                />\n                {generatedDisplayName && (\n                  <Alert\n                    className=\"pf-v5-u-mt-sm\"\n                    variant=\"info\"\n                    isInline\n                    isPlain\n                    title={t(\"addAttributeTranslationInfo\")}\n                  />\n                )}\n              </GridItem>\n              {realm?.internationalizationEnabled && (\n                <GridItem span={1}>\n                  <Button\n                    variant=\"link\"\n                    className=\"pf-m-plain kc-attribute-display-name-iconBtn\"\n                    data-testid=\"addAttributeTranslationBtn\"\n                    aria-label={t(\"addAttributeTranslationBtn\")}\n                    isDisabled={!newAttributeName && !editMode}\n                    onClick={() => {\n                      setType(\"displayName\");\n                      toggleModal();\n                    }}\n                    icon={<GlobeRouteIcon />}\n                  />\n                </GridItem>\n              )}\n            </Grid>\n          </FormGroup>\n          <DefaultSwitchControl\n            name=\"multivalued\"\n            label={t(\"multivalued\")}\n            labelIcon={t(\"multivaluedHelp\")}\n          />\n          <SelectControl\n            name=\"group\"\n            label={t(\"attributeGroup\")}\n            labelIcon={t(\"attributeGroupHelp\")}\n            controller={{\n              defaultValue: \"\",\n            }}\n            options={[\n              { key: \"\", value: t(\"none\") },\n              ...(config?.groups?.map((g) => ({\n                key: g.name!,\n                value: g.name!,\n              })) || []),\n            ]}\n          />\n          {!USERNAME_EMAIL.includes(attributeName) && (\n            <>\n              <Divider />\n              <FormGroup\n                label={t(\"enabledWhen\")}\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"enabledWhenTooltip\")}\n                    fieldLabelId=\"enabled-when\"\n                  />\n                }\n                fieldId=\"enabledWhen\"\n                hasNoPaddingTop\n              >\n                <Radio\n                  id=\"always\"\n                  data-testid=\"always\"\n                  isChecked={!hasSelector}\n                  name=\"enabledWhen\"\n                  label={t(\"always\")}\n                  onChange={() => setHasSelector(false)}\n                  className=\"pf-v5-u-mb-md\"\n                />\n                <Radio\n                  id=\"scopesAsRequested\"\n                  data-testid=\"scopesAsRequested\"\n                  isChecked={hasSelector}\n                  name=\"enabledWhen\"\n                  label={t(\"scopesAsRequested\")}\n                  onChange={() => setHasSelector(true)}\n                  className=\"pf-v5-u-mb-md\"\n                />\n              </FormGroup>\n              {hasSelector && (\n                <FormGroup fieldId=\"kc-scope-enabled-when\">\n                  <Controller\n                    name=\"selector.scopes\"\n                    control={form.control}\n                    defaultValue={[]}\n                    render={({ field }) => (\n                      <KeycloakSelect\n                        data-testid=\"enabled-when-scope-field\"\n                        variant={SelectVariant.typeaheadMulti}\n                        typeAheadAriaLabel=\"Select\"\n                        chipGroupProps={{\n                          numChips: 3,\n                          expandedText: t(\"hide\"),\n                          collapsedText: t(\"showRemaining\"),\n                        }}\n                        onToggle={(isOpen) => setSelectEnabledWhenOpen(isOpen)}\n                        selections={field.value}\n                        onSelect={(selectedValue) => {\n                          const option = selectedValue.toString();\n                          let changedValue = [\"\"];\n                          if (field.value) {\n                            changedValue = field.value.includes(option)\n                              ? field.value.filter(\n                                  (item: string) => item !== option,\n                                )\n                              : [...field.value, option];\n                          } else {\n                            changedValue = [option];\n                          }\n\n                          field.onChange(changedValue);\n                        }}\n                        onClear={() => {\n                          field.onChange([]);\n                        }}\n                        isOpen={selectEnabledWhenOpen}\n                        aria-labelledby={\"scope\"}\n                      >\n                        {clientScopes.map((option) => (\n                          <SelectOption key={option.name} value={option.name}>\n                            {option.name}\n                          </SelectOption>\n                        ))}\n                      </KeycloakSelect>\n                    )}\n                  />\n                </FormGroup>\n              )}\n            </>\n          )}\n          {attributeName !== \"username\" && (\n            <>\n              <Divider />\n              <FormGroup\n                label={t(\"required\")}\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"requiredHelp\")}\n                    fieldLabelId=\"required\"\n                  />\n                }\n                fieldId=\"kc-required\"\n                hasNoPaddingTop\n              >\n                <Controller\n                  name=\"isRequired\"\n                  data-testid=\"required\"\n                  defaultValue={false}\n                  control={form.control}\n                  render={({ field }) => (\n                    <Switch\n                      id={\"kc-required\"}\n                      onChange={field.onChange}\n                      isChecked={field.value}\n                      label={t(\"on\")}\n                      labelOff={t(\"off\")}\n                      aria-label={t(\"required\")}\n                    />\n                  )}\n                />\n              </FormGroup>\n              {required && (\n                <>\n                  <FormGroup\n                    label={t(\"requiredFor\")}\n                    fieldId=\"requiredFor\"\n                    hasNoPaddingTop\n                  >\n                    <Controller\n                      name=\"required.roles\"\n                      data-testid=\"requiredFor\"\n                      defaultValue={REQUIRED_FOR[0].value}\n                      control={form.control}\n                      render={({ field }) => (\n                        <div className=\"kc-requiredFor\">\n                          {REQUIRED_FOR.map((option) => (\n                            <Radio\n                              id={option.label}\n                              key={option.label}\n                              data-testid={option.label}\n                              isChecked={isEqual(field.value, option.value)}\n                              name=\"roles\"\n                              onChange={() => {\n                                field.onChange(option.value);\n                              }}\n                              label={t(option.label)}\n                              className=\"kc-requiredFor-option\"\n                            />\n                          ))}\n                        </div>\n                      )}\n                    />\n                  </FormGroup>\n                  <FormGroup\n                    label={t(\"requiredWhen\")}\n                    labelIcon={\n                      <HelpItem\n                        helpText={t(\"requiredWhenTooltip\")}\n                        fieldLabelId=\"required-when\"\n                      />\n                    }\n                    fieldId=\"requiredWhen\"\n                    hasNoPaddingTop\n                  >\n                    <Radio\n                      id=\"requiredAlways\"\n                      data-testid=\"requiredAlways\"\n                      isChecked={!hasRequiredScopes}\n                      name=\"requiredWhen\"\n                      label={t(\"always\")}\n                      onChange={() => setHasRequiredScopes(false)}\n                      className=\"pf-v5-u-mb-md\"\n                    />\n                    <Radio\n                      id=\"requiredScopesAsRequested\"\n                      data-testid=\"requiredScopesAsRequested\"\n                      isChecked={hasRequiredScopes}\n                      name=\"requiredWhen\"\n                      label={t(\"scopesAsRequested\")}\n                      onChange={() => setHasRequiredScopes(true)}\n                      className=\"pf-v5-u-mb-md\"\n                    />\n                  </FormGroup>\n                  {hasRequiredScopes && (\n                    <FormGroup fieldId=\"kc-scope-required-when\">\n                      <Controller\n                        name=\"required.scopes\"\n                        control={form.control}\n                        defaultValue={[]}\n                        render={({ field }) => (\n                          <KeycloakSelect\n                            data-testid=\"required-when-scope-field\"\n                            variant={SelectVariant.typeaheadMulti}\n                            typeAheadAriaLabel=\"Select\"\n                            chipGroupProps={{\n                              numChips: 3,\n                              expandedText: t(\"hide\"),\n                              collapsedText: t(\"showRemaining\"),\n                            }}\n                            onToggle={(isOpen) =>\n                              setSelectRequiredForOpen(isOpen)\n                            }\n                            selections={field.value}\n                            onSelect={(selectedValue) => {\n                              const option = selectedValue.toString();\n                              let changedValue = [\"\"];\n                              if (field.value) {\n                                changedValue = field.value.includes(option)\n                                  ? field.value.filter(\n                                      (item: string) => item !== option,\n                                    )\n                                  : [...field.value, option];\n                              } else {\n                                changedValue = [option];\n                              }\n                              field.onChange(changedValue);\n                            }}\n                            onClear={() => {\n                              field.onChange([]);\n                            }}\n                            isOpen={selectRequiredForOpen}\n                            aria-labelledby={\"scope\"}\n                          >\n                            {clientScopes.map((option) => (\n                              <SelectOption\n                                key={option.name}\n                                value={option.name}\n                              >\n                                {option.name}\n                              </SelectOption>\n                            ))}\n                          </KeycloakSelect>\n                        )}\n                      />\n                    </FormGroup>\n                  )}\n                </>\n              )}\n            </>\n          )}\n        </FormProvider>\n      </FormAccess>\n    </>\n  );\n};\n","import { Checkbox, FormGroup, Grid, GridItem } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../../components/form/FormAccess\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\n\nimport \"../../realm-settings-section.css\";\n\nconst Permissions = ({ name }: { name: string }) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  return (\n    <Grid>\n      <Controller\n        name={`permissions.${name}`}\n        control={control}\n        defaultValue={[]}\n        render={({ field }) => (\n          <>\n            <GridItem lg={4} sm={6}>\n              <Checkbox\n                id={`user-${name}`}\n                label={t(\"user\")}\n                value=\"user\"\n                data-testid={`user-${name}`}\n                isChecked={field.value.includes(\"user\")}\n                onChange={() => {\n                  const option = \"user\";\n                  const changedValue = field.value.includes(option)\n                    ? field.value.filter((item: string) => item !== option)\n                    : [...field.value, option];\n\n                  field.onChange(changedValue);\n                }}\n              />\n            </GridItem>\n            <GridItem lg={8} sm={6}>\n              <Checkbox\n                id={`admin-${name}`}\n                label={t(\"admin\")}\n                value=\"admin\"\n                data-testid={`admin-${name}`}\n                isChecked={field.value.includes(\"admin\")}\n                onChange={() => {\n                  const option = \"admin\";\n                  const changedValue = field.value.includes(option)\n                    ? field.value.filter((item: string) => item !== option)\n                    : [...field.value, option];\n\n                  field.onChange(changedValue);\n                }}\n              />\n            </GridItem>\n          </>\n        )}\n      />\n    </Grid>\n  );\n};\n\nexport const AttributePermission = () => {\n  const { t } = useTranslation();\n\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"whoCanEdit\")}\n        labelIcon={\n          <HelpItem helpText={t(\"whoCanEditHelp\")} fieldLabelId=\"whoCanEdit\" />\n        }\n        fieldId=\"kc-who-can-edit\"\n      >\n        <Permissions name=\"edit\" />\n      </FormGroup>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"whoCanView\")}\n        labelIcon={\n          <HelpItem helpText={t(\"whoCanViewHelp\")} fieldLabelId=\"whoCanView\" />\n        }\n        fieldId=\"kc-who-can-view\"\n      >\n        <Permissions name=\"view\" />\n      </FormGroup>\n    </FormAccess>\n  );\n};\n","import ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport { KeycloakSelect } from \"@keycloak/keycloak-ui-shared\";\nimport { FormGroup, SelectOption } from \"@patternfly/react-core\";\nimport { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useServerInfo } from \"../../../context/server-info/ServerInfoProvider\";\nimport useToggle from \"../../../utils/useToggle\";\n\ntype ValidatorSelectProps = {\n  selectedValidators: string[];\n  onChange: (validator: ComponentTypeRepresentation) => void;\n};\n\nexport const ValidatorSelect = ({\n  selectedValidators,\n  onChange,\n}: ValidatorSelectProps) => {\n  const { t } = useTranslation();\n  const allValidator: ComponentTypeRepresentation[] =\n    useServerInfo().componentTypes?.[\"org.keycloak.validate.Validator\"] || [];\n  const validators = useMemo(\n    () => allValidator.filter(({ id }) => !selectedValidators.includes(id)),\n    [selectedValidators],\n  );\n  const [open, toggle] = useToggle();\n  const [value, setValue] = useState<ComponentTypeRepresentation>();\n\n  return (\n    <FormGroup label={t(\"validatorType\")} fieldId=\"validator\">\n      <KeycloakSelect\n        toggleId=\"validator\"\n        onToggle={toggle}\n        onSelect={(value) => {\n          const option = value as ComponentTypeRepresentation;\n          onChange(option);\n          setValue(option);\n          toggle();\n        }}\n        selections={value?.id}\n        variant=\"single\"\n        aria-label={t(\"selectOne\")}\n        isOpen={open}\n        placeholderText={t(\"choose\")}\n        menuAppendTo=\"parent\"\n        maxHeight={300}\n      >\n        {validators.map((option) => (\n          <SelectOption\n            selected={value?.id === option.id}\n            key={option.id}\n            value={option}\n            description={option.helpText}\n          >\n            {option.id}\n          </SelectOption>\n        ))}\n      </KeycloakSelect>\n    </FormGroup>\n  );\n};\n","import ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport { Button, Form, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { DynamicComponents } from \"../../../components/dynamic/DynamicComponents\";\nimport { useServerInfo } from \"../../../context/server-info/ServerInfoProvider\";\nimport type { IndexedValidations } from \"../../NewAttributeSettings\";\nimport { ValidatorSelect } from \"./ValidatorSelect\";\n\nexport type AddValidatorDialogProps = {\n  selectedValidators: IndexedValidations[];\n  toggleDialog: () => void;\n  onConfirm: (newValidator: ComponentRepresentation) => void;\n};\n\nexport const AddValidatorDialog = ({\n  selectedValidators,\n  toggleDialog,\n  onConfirm,\n}: AddValidatorDialogProps) => {\n  const { t } = useTranslation();\n  const [selectedValidator, setSelectedValidator] =\n    useState<ComponentTypeRepresentation>();\n\n  const allSelected =\n    useServerInfo().componentTypes?.[\"org.keycloak.validate.Validator\"]\n      .length === selectedValidators.length;\n  const form = useForm<ComponentTypeRepresentation>();\n  const { handleSubmit } = form;\n\n  const save = (newValidator: ComponentTypeRepresentation) => {\n    onConfirm({ ...newValidator, id: selectedValidator?.id });\n    toggleDialog();\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"addValidator\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          key=\"save\"\n          data-testid=\"save-validator-role-button\"\n          variant=\"primary\"\n          type=\"submit\"\n          form=\"add-validator\"\n        >\n          {t(\"save\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel-validator-role-button\"\n          variant=\"link\"\n          onClick={toggleDialog}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      {allSelected ? (\n        t(\"emptyValidators\")\n      ) : (\n        <Form id=\"add-validator\" onSubmit={handleSubmit(save)}>\n          <ValidatorSelect\n            selectedValidators={selectedValidators.map(\n              (validator) => validator.key,\n            )}\n            onChange={setSelectedValidator}\n          />\n          {selectedValidator && (\n            <FormProvider {...form}>\n              <DynamicComponents properties={selectedValidator.properties} />\n            </FormProvider>\n          )}\n        </Form>\n      )}\n    </Modal>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Divider,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { useEffect, useState } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useConfirmDialog } from \"../../../components/confirm-dialog/ConfirmDialog\";\nimport { DefaultValue } from \"../../../components/key-value-form/KeyValueInput\";\nimport useToggle from \"../../../utils/useToggle\";\nimport type { IndexedValidations } from \"../../NewAttributeSettings\";\nimport { AddValidatorDialog } from \"../attribute/AddValidatorDialog\";\n\nimport \"../../realm-settings-section.css\";\n\nexport const AttributeValidations = () => {\n  const { t } = useTranslation();\n  const [addValidatorModalOpen, toggleModal] = useToggle();\n  const [validatorToDelete, setValidatorToDelete] = useState<string>();\n  const { setValue, control, register, getValues } = useFormContext();\n\n  const validators: IndexedValidations[] = useWatch({\n    name: \"validations\",\n    control,\n    defaultValue: [],\n  });\n\n  useEffect(() => {\n    register(\"validations\");\n  }, [register]);\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteValidatorConfirmTitle\"),\n    messageKey: t(\"deleteValidatorConfirmMsg\", {\n      validatorName: validatorToDelete,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedValidators = validators.filter(\n        (validator) => validator.key !== validatorToDelete,\n      );\n\n      setValue(\"validations\", [...updatedValidators]);\n    },\n  });\n\n  return (\n    <>\n      {addValidatorModalOpen && (\n        <AddValidatorDialog\n          selectedValidators={validators}\n          onConfirm={(newValidator) => {\n            const annotations: DefaultValue[] = getValues(\"annotations\");\n            if (\n              newValidator.id === \"options\" &&\n              !annotations.find((a) => a.key === \"inputType\")\n            ) {\n              setValue(\"annotations\", [\n                ...annotations,\n                { key: \"inputType\", value: \"select\" },\n              ]);\n            }\n            setValue(\"validations\", [\n              ...validators,\n              { key: newValidator.id, value: newValidator.config },\n            ]);\n          }}\n          toggleDialog={toggleModal}\n        />\n      )}\n      <DeleteConfirm />\n      <div className=\"kc-attributes-validations\">\n        <Button\n          id=\"addValidator\"\n          onClick={() => toggleModal()}\n          variant=\"link\"\n          data-testid=\"addValidator\"\n          className=\"kc--attributes-validations--add-validation-button\"\n          icon={<PlusCircleIcon />}\n        >\n          {t(\"addValidator\")}\n        </Button>\n        <Divider />\n        {validators.length !== 0 ? (\n          <Table>\n            <Thead>\n              <Tr>\n                <Th>{t(\"validatorColNames.colName\")}</Th>\n                <Th>{t(\"validatorColNames.colConfig\")}</Th>\n                <Th aria-hidden=\"true\" />\n              </Tr>\n            </Thead>\n            <Tbody>\n              {validators.map((validator) => (\n                <Tr key={validator.key}>\n                  <Td dataLabel={t(\"validatorColNames.colName\")}>\n                    {validator.key}\n                  </Td>\n                  <Td dataLabel={t(\"validatorColNames.colConfig\")}>\n                    {JSON.stringify(validator.value)}\n                  </Td>\n                  <Td className=\"kc--attributes-validations--action-cell\">\n                    <Button\n                      key=\"validator\"\n                      variant=\"link\"\n                      data-testid=\"deleteValidator\"\n                      onClick={() => {\n                        toggleDeleteDialog();\n                        setValidatorToDelete(validator.key);\n                      }}\n                    >\n                      {t(\"delete\")}\n                    </Button>\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n        ) : (\n          <Text className=\"kc-emptyValidators\" component={TextVariants.p}>\n            {t(\"emptyValidators\")}\n          </Text>\n        )}\n      </div>\n    </>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type {\n  UserProfileAttribute,\n  UserProfileConfig,\n} from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport { ScrollForm, useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  Form,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { flatten } from \"flat\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { FixedButtonsGroup } from \"../components/form/FixedButtonGroup\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { i18n } from \"../i18n/i18n\";\nimport { convertToFormValues } from \"../util\";\nimport useLocale from \"../utils/useLocale\";\nimport { useParams } from \"../utils/useParams\";\nimport \"./realm-settings-section.css\";\nimport type { AttributeParams } from \"./routes/Attribute\";\nimport { toUserProfile } from \"./routes/UserProfile\";\nimport { UserProfileProvider } from \"./user-profile/UserProfileContext\";\nimport { AttributeAnnotations } from \"./user-profile/attribute/AttributeAnnotations\";\nimport { AttributeGeneralSettings } from \"./user-profile/attribute/AttributeGeneralSettings\";\nimport { AttributePermission } from \"./user-profile/attribute/AttributePermission\";\nimport { AttributeValidations } from \"./user-profile/attribute/AttributeValidations\";\n\ntype TranslationForm = {\n  locale: string;\n  value: string;\n};\n\ntype Translations = {\n  key: string;\n  translations: TranslationForm[];\n};\n\ntype IndexedAnnotations = {\n  key: string;\n  value?: Record<string, unknown>;\n};\n\nexport type IndexedValidations = {\n  key: string;\n  value?: Record<string, unknown>;\n};\n\ntype UserProfileAttributeFormFields = Omit<\n  UserProfileAttribute,\n  \"validations\" | \"annotations\"\n> &\n  Attribute &\n  Permission & {\n    validations: IndexedValidations[];\n    annotations: IndexedAnnotations[];\n    hasSelector: boolean;\n    hasRequiredScopes: boolean;\n    translations?: TranslationForm[];\n  };\n\ntype Attribute = {\n  roles: string[];\n  scopes: string[];\n  isRequired: boolean;\n};\n\ntype Permission = {\n  view: PermissionView[];\n  edit: PermissionEdit[];\n};\n\ntype PermissionView = [\n  {\n    adminView: boolean;\n    userView: boolean;\n  },\n];\n\ntype PermissionEdit = [\n  {\n    adminEdit: boolean;\n    userEdit: boolean;\n  },\n];\n\nexport const USERNAME_EMAIL = [\"username\", \"email\"];\n\nconst CreateAttributeFormContent = ({\n  onHandlingTranslationsData,\n  onHandlingGeneratedDisplayName,\n  save,\n}: {\n  save: (profileConfig: UserProfileConfig) => void;\n  onHandlingTranslationsData: (translationsData: Translations) => void;\n  onHandlingGeneratedDisplayName: (generatedDisplayName: string) => void;\n}) => {\n  const { t } = useTranslation();\n  const form = useFormContext();\n  const { realm, attributeName } = useParams<AttributeParams>();\n  const editMode = attributeName ? true : false;\n\n  const handleTranslationsData = (translationsData: Translations) => {\n    onHandlingTranslationsData(translationsData);\n  };\n\n  const handleGeneratedDisplayName = (generatedDisplayName: string) => {\n    onHandlingGeneratedDisplayName(generatedDisplayName);\n  };\n\n  return (\n    <UserProfileProvider>\n      <ScrollForm\n        label={t(\"jumpToSection\")}\n        sections={[\n          {\n            title: t(\"generalSettings\"),\n            panel: (\n              <AttributeGeneralSettings\n                onHandlingTranslationData={handleTranslationsData}\n                onHandlingGeneratedDisplayName={handleGeneratedDisplayName}\n              />\n            ),\n          },\n          { title: t(\"permission\"), panel: <AttributePermission /> },\n          { title: t(\"validations\"), panel: <AttributeValidations /> },\n          { title: t(\"annotations\"), panel: <AttributeAnnotations /> },\n        ]}\n      />\n      <Form onSubmit={form.handleSubmit(save)}>\n        <FixedButtonsGroup name=\"attribute-settings\">\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"attribute-create\"\n          >\n            {editMode ? t(\"save\") : t(\"create\")}\n          </Button>\n          <Link\n            to={toUserProfile({ realm, tab: \"attributes\" })}\n            data-testid=\"attribute-cancel\"\n            className=\"kc-attributeCancel\"\n          >\n            {t(\"cancel\")}\n          </Link>\n        </FixedButtonsGroup>\n      </Form>\n    </UserProfileProvider>\n  );\n};\n\nexport default function NewAttributeSettings() {\n  const { adminClient } = useAdminClient();\n  const { realm: realmName, attributeName } = useParams<AttributeParams>();\n  const { realmRepresentation: realm } = useRealm();\n  const form = useForm<UserProfileAttributeFormFields>();\n  const { t } = useTranslation();\n  const combinedLocales = useLocale();\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const [config, setConfig] = useState<UserProfileConfig | null>(null);\n  const editMode = attributeName ? true : false;\n  const [translationsData, setTranslationsData] = useState<Translations>({\n    key: \"\",\n    translations: [],\n  });\n  const [generatedDisplayName, setGeneratedDisplayName] = useState<string>(\"\");\n\n  useFetch(\n    async () => {\n      const translationsToSave: Translations[] = [];\n\n      await Promise.all(\n        combinedLocales.map(async (selectedLocale) => {\n          try {\n            const translations =\n              await adminClient.realms.getRealmLocalizationTexts({\n                realm: realmName,\n                selectedLocale,\n              });\n\n            const formData = form.getValues();\n            const formattedKey =\n              formData.displayName?.substring(\n                2,\n                formData.displayName.length - 1,\n              ) || \"\";\n\n            const filteredTranslations: TranslationForm[] = Object.entries(\n              translations,\n            )\n              .filter(([key]) => key === formattedKey)\n              .map(([_, value]) => ({\n                locale: selectedLocale,\n                value,\n              }));\n\n            if (filteredTranslations.length > 0) {\n              translationsToSave.push({\n                key: formattedKey,\n                translations: filteredTranslations,\n              });\n            }\n          } catch (error) {\n            addError(\"errorSavingTranslations\", error);\n          }\n        }),\n      );\n\n      return translationsToSave;\n    },\n    (translationsToSave) => {\n      if (translationsToSave && translationsToSave.length > 0) {\n        const allTranslations = translationsToSave.flatMap(\n          (translation) => translation.translations,\n        );\n\n        setTranslationsData({\n          key: translationsToSave[0].key,\n          translations: allTranslations,\n        });\n\n        form.setValue(\"translations\", allTranslations);\n      }\n    },\n    [combinedLocales, realmName, form],\n  );\n\n  useFetch(\n    () => adminClient.users.getProfile(),\n    (config) => {\n      setConfig(config);\n      const {\n        annotations,\n        validations,\n        permissions,\n        selector,\n        required,\n        multivalued,\n        ...values\n      } = config.attributes!.find(\n        (attribute) => attribute.name === attributeName,\n      ) || { permissions: { edit: [\"admin\"] } };\n      convertToFormValues(\n        {\n          ...values,\n          hasSelector: typeof selector !== \"undefined\",\n          hasRequiredScopes: typeof required?.scopes !== \"undefined\",\n        },\n        form.setValue,\n      );\n      Object.entries(\n        flatten<any, any>({ permissions, selector, required }, { safe: true }),\n      ).map(([key, value]) => form.setValue(key as any, value));\n      form.setValue(\n        \"annotations\",\n        Object.entries(annotations || {}).map(([key, value]) => ({\n          key,\n          value: value as Record<string, unknown>,\n        })),\n      );\n      form.setValue(\n        \"validations\",\n        Object.entries(validations || {}).map(([key, value]) => ({\n          key,\n          value: value as Record<string, unknown>,\n        })),\n      );\n      form.setValue(\"isRequired\", required !== undefined);\n      form.setValue(\"multivalued\", multivalued === true);\n    },\n    [],\n  );\n\n  const saveTranslations = async () => {\n    try {\n      const nonEmptyTranslations = translationsData.translations\n        .filter((translation) => translation.value.trim() !== \"\")\n        .map(async (translation) => {\n          try {\n            await adminClient.realms.addLocalization(\n              {\n                realm: realmName,\n                selectedLocale: translation.locale,\n                key: translationsData.key,\n              },\n              translation.value,\n            );\n          } catch (error) {\n            addError(t(\"errorSavingTranslations\"), error);\n          }\n        });\n\n      await Promise.all(nonEmptyTranslations);\n    } catch (error) {\n      console.error(`Error saving translations: ${error}`);\n    }\n  };\n\n  const save = async ({\n    hasSelector,\n    hasRequiredScopes,\n    ...formFields\n  }: UserProfileAttributeFormFields) => {\n    if (!hasSelector) {\n      delete formFields.selector;\n    }\n\n    if (!hasRequiredScopes) {\n      delete formFields.required?.scopes;\n    }\n\n    const validations = formFields.validations.reduce(\n      (prevValidations, currentValidations) => {\n        prevValidations[currentValidations.key] =\n          currentValidations.value || {};\n        return prevValidations;\n      },\n      {} as Record<string, unknown>,\n    );\n\n    const annotations = formFields.annotations.reduce(\n      (obj, item) => Object.assign(obj, { [item.key]: item.value }),\n      {},\n    );\n\n    const patchAttributes = () =>\n      (config?.attributes || []).map((attribute) => {\n        if (attribute.name !== attributeName) {\n          return attribute;\n        }\n\n        delete attribute.required;\n        return Object.assign(\n          {\n            ...attribute,\n            name: attributeName,\n            displayName: formFields.displayName!,\n            selector: formFields.selector,\n            permissions: formFields.permissions!,\n            multivalued: formFields.multivalued,\n            annotations,\n            validations,\n          },\n          formFields.isRequired ? { required: formFields.required } : undefined,\n          formFields.group ? { group: formFields.group } : { group: null },\n        );\n      });\n\n    const addAttribute = () =>\n      (config?.attributes || []).concat([\n        Object.assign(\n          {\n            name: formFields.name,\n            displayName: formFields.displayName! || generatedDisplayName,\n            required: formFields.isRequired ? formFields.required : undefined,\n            selector: formFields.selector,\n            permissions: formFields.permissions!,\n            multivalued: formFields.multivalued,\n            annotations,\n            validations,\n          },\n          formFields.isRequired ? { required: formFields.required } : undefined,\n          formFields.group ? { group: formFields.group } : undefined,\n        ),\n      ] as UserProfileAttribute);\n\n    if (realm?.internationalizationEnabled) {\n      const hasNonEmptyTranslations = translationsData.translations.some(\n        (translation) => translation.value.trim() !== \"\",\n      );\n\n      if (!hasNonEmptyTranslations) {\n        addError(\"createAttributeError\", t(\"translationError\"));\n        return;\n      }\n    }\n\n    try {\n      const updatedAttributes = editMode ? patchAttributes() : addAttribute();\n\n      await adminClient.users.updateProfile({\n        ...config,\n        attributes: updatedAttributes as UserProfileAttribute[],\n        realm: realmName,\n      });\n\n      await saveTranslations();\n      i18n.reloadResources();\n      navigate(toUserProfile({ realm: realmName, tab: \"attributes\" }));\n\n      addAlert(t(\"createAttributeSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"createAttributeError\", error);\n    }\n  };\n\n  return (\n    <FormProvider {...form}>\n      <ViewHeader\n        titleKey={editMode ? attributeName : t(\"createAttribute\")}\n        subKey={editMode ? \"\" : t(\"createAttributeSubTitle\")}\n      />\n      <PageSection variant=\"light\">\n        <CreateAttributeFormContent\n          save={() => form.handleSubmit(save)()}\n          onHandlingTranslationsData={setTranslationsData}\n          onHandlingGeneratedDisplayName={setGeneratedDisplayName}\n        />\n      </PageSection>\n    </FormProvider>\n  );\n}\n"],"names":["AttributeAnnotations","useTranslation","jsx","FormAccess","FormGroup","Grid","GridItem","KeyValueInput","REQUIRED_FOR","AttributeGeneralSettings","onHandlingTranslationData","onHandlingGeneratedDisplayName","adminClient","useAdminClient","t","realm","useRealm","form","useFormContext","clientScopes","setClientScopes","useState","config","setConfig","selectEnabledWhenOpen","setSelectEnabledWhenOpen","selectRequiredForOpen","setSelectRequiredForOpen","addTranslationsModalOpen","toggleModal","useToggle","attributeName","useParams","editMode","newAttributeName","setNewAttributeName","generatedDisplayName","setGeneratedDisplayName","type","setType","translationsData","setTranslationsData","displayNameRegex","handleAttributeNameChange","_event","value","newDisplayName","hasSelector","useWatch","hasRequiredScopes","required","attributeDisplayName","displayNamePatternMatch","useFetch","handleTranslationsData","handleGeneratedDisplayName","displayName","useEffect","KeycloakSpinner","setHasSelector","setHasRequiredScopes","handleTranslationsAdded","handleToggleDialog","formattedAttributeDisplayName","jsxs","Fragment","AddTranslationsDialog","FormProvider","HelpItem","TextInput","FormErrorText","Alert","Button","GlobeRouteIcon","DefaultSwitchControl","SelectControl","g","USERNAME_EMAIL","Divider","Radio","Controller","field","KeycloakSelect","SelectVariant","isOpen","selectedValue","option","changedValue","item","SelectOption","Switch","isEqual","Permissions","name","control","Checkbox","AttributePermission","ValidatorSelect","selectedValidators","onChange","allValidator","useServerInfo","validators","useMemo","id","open","toggle","setValue","AddValidatorDialog","toggleDialog","onConfirm","selectedValidator","setSelectedValidator","allSelected","useForm","handleSubmit","save","newValidator","Modal","ModalVariant","Form","validator","DynamicComponents","AttributeValidations","addValidatorModalOpen","validatorToDelete","setValidatorToDelete","register","getValues","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","updatedValidators","annotations","a","PlusCircleIcon","Table","Thead","Tr","Th","Tbody","Td","Text","TextVariants","CreateAttributeFormContent","onHandlingTranslationsData","UserProfileProvider","ScrollForm","FixedButtonsGroup","Link","toUserProfile","NewAttributeSettings","realmName","combinedLocales","useLocale","navigate","useNavigate","addAlert","addError","useAlerts","translationsToSave","selectedLocale","translations","formData","formattedKey","filteredTranslations","key","_","error","allTranslations","translation","validations","permissions","selector","multivalued","values","attribute","convertToFormValues","flatten","saveTranslations","nonEmptyTranslations","formFields","prevValidations","currentValidations","obj","patchAttributes","addAttribute","updatedAttributes","i18n","AlertVariant","ViewHeader","PageSection"],"mappings":"6nDAQO,MAAMA,GAAuB,IAAM,CAClC,KAAA,CAAE,GAAMC,IAEd,OACGC,EAAAC,GAAA,CAAW,KAAK,eAAe,aAAY,GAC1C,SAAAD,EAACE,EAAA,CACC,gBAAe,GACf,MAAO,EAAE,aAAa,EACtB,QAAQ,iBACR,UAAU,uBAEV,SAACF,EAAAG,GAAA,CAAK,UAAU,iBACd,WAACC,EACC,CAAA,SAAAJ,EAACK,GAAA,CACC,KAAK,cACL,MAAO,EAAE,aAAa,EACtB,gBAAiB,CACf,CACE,IAAK,YACL,MAAO,EAAE,WAAW,EACpB,OAAQ,CACN,OACA,WACA,SACA,sBACA,cACA,yBACA,cACA,YACA,YACA,eACA,cACA,uBACA,aACA,cACA,aACA,YACF,CACF,EACA,CACE,IAAK,wBACL,MAAO,EAAE,uBAAuB,CAClC,EACA,CACE,IAAK,uBACL,MAAO,EAAE,sBAAsB,CACjC,EACA,CACE,IAAK,8BACL,MAAO,EAAE,6BAA6B,CACxC,EACA,CACE,IAAK,uBACL,MAAO,EAAE,sBAAsB,CACjC,EACA,CACE,IAAK,gBACL,MAAO,EAAE,eAAe,CAC1B,EACA,CACE,IAAK,gBACL,MAAO,EAAE,eAAe,CAC1B,EACA,CACE,IAAK,gBACL,MAAO,EAAE,eAAe,CAC1B,EACA,CACE,IAAK,gBACL,MAAO,EAAE,eAAe,CAC1B,EACA,CACE,IAAK,iBACL,MAAO,EAAE,gBAAgB,CAC3B,EACA,CACE,IAAK,mBACL,MAAO,EAAE,kBAAkB,CAC7B,CACF,CAAA,GAEJ,CACF,CAAA,CAAA,CAEJ,CAAA,CAAA,CAEJ,EC9CMC,GAAe,CACnB,CAAE,MAAO,wBAAyB,MAAO,CAAC,QAAS,MAAM,CAAE,EAC3D,CAAE,MAAO,yBAA0B,MAAO,CAAC,MAAM,CAAE,EACnD,CAAE,MAAO,0BAA2B,MAAO,CAAC,OAAO,CAAE,CACvD,EAiBaC,GAA2B,CAAC,CACvC,0BAAAC,EACA,+BAAAC,CACF,IAAqC,CAC7B,KAAA,CAAE,YAAAC,GAAgBC,KAClB,CAAE,EAAAC,GAAMb,IACR,CAAE,oBAAqBc,CAAM,EAAIC,GAAS,EAC1CC,EAAOC,IACP,CAACC,EAAcC,CAAe,EAClCC,EAAsC,EAClC,CAACC,EAAQC,CAAS,EAAIF,EAA4B,EAClD,CAACG,EAAuBC,CAAwB,EAAIJ,EAAS,EAAK,EAClE,CAACK,EAAuBC,CAAwB,EAAIN,EAAS,EAAK,EAClE,CAACO,EAA0BC,CAAW,EAAIC,GAAU,EACpD,CAAE,cAAAC,GAAkBC,KACpBC,EAAW,EAAAF,EACX,CAACG,EAAkBC,CAAmB,EAAId,EAAS,EAAE,EACrD,CAACe,EAAsBC,CAAuB,EAAIhB,EAAS,EAAE,EAC7D,CAACiB,EAAMC,CAAO,EAAIlB,EAA2B,EAC7C,CAACmB,EAAkBC,CAAmB,EAAIpB,EAAuB,CACrE,IAAK,GACL,aAAc,CAAC,CAAA,CAChB,EACKqB,EAAmB,gBAEnBC,EAA4B,CAChCC,EACAC,IACG,CACHV,EAAoBU,CAAK,EACzB,MAAMC,EACJD,IAAU,IAAM9B,GAAO,4BACnB,yBAA6B8B,CAAK,IAClC,GACNR,EAAwBS,CAAc,CAAA,EAGlCC,EAAcC,EAAS,CAC3B,QAAS/B,EAAK,QACd,KAAM,aAAA,CACP,EAEKgC,EAAoBD,EAAS,CACjC,QAAS/B,EAAK,QACd,KAAM,mBAAA,CACP,EAEKiC,GAAWF,EAAS,CACxB,QAAS/B,EAAK,QACd,KAAM,aACN,aAAc,EAAA,CACf,EAEKkC,EAAuBH,EAAS,CACpC,QAAS/B,EAAK,QACd,KAAM,aAAA,CACP,EAEKmC,GAA0BV,EAAiB,KAAKS,CAAoB,EAE1EE,EAAS,IAAMzC,EAAY,aAAa,OAAQQ,EAAiB,CAAA,CAAE,EACnEiC,EAAS,IAAMzC,EAAY,MAAM,aAAcW,EAAW,CAAA,CAAE,EAEtD,MAAA+B,GAA0Bd,GAAmC,CACjE9B,EAA0B8B,CAAgB,CAAA,EAGtCe,GAA8BC,GAAwB,CAC1D7C,EAA+B6C,CAAW,CAAA,EAQ5C,GALAC,GAAU,IAAM,CACdH,GAAuBd,CAAgB,EACvCe,GAA2BnB,CAAoB,CAAA,EAC9C,CAACI,EAAkBJ,CAAoB,CAAC,EAEvC,CAACjB,EACH,SAAQuC,GAAgB,CAAA,CAAA,EAG1B,SAASC,GAAeZ,EAAsB,CACvC9B,EAAA,SAAS,cAAe8B,CAAW,CAC1C,CAEA,SAASa,GAAqBX,EAA4B,CACnDhC,EAAA,SAAS,oBAAqBgC,CAAiB,CACtD,CAEM,MAAAY,GAA2BrB,GAAmC,CAClEC,EAAoBD,CAAgB,CAAA,EAGhCsB,GAAqB,IAAM,CACnBjC,IACZyB,GAAuBd,CAAgB,EACvCe,GAA2BnB,CAAoB,CAAA,EAG3C2B,GAAgCZ,GAAsB,UAC1D,EACAA,EAAqB,OAAS,CAAA,EAGhC,OAEKa,EAAAC,EAAA,CAAA,SAAA,CACCrC,GAAA1B,EAACgE,GAAA,CACC,eACEjC,EACI8B,GACA,sBAAsB7B,CAAgB,GAE5C,aAAcM,EACd,KAAMF,GAAQ,cACd,oBAAqBuB,GACrB,aAAcC,GACd,SAAU,IAAM,CACFjC,GACd,CAAA,CACF,EAEF3B,EAACC,IAAW,KAAK,eAAe,aAAY,GAC1C,SAAA6D,EAACG,GAAc,CAAA,GAAGlD,EAChB,SAAA,CAAA+C,EAAC5D,EAAA,CACC,MAAOU,EAAE,eAAe,EACxB,UACEZ,EAACkE,EAAA,CACC,SAAUtD,EAAE,qBAAqB,EACjC,aAAa,eAAA,CACf,EAEF,QAAQ,oBACR,WAAU,GAEV,SAAA,CAAAZ,EAACmE,GAAA,CACC,WAAU,GACV,GAAG,oBACH,aAAa,GACb,cAAY,iBACZ,WAAYpC,EACZ,UAAWhB,EAAK,UAAU,OAAO,KAAO,QAAU,UACjD,GAAGA,EAAK,SAAS,OAAQ,CAAE,SAAU,GAAM,EAC5C,SAAU0B,CAAA,CACZ,EACC1B,EAAK,UAAU,OAAO,QACpBqD,GAAc,CAAA,QAASxD,EAAE,uBAAuB,EAAG,CAAA,CAAA,CAExD,EACAZ,EAACE,EAAA,CACC,MAAOU,EAAE,sBAAsB,EAC/B,UACEZ,EAACkE,EAAA,CACC,SAAUtD,EAAE,0BAA0B,EACtC,aAAa,sBAAA,CACf,EAEF,QAAQ,4BAER,SAAAkD,EAAC3D,GAAK,CAAA,UAAS,GACb,SAAA,CAAA2D,EAAC1D,EAAS,CAAA,KAAMS,GAAO,4BAA8B,GAAK,GACxD,SAAA,CAAAb,EAACmE,GAAA,CACC,GAAG,4BACH,cAAY,yBACZ,WACGtD,GAAO,6BACNmB,IAAqB,IACtBD,GAAYmB,GAEf,MACEnB,EACIkB,EACApC,GAAO,4BACLqB,EACA,OAEP,GAAGnB,EAAK,SAAS,aAAa,CAAA,CACjC,EACCmB,GACClC,EAACqE,GAAA,CACC,UAAU,gBACV,QAAQ,OACR,SAAQ,GACR,QAAO,GACP,MAAOzD,EAAE,6BAA6B,CAAA,CACxC,CAAA,EAEJ,EACCC,GAAO,6BACLb,EAAAI,EAAA,CAAS,KAAM,EACd,SAAAJ,EAACsE,EAAA,CACC,QAAQ,OACR,UAAU,+CACV,cAAY,6BACZ,aAAY1D,EAAE,4BAA4B,EAC1C,WAAY,CAACoB,GAAoB,CAACD,EAClC,QAAS,IAAM,CACbM,EAAQ,aAAa,EACTV,GACd,EACA,OAAO4C,GAAe,EAAA,CAAA,CAAA,EAE1B,CAAA,EAEJ,CAAA,CACF,EACAvE,EAACwE,GAAA,CACC,KAAK,cACL,MAAO5D,EAAE,aAAa,EACtB,UAAWA,EAAE,iBAAiB,CAAA,CAChC,EACAZ,EAACyE,GAAA,CACC,KAAK,QACL,MAAO7D,EAAE,gBAAgB,EACzB,UAAWA,EAAE,oBAAoB,EACjC,WAAY,CACV,aAAc,EAChB,EACA,QAAS,CACP,CAAE,IAAK,GAAI,MAAOA,EAAE,MAAM,CAAE,EAC5B,GAAIQ,GAAQ,QAAQ,IAAKsD,IAAO,CAC9B,IAAKA,EAAE,KACP,MAAOA,EAAE,IACX,EAAE,GAAK,CAAC,CACV,CAAA,CACF,EACC,CAACC,GAAe,SAAS9C,CAAa,GAEnCiC,EAAAC,EAAA,CAAA,SAAA,CAAA/D,EAAC4E,EAAQ,EAAA,EACTd,EAAC5D,EAAA,CACC,MAAOU,EAAE,aAAa,EACtB,UACEZ,EAACkE,EAAA,CACC,SAAUtD,EAAE,oBAAoB,EAChC,aAAa,cAAA,CACf,EAEF,QAAQ,cACR,gBAAe,GAEf,SAAA,CAAAZ,EAAC6E,EAAA,CACC,GAAG,SACH,cAAY,SACZ,UAAW,CAAChC,EACZ,KAAK,cACL,MAAOjC,EAAE,QAAQ,EACjB,SAAU,IAAM6C,GAAe,EAAK,EACpC,UAAU,eAAA,CACZ,EACAzD,EAAC6E,EAAA,CACC,GAAG,oBACH,cAAY,oBACZ,UAAWhC,EACX,KAAK,cACL,MAAOjC,EAAE,mBAAmB,EAC5B,SAAU,IAAM6C,GAAe,EAAI,EACnC,UAAU,eAAA,CACZ,CAAA,CAAA,CACF,EACCZ,GACC7C,EAACE,EAAU,CAAA,QAAQ,wBACjB,SAAAF,EAAC8E,EAAA,CACC,KAAK,kBACL,QAAS/D,EAAK,QACd,aAAc,CAAC,EACf,OAAQ,CAAC,CAAE,MAAAgE,CAAA,IACT/E,EAACgF,EAAA,CACC,cAAY,2BACZ,QAASC,GAAc,eACvB,mBAAmB,SACnB,eAAgB,CACd,SAAU,EACV,aAAcrE,EAAE,MAAM,EACtB,cAAeA,EAAE,eAAe,CAClC,EACA,SAAWsE,GAAW3D,EAAyB2D,CAAM,EACrD,WAAYH,EAAM,MAClB,SAAWI,GAAkB,CACrB,MAAAC,EAASD,EAAc,WACzB,IAAAE,EAAe,CAAC,EAAE,EAClBN,EAAM,MACRM,EAAeN,EAAM,MAAM,SAASK,CAAM,EACtCL,EAAM,MAAM,OACTO,GAAiBA,IAASF,CAE7B,EAAA,CAAC,GAAGL,EAAM,MAAOK,CAAM,EAE3BC,EAAe,CAACD,CAAM,EAGxBL,EAAM,SAASM,CAAY,CAC7B,EACA,QAAS,IAAM,CACPN,EAAA,SAAS,CAAA,CAAE,CACnB,EACA,OAAQzD,EACR,kBAAiB,QAEhB,SAAaL,EAAA,IAAKmE,GAChBpF,EAAAuF,GAAA,CAA+B,MAAOH,EAAO,KAC3C,SAAAA,EAAO,IADS,EAAAA,EAAO,IAE1B,CACD,CAAA,CACH,CAAA,CAAA,EAGN,CAAA,EAEJ,EAEDvD,IAAkB,YAEfiC,EAAAC,EAAA,CAAA,SAAA,CAAA/D,EAAC4E,EAAQ,EAAA,EACT5E,EAACE,EAAA,CACC,MAAOU,EAAE,UAAU,EACnB,UACEZ,EAACkE,EAAA,CACC,SAAUtD,EAAE,cAAc,EAC1B,aAAa,UAAA,CACf,EAEF,QAAQ,cACR,gBAAe,GAEf,SAAAZ,EAAC8E,EAAA,CACC,KAAK,aACL,cAAY,WACZ,aAAc,GACd,QAAS/D,EAAK,QACd,OAAQ,CAAC,CAAE,MAAAgE,CAAA,IACT/E,EAACwF,GAAA,CACC,GAAI,cACJ,SAAUT,EAAM,SAChB,UAAWA,EAAM,MACjB,MAAOnE,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,aAAYA,EAAE,UAAU,CAAA,CAC1B,CAAA,CAEJ,CAAA,CACF,EACCoC,IAEGc,EAAAC,EAAA,CAAA,SAAA,CAAA/D,EAACE,EAAA,CACC,MAAOU,EAAE,aAAa,EACtB,QAAQ,cACR,gBAAe,GAEf,SAAAZ,EAAC8E,EAAA,CACC,KAAK,iBACL,cAAY,cACZ,aAAcxE,GAAa,CAAC,EAAE,MAC9B,QAASS,EAAK,QACd,OAAQ,CAAC,CAAE,MAAAgE,KACT/E,EAAC,MAAI,CAAA,UAAU,iBACZ,SAAAM,GAAa,IAAK8E,GACjBpF,EAAC6E,EAAA,CACC,GAAIO,EAAO,MAEX,cAAaA,EAAO,MACpB,UAAWK,GAAQV,EAAM,MAAOK,EAAO,KAAK,EAC5C,KAAK,QACL,SAAU,IAAM,CACRL,EAAA,SAASK,EAAO,KAAK,CAC7B,EACA,MAAOxE,EAAEwE,EAAO,KAAK,EACrB,UAAU,uBAAA,EARLA,EAAO,KAUf,CAAA,EACH,CAAA,CAEJ,CAAA,CACF,EACAtB,EAAC5D,EAAA,CACC,MAAOU,EAAE,cAAc,EACvB,UACEZ,EAACkE,EAAA,CACC,SAAUtD,EAAE,qBAAqB,EACjC,aAAa,eAAA,CACf,EAEF,QAAQ,eACR,gBAAe,GAEf,SAAA,CAAAZ,EAAC6E,EAAA,CACC,GAAG,iBACH,cAAY,iBACZ,UAAW,CAAC9B,EACZ,KAAK,eACL,MAAOnC,EAAE,QAAQ,EACjB,SAAU,IAAM8C,GAAqB,EAAK,EAC1C,UAAU,eAAA,CACZ,EACA1D,EAAC6E,EAAA,CACC,GAAG,4BACH,cAAY,4BACZ,UAAW9B,EACX,KAAK,eACL,MAAOnC,EAAE,mBAAmB,EAC5B,SAAU,IAAM8C,GAAqB,EAAI,EACzC,UAAU,eAAA,CACZ,CAAA,CAAA,CACF,EACCX,GACC/C,EAACE,EAAU,CAAA,QAAQ,yBACjB,SAAAF,EAAC8E,EAAA,CACC,KAAK,kBACL,QAAS/D,EAAK,QACd,aAAc,CAAC,EACf,OAAQ,CAAC,CAAE,MAAAgE,CAAA,IACT/E,EAACgF,EAAA,CACC,cAAY,4BACZ,QAASC,GAAc,eACvB,mBAAmB,SACnB,eAAgB,CACd,SAAU,EACV,aAAcrE,EAAE,MAAM,EACtB,cAAeA,EAAE,eAAe,CAClC,EACA,SAAWsE,GACTzD,EAAyByD,CAAM,EAEjC,WAAYH,EAAM,MAClB,SAAWI,GAAkB,CACrB,MAAAC,EAASD,EAAc,WACzB,IAAAE,EAAe,CAAC,EAAE,EAClBN,EAAM,MACRM,EAAeN,EAAM,MAAM,SAASK,CAAM,EACtCL,EAAM,MAAM,OACTO,GAAiBA,IAASF,CAE7B,EAAA,CAAC,GAAGL,EAAM,MAAOK,CAAM,EAE3BC,EAAe,CAACD,CAAM,EAExBL,EAAM,SAASM,CAAY,CAC7B,EACA,QAAS,IAAM,CACPN,EAAA,SAAS,CAAA,CAAE,CACnB,EACA,OAAQvD,EACR,kBAAiB,QAEhB,SAAAP,EAAa,IAAKmE,GACjBpF,EAACuF,GAAA,CAEC,MAAOH,EAAO,KAEb,SAAOA,EAAA,IAAA,EAHHA,EAAO,IAAA,CAKf,CAAA,CACH,CAAA,CAAA,EAGN,CAAA,EAEJ,CAAA,EAEJ,CAAA,CAAA,CAEJ,CACF,CAAA,CACF,CAAA,CAAA,CAEJ,EC3gBMM,GAAc,CAAC,CAAE,KAAAC,KAA6B,CAC5C,KAAA,CAAE,EAAA/E,GAAMb,IACR,CAAE,QAAA6F,GAAY5E,IAEpB,SACGb,GACC,CAAA,SAAAH,EAAC8E,EAAA,CACC,KAAM,eAAea,CAAI,GACzB,QAAAC,EACA,aAAc,CAAC,EACf,OAAQ,CAAC,CAAE,MAAAb,CAAA,IAEPjB,EAAAC,EAAA,CAAA,SAAA,CAAA/D,EAACI,EAAS,CAAA,GAAI,EAAG,GAAI,EACnB,SAAAJ,EAAC6F,GAAA,CACC,GAAI,QAAQF,CAAI,GAChB,MAAO/E,EAAE,MAAM,EACf,MAAM,OACN,cAAa,QAAQ+E,CAAI,GACzB,UAAWZ,EAAM,MAAM,SAAS,MAAM,EACtC,SAAU,IAAM,CACd,MAAMK,EAAS,OACTC,EAAeN,EAAM,MAAM,SAASK,CAAM,EAC5CL,EAAM,MAAM,OAAQO,GAAiBA,IAASF,CAAM,EACpD,CAAC,GAAGL,EAAM,MAAOK,CAAM,EAE3BL,EAAM,SAASM,CAAY,CAC7B,CAAA,CAAA,EAEJ,EACCrF,EAAAI,EAAA,CAAS,GAAI,EAAG,GAAI,EACnB,SAAAJ,EAAC6F,GAAA,CACC,GAAI,SAASF,CAAI,GACjB,MAAO/E,EAAE,OAAO,EAChB,MAAM,QACN,cAAa,SAAS+E,CAAI,GAC1B,UAAWZ,EAAM,MAAM,SAAS,OAAO,EACvC,SAAU,IAAM,CACd,MAAMK,EAAS,QACTC,EAAeN,EAAM,MAAM,SAASK,CAAM,EAC5CL,EAAM,MAAM,OAAQO,GAAiBA,IAASF,CAAM,EACpD,CAAC,GAAGL,EAAM,MAAOK,CAAM,EAE3BL,EAAM,SAASM,CAAY,CAC7B,CAAA,CAAA,EAEJ,CAAA,EACF,CAAA,CAGN,CAAA,CAAA,CAEJ,EAEaS,GAAsB,IAAM,CACjC,KAAA,CAAE,GAAM/F,IAEd,OACG+D,EAAA7D,GAAA,CAAW,KAAK,eAAe,aAAY,GAC1C,SAAA,CAAAD,EAACE,EAAA,CACC,gBAAe,GACf,MAAO,EAAE,YAAY,EACrB,YACGgE,EAAS,CAAA,SAAU,EAAE,gBAAgB,EAAG,aAAa,aAAa,EAErE,QAAQ,kBAER,SAAAlE,EAAC0F,GAAY,CAAA,KAAK,MAAO,CAAA,CAAA,CAC3B,EACA1F,EAACE,EAAA,CACC,gBAAe,GACf,MAAO,EAAE,YAAY,EACrB,YACGgE,EAAS,CAAA,SAAU,EAAE,gBAAgB,EAAG,aAAa,aAAa,EAErE,QAAQ,kBAER,SAAAlE,EAAC0F,GAAY,CAAA,KAAK,MAAO,CAAA,CAAA,CAC3B,CACF,CAAA,CAAA,CAEJ,EC5EaK,GAAkB,CAAC,CAC9B,mBAAAC,EACA,SAAAC,CACF,IAA4B,CACpB,KAAA,CAAE,EAAArF,GAAMb,IACRmG,EACJC,GAAc,EAAE,iBAAiB,iCAAiC,GAAK,CAAA,EACnEC,EAAaC,GACjB,IAAMH,EAAa,OAAO,CAAC,CAAE,GAAAI,CAAG,IAAM,CAACN,EAAmB,SAASM,CAAE,CAAC,EACtE,CAACN,CAAkB,CAAA,EAEf,CAACO,EAAMC,CAAM,EAAI5E,GAAU,EAC3B,CAACe,EAAO8D,CAAQ,EAAItF,EAAsC,EAEhE,SACGjB,EAAU,CAAA,MAAOU,EAAE,eAAe,EAAG,QAAQ,YAC5C,SAAAZ,EAACgF,EAAA,CACC,SAAS,YACT,SAAUwB,EACV,SAAW7D,GAAU,CACnB,MAAMyC,EAASzC,EACfsD,EAASb,CAAM,EACfqB,EAASrB,CAAM,EACRoB,GACT,EACA,WAAY7D,GAAO,GACnB,QAAQ,SACR,aAAY/B,EAAE,WAAW,EACzB,OAAQ2F,EACR,gBAAiB3F,EAAE,QAAQ,EAC3B,aAAa,SACb,UAAW,IAEV,SAAAwF,EAAW,IAAKhB,GACfpF,EAACuF,GAAA,CACC,SAAU5C,GAAO,KAAOyC,EAAO,GAE/B,MAAOA,EACP,YAAaA,EAAO,SAEnB,SAAOA,EAAA,EAAA,EAJHA,EAAO,EAAA,CAMf,CAAA,CAEL,CAAA,CAAA,CAEJ,ECzCasB,GAAqB,CAAC,CACjC,mBAAAV,EACA,aAAAW,EACA,UAAAC,CACF,IAA+B,CACvB,KAAA,CAAE,EAAAhG,GAAMb,IACR,CAAC8G,EAAmBC,CAAoB,EAC5C3F,EAAsC,EAElC4F,EACJZ,GAAc,EAAE,iBAAiB,iCAAiC,EAC/D,SAAWH,EAAmB,OAC7BjF,EAAOiG,KACP,CAAE,aAAAC,CAAiB,EAAAlG,EAEnBmG,EAAQC,GAA8C,CAC1DP,EAAU,CAAE,GAAGO,EAAc,GAAIN,GAAmB,GAAI,EAC3CF,GAAA,EAIb,OAAA3G,EAACoH,GAAA,CACC,QAASC,GAAa,MACtB,MAAOzG,EAAE,cAAc,EACvB,OAAM,GACN,QAAS+F,EACT,QAAS,CACP3G,EAACsE,EAAA,CAEC,cAAY,6BACZ,QAAQ,UACR,KAAK,SACL,KAAK,gBAEJ,WAAE,MAAM,CAAA,EANL,MAON,EACAtE,EAACsE,EAAA,CAEC,cAAY,+BACZ,QAAQ,OACR,QAASqC,EAER,WAAE,QAAQ,CAAA,EALP,QAMN,CACF,EAEC,SAAAI,EACCnG,EAAE,iBAAiB,EAEnBkD,EAACwD,GAAK,CAAA,GAAG,gBAAgB,SAAUL,EAAaC,CAAI,EAClD,SAAA,CAAAlH,EAAC+F,GAAA,CACC,mBAAoBC,EAAmB,IACpCuB,GAAcA,EAAU,GAC3B,EACA,SAAUT,CAAA,CACZ,EACCD,GACE7G,EAAAiE,GAAA,CAAc,GAAGlD,EAChB,WAACyG,GAAkB,CAAA,WAAYX,EAAkB,UAAA,CAAY,CAC/D,CAAA,CAAA,EAEJ,CAAA,CAAA,CAIR,EC9DaY,GAAuB,IAAM,CAClC,KAAA,CAAE,GAAM1H,IACR,CAAC2H,EAAuB/F,CAAW,EAAIC,GAAU,EACjD,CAAC+F,EAAmBC,CAAoB,EAAIzG,EAAiB,EAC7D,CAAE,SAAAsF,EAAU,QAAAb,EAAS,SAAAiC,EAAU,UAAAC,CAAA,EAAc9G,IAE7CoF,EAAmCtD,EAAS,CAChD,KAAM,cACN,QAAA8C,EACA,aAAc,CAAC,CAAA,CAChB,EAEDrC,GAAU,IAAM,CACdsE,EAAS,aAAa,CAAA,EACrB,CAACA,CAAQ,CAAC,EAEb,KAAM,CAACE,EAAoBC,CAAa,EAAIC,GAAiB,CAC3D,SAAU,EAAE,6BAA6B,EACzC,WAAY,EAAE,4BAA6B,CACzC,cAAeN,CAAA,CAChB,EACD,oBAAqB,SACrB,sBAAuBO,GAAc,OACrC,UAAW,SAAY,CACrB,MAAMC,EAAoB/B,EAAW,OAClCmB,GAAcA,EAAU,MAAQI,CAAA,EAGnClB,EAAS,cAAe,CAAC,GAAG0B,CAAiB,CAAC,CAChD,CAAA,CACD,EAED,OAEKrE,EAAAC,EAAA,CAAA,SAAA,CACC2D,GAAA1H,EAAC0G,GAAA,CACC,mBAAoBN,EACpB,UAAYe,GAAiB,CACrB,MAAAiB,EAA8BN,EAAU,aAAa,EAEzDX,EAAa,KAAO,WACpB,CAACiB,EAAY,KAAMC,GAAMA,EAAE,MAAQ,WAAW,GAE9C5B,EAAS,cAAe,CACtB,GAAG2B,EACH,CAAE,IAAK,YAAa,MAAO,QAAS,CAAA,CACrC,EAEH3B,EAAS,cAAe,CACtB,GAAGL,EACH,CAAE,IAAKe,EAAa,GAAI,MAAOA,EAAa,MAAO,CAAA,CACpD,CACH,EACA,aAAcxF,CAAA,CAChB,IAEDqG,EAAc,EAAA,EACflE,EAAC,MAAI,CAAA,UAAU,4BACb,SAAA,CAAA9D,EAACsE,EAAA,CACC,GAAG,eACH,QAAS,IAAM3C,EAAY,EAC3B,QAAQ,OACR,cAAY,eACZ,UAAU,oDACV,OAAO2G,GAAe,EAAA,EAErB,WAAE,cAAc,CAAA,CACnB,IACC1D,EAAQ,EAAA,EACRwB,EAAW,SAAW,EACrBtC,EAACyE,GACC,CAAA,SAAA,CAACvI,EAAAwI,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAACzI,EAAA0I,EAAA,CAAI,SAAE,EAAA,2BAA2B,CAAE,CAAA,EACnC1I,EAAA0I,EAAA,CAAI,SAAE,EAAA,6BAA6B,CAAE,CAAA,EACtC1I,EAAC0I,EAAG,CAAA,cAAY,MAAO,CAAA,CAAA,CAAA,CACzB,CACF,CAAA,IACCC,GACE,CAAA,SAAAvC,EAAW,IAAKmB,KACdkB,GACC,CAAA,SAAA,CAAAzI,EAAC4I,GAAG,UAAW,EAAE,2BAA2B,EACzC,WAAU,IACb,EACA5I,EAAC4I,EAAG,CAAA,UAAW,EAAE,6BAA6B,EAC3C,SAAK,KAAA,UAAUrB,EAAU,KAAK,CACjC,CAAA,EACAvH,EAAC4I,EAAG,CAAA,UAAU,0CACZ,SAAA5I,EAACsE,EAAA,CAEC,QAAQ,OACR,cAAY,kBACZ,QAAS,IAAM,CACMyD,IACnBH,EAAqBL,EAAU,GAAG,CACpC,EAEC,WAAE,QAAQ,CAAA,EARP,WAAA,EAUR,CAnBO,CAAA,EAAAA,EAAU,GAoBnB,CACD,EACH,CACF,CAAA,CAAA,EAECvH,EAAA6I,GAAA,CAAK,UAAU,qBAAqB,UAAWC,GAAa,EAC1D,SAAE,EAAA,iBAAiB,CACtB,CAAA,CAAA,EAEJ,CACF,CAAA,CAAA,CAEJ,ECzCanE,GAAiB,CAAC,WAAY,OAAO,EAE5CoE,GAA6B,CAAC,CAClC,2BAAAC,EACA,+BAAAvI,EACA,KAAAyG,CACF,IAIM,CACE,KAAA,CAAE,EAAAtG,GAAMb,IACRgB,EAAOC,IACP,CAAE,MAAAH,EAAO,cAAAgB,CAAc,EAAIC,GAA2B,EACtDC,EAAW,EAAAF,EAEXuB,EAA0Bd,GAAmC,CACjE0G,EAA2B1G,CAAgB,CAAA,EAGvCe,EAA8BnB,GAAiC,CACnEzB,EAA+ByB,CAAoB,CAAA,EAGrD,SACG+G,GACC,CAAA,SAAA,CAAAjJ,EAACkJ,GAAA,CACC,MAAOtI,EAAE,eAAe,EACxB,SAAU,CACR,CACE,MAAOA,EAAE,iBAAiB,EAC1B,MACEZ,EAACO,GAAA,CACC,0BAA2B6C,EAC3B,+BAAgCC,CAAA,CAClC,CAEJ,EACA,CAAE,MAAOzC,EAAE,YAAY,EAAG,MAAOZ,EAAC8F,KAAoB,CAAG,EACzD,CAAE,MAAOlF,EAAE,aAAa,EAAG,MAAOZ,EAACyH,KAAqB,CAAG,EAC3D,CAAE,MAAO7G,EAAE,aAAa,EAAG,MAAOZ,EAACF,KAAqB,CAAG,CAC7D,CAAA,CACF,EACAE,EAACsH,GAAK,CAAA,SAAUvG,EAAK,aAAamG,CAAI,EACpC,SAAApD,EAACqF,GAAkB,CAAA,KAAK,qBACtB,SAAA,CAAAnJ,EAACsE,EAAA,CACC,QAAQ,UACR,KAAK,SACL,cAAY,mBAEX,SAAW1D,EAAAmB,EAAE,OAAY,QAAN,CAAc,CACpC,EACA/B,EAACoJ,GAAA,CACC,GAAIC,GAAc,CAAE,MAAAxI,EAAO,IAAK,aAAc,EAC9C,cAAY,mBACZ,UAAU,qBAET,WAAE,QAAQ,CAAA,CACb,CAAA,CAAA,CACF,CACF,CAAA,CACF,CAAA,CAAA,CAEJ,EAEA,SAAwByI,IAAuB,CACvC,KAAA,CAAE,YAAA5I,GAAgBC,KAClB,CAAE,MAAO4I,EAAW,cAAA1H,GAAkBC,GAA2B,EACjE,CAAE,oBAAqBjB,CAAM,EAAIC,GAAS,EAC1CC,EAAOiG,KACP,CAAE,EAAApG,GAAMb,IACRyJ,EAAkBC,KAClBC,EAAWC,KACX,CAAE,SAAAC,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAC1I,EAAQC,CAAS,EAAIF,EAAmC,IAAI,EAC7DY,EAAW,EAAAF,EACX,CAACS,EAAkBC,CAAmB,EAAIpB,EAAuB,CACrE,IAAK,GACL,aAAc,CAAC,CAAA,CAChB,EACK,CAACe,EAAsBC,CAAuB,EAAIhB,EAAiB,EAAE,EAE3EgC,EACE,SAAY,CACV,MAAM4G,EAAqC,CAAA,EAE3C,aAAM,QAAQ,IACZP,EAAgB,IAAI,MAAOQ,GAAmB,CACxC,GAAA,CACF,MAAMC,EACJ,MAAMvJ,EAAY,OAAO,0BAA0B,CACjD,MAAO6I,EACP,eAAAS,CAAA,CACD,EAEGE,EAAWnJ,EAAK,YAChBoJ,EACJD,EAAS,aAAa,UACpB,EACAA,EAAS,YAAY,OAAS,CAC3B,GAAA,GAEDE,EAA0C,OAAO,QACrDH,CAEC,EAAA,OAAO,CAAC,CAACI,CAAG,IAAMA,IAAQF,CAAY,EACtC,IAAI,CAAC,CAACG,EAAG3H,CAAK,KAAO,CACpB,OAAQqH,EACR,MAAArH,CACA,EAAA,EAEAyH,EAAqB,OAAS,GAChCL,EAAmB,KAAK,CACtB,IAAKI,EACL,aAAcC,CAAA,CACf,QAEIG,EAAO,CACdV,EAAS,0BAA2BU,CAAK,CAC3C,CAAA,CACD,CAAA,EAGIR,CACT,EACCA,GAAuB,CAClB,GAAAA,GAAsBA,EAAmB,OAAS,EAAG,CACvD,MAAMS,EAAkBT,EAAmB,QACxCU,GAAgBA,EAAY,YAAA,EAGXlI,EAAA,CAClB,IAAKwH,EAAmB,CAAC,EAAE,IAC3B,aAAcS,CAAA,CACf,EAEIzJ,EAAA,SAAS,eAAgByJ,CAAe,CAC/C,CACF,EACA,CAAChB,EAAiBD,EAAWxI,CAAI,CAAA,EAGnCoC,EACE,IAAMzC,EAAY,MAAM,WAAW,EAClCU,GAAW,CACVC,EAAUD,CAAM,EACV,KAAA,CACJ,YAAAgH,EACA,YAAAsC,EACA,YAAAC,EACA,SAAAC,EACA,SAAA5H,EACA,YAAA6H,EACA,GAAGC,CAAA,EACD1J,EAAO,WAAY,KACpB2J,GAAcA,EAAU,OAASlJ,CAAA,GAC/B,CAAE,YAAa,CAAE,KAAM,CAAC,OAAO,CAAI,CAAA,EACxCmJ,GACE,CACE,GAAGF,EACH,YAAa,OAAOF,EAAa,IACjC,kBAAmB,OAAO5H,GAAU,OAAW,GACjD,EACAjC,EAAK,QAAA,EAEA,OAAA,QACLkK,GAAkB,CAAE,YAAAN,EAAa,SAAAC,EAAU,SAAA5H,GAAY,CAAE,KAAM,GAAM,CAAA,EACrE,IAAI,CAAC,CAACqH,EAAK1H,CAAK,IAAM5B,EAAK,SAASsJ,EAAY1H,CAAK,CAAC,EACnD5B,EAAA,SACH,cACA,OAAO,QAAQqH,GAAe,CAAE,CAAA,EAAE,IAAI,CAAC,CAACiC,EAAK1H,CAAK,KAAO,CACvD,IAAA0H,EACA,MAAA1H,CAAA,EACA,CAAA,EAEC5B,EAAA,SACH,cACA,OAAO,QAAQ2J,GAAe,CAAE,CAAA,EAAE,IAAI,CAAC,CAACL,EAAK1H,CAAK,KAAO,CACvD,IAAA0H,EACA,MAAA1H,CAAA,EACA,CAAA,EAEC5B,EAAA,SAAS,aAAciC,IAAa,MAAS,EAC7CjC,EAAA,SAAS,cAAe8J,IAAgB,EAAI,CACnD,EACA,CAAC,CAAA,EAGH,MAAMK,EAAmB,SAAY,CAC/B,GAAA,CACF,MAAMC,EAAuB7I,EAAiB,aAC3C,OAAQmI,GAAgBA,EAAY,MAAM,KAAA,IAAW,EAAE,EACvD,IAAI,MAAOA,GAAgB,CACtB,GAAA,CACF,MAAM/J,EAAY,OAAO,gBACvB,CACE,MAAO6I,EACP,eAAgBkB,EAAY,OAC5B,IAAKnI,EAAiB,GACxB,EACAmI,EAAY,KAAA,QAEPF,EAAO,CACLV,EAAAjJ,EAAE,yBAAyB,EAAG2J,CAAK,CAC9C,CAAA,CACD,EAEG,MAAA,QAAQ,IAAIY,CAAoB,QAC/BZ,EAAO,CACN,QAAA,MAAM,8BAA8BA,CAAK,EAAE,CACrD,CAAA,EAGIrD,EAAO,MAAO,CAClB,YAAArE,EACA,kBAAAE,EACA,GAAGqI,CAAA,IACiC,CAC/BvI,GACH,OAAOuI,EAAW,SAGfrI,GACH,OAAOqI,EAAW,UAAU,OAGxB,MAAAV,EAAcU,EAAW,YAAY,OACzC,CAACC,EAAiBC,KAChBD,EAAgBC,EAAmB,GAAG,EACpCA,EAAmB,OAAS,CAAA,EACvBD,GAET,CAAC,CAAA,EAGGjD,EAAcgD,EAAW,YAAY,OACzC,CAACG,EAAKjG,IAAS,OAAO,OAAOiG,EAAK,CAAE,CAACjG,EAAK,GAAG,EAAGA,EAAK,MAAO,EAC5D,CAAC,CAAA,EAGGkG,EAAkB,KACrBpK,GAAQ,YAAc,IAAI,IAAK2J,GAC1BA,EAAU,OAASlJ,EACdkJ,GAGT,OAAOA,EAAU,SACV,OAAO,OACZ,CACE,GAAGA,EACH,KAAMlJ,EACN,YAAauJ,EAAW,YACxB,SAAUA,EAAW,SACrB,YAAaA,EAAW,YACxB,YAAaA,EAAW,YACxB,YAAAhD,EACA,YAAAsC,CACF,EACAU,EAAW,WAAa,CAAE,SAAUA,EAAW,QAAa,EAAA,OAC5DA,EAAW,MAAQ,CAAE,MAAOA,EAAW,OAAU,CAAE,MAAO,IAAK,CAAA,EAElE,EAEGK,EAAe,KAClBrK,GAAQ,YAAc,CAAA,GAAI,OAAO,CAChC,OAAO,OACL,CACE,KAAMgK,EAAW,KACjB,YAAaA,EAAW,aAAgBlJ,EACxC,SAAUkJ,EAAW,WAAaA,EAAW,SAAW,OACxD,SAAUA,EAAW,SACrB,YAAaA,EAAW,YACxB,YAAaA,EAAW,YACxB,YAAAhD,EACA,YAAAsC,CACF,EACAU,EAAW,WAAa,CAAE,SAAUA,EAAW,QAAa,EAAA,OAC5DA,EAAW,MAAQ,CAAE,MAAOA,EAAW,KAAU,EAAA,MACnD,CAAA,CACuB,EAE3B,GAAIvK,GAAO,6BAKL,CAJ4ByB,EAAiB,aAAa,KAC3DmI,GAAgBA,EAAY,MAAM,KAAW,IAAA,EAAA,EAGlB,CACnBZ,EAAA,uBAAwBjJ,EAAE,kBAAkB,CAAC,EACtD,MACF,CAGE,GAAA,CACF,MAAM8K,EAAoB3J,EAAWyJ,EAAgB,EAAIC,EAAa,EAEhE,MAAA/K,EAAY,MAAM,cAAc,CACpC,GAAGU,EACH,WAAYsK,EACZ,MAAOnC,CAAA,CACR,EAED,MAAM2B,EAAiB,EACvBS,GAAK,gBAAgB,EACrBjC,EAASL,GAAc,CAAE,MAAOE,EAAW,IAAK,YAAc,CAAA,CAAC,EAE/DK,EAAShJ,EAAE,wBAAwB,EAAGgL,GAAa,OAAO,QACnDrB,EAAO,CACdV,EAAS,uBAAwBU,CAAK,CACxC,CAAA,EAIA,OAAAzG,EAACG,GAAc,CAAA,GAAGlD,EAChB,SAAA,CAAAf,EAAC6L,GAAA,CACC,SAAU9J,EAAWF,EAAgBjB,EAAE,iBAAiB,EACxD,OAAQmB,EAAW,GAAKnB,EAAE,yBAAyB,CAAA,CACrD,EACAZ,EAAC8L,GAAY,CAAA,QAAQ,QACnB,SAAA9L,EAAC+I,GAAA,CACC,KAAM,IAAMhI,EAAK,aAAamG,CAAI,EAAE,EACpC,2BAA4B3E,EAC5B,+BAAgCJ,CAAA,CAAA,EAEpC,CACF,CAAA,CAAA,CAEJ"}