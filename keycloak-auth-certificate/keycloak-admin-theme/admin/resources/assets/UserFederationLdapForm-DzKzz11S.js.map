{"version":3,"file":"UserFederationLdapForm-DzKzz11S.js","sources":["../../../../../../../src/user-federation/ldap/LdapSettingsConnection.tsx","../../../../../../../src/user-federation/ldap/LdapSettingsAdvanced.tsx","../../../../../../../src/user-federation/ldap/LdapSettingsGeneral.tsx","../../../../../../../src/user-federation/ldap/LdapSettingsKerberosIntegration.tsx","../../../../../../../src/user-federation/ldap/LdapSettingsSearching.tsx","../../../../../../../src/user-federation/ldap/LdapSettingsSynchronization.tsx","../../../../../../../src/user-federation/UserFederationLdapForm.tsx"],"sourcesContent":["import type TestLdapConnectionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/testLdapConnection\";\nimport {\n  HelpItem,\n  KeycloakSelect,\n  PasswordControl,\n  SelectControl,\n  SelectVariant,\n  TextControl,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  FormGroup,\n  SelectOption,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { get, isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport {\n  Controller,\n  FormProvider,\n  UseFormReturn,\n  useWatch,\n} from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\nexport type LdapSettingsConnectionProps = {\n  form: UseFormReturn;\n  id?: string;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nconst testLdapProperties: Array<keyof TestLdapConnectionRepresentation> = [\n  \"connectionUrl\",\n  \"bindDn\",\n  \"bindCredential\",\n  \"useTruststoreSpi\",\n  \"connectionTimeout\",\n  \"startTls\",\n  \"authType\",\n];\n\ntype TestTypes = \"testConnection\" | \"testAuthentication\";\n\nexport const convertFormToSettings = (form: UseFormReturn) => {\n  const settings: TestLdapConnectionRepresentation = {};\n\n  testLdapProperties.forEach((key) => {\n    const value = get(form.getValues(), `config.${key}`);\n    settings[key] = Array.isArray(value) ? value[0] : \"\";\n  });\n\n  return settings;\n};\n\nexport const LdapSettingsConnection = ({\n  form,\n  id,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsConnectionProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const edit = !!id;\n\n  const testLdap = async (testType: TestTypes) => {\n    try {\n      const settings = convertFormToSettings(form);\n      await adminClient.realms.testLDAPConnection(\n        { realm },\n        { ...settings, action: testType, componentId: id },\n      );\n      addAlert(t(\"testSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"testError\", error);\n    }\n  };\n\n  const [isBindTypeDropdownOpen, setIsBindTypeDropdownOpen] = useState(false);\n\n  const ldapBindType = useWatch({\n    control: form.control,\n    name: \"config.authType\",\n    defaultValue: [\"simple\"],\n  });\n\n  return (\n    <FormProvider {...form}>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"connectionAndAuthenticationSettings\")}\n          description={t(\"ldapConnectionAndAuthorizationSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <TextControl\n          name=\"config.connectionUrl.0\"\n          label={t(\"connectionURL\")}\n          labelIcon={t(\"consoleDisplayConnectionUrlHelp\")}\n          type=\"url\"\n          rules={{\n            required: t(\"validateConnectionUrl\"),\n          }}\n        />\n        <FormGroup\n          label={t(\"enableStartTls\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"enableStartTlsHelp\")}\n              fieldLabelId=\"enableStartTls\"\n            />\n          }\n          fieldId=\"kc-enable-start-tls\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.startTls\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-enable-start-tls\"}\n                data-testid=\"enable-start-tls\"\n                isDisabled={false}\n                onChange={(_event, value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"enableStartTls\")}\n              />\n            )}\n          />\n        </FormGroup>\n        <SelectControl\n          id=\"useTruststoreSpi\"\n          name=\"config.useTruststoreSpi[0]\"\n          label={t(\"useTruststoreSpi\")}\n          labelIcon={t(\"useTruststoreSpiHelp\")}\n          controller={{\n            defaultValue: \"always\",\n          }}\n          options={[\n            { key: \"always\", value: t(\"always\") },\n            { key: \"never\", value: t(\"never\") },\n          ]}\n        />\n        <FormGroup\n          label={t(\"connectionPooling\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"connectionPoolingHelp\")}\n              fieldLabelId=\"connectionPooling\"\n            />\n          }\n          fieldId=\"kc-connection-pooling\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.connectionPooling\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-connection-pooling\"}\n                data-testid=\"connection-pooling\"\n                isDisabled={false}\n                onChange={(_event, value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"connectionPooling\")}\n              />\n            )}\n          />\n        </FormGroup>\n        <TextControl\n          name=\"config.connectionTimeout.0\"\n          label={t(\"connectionTimeout\")}\n          labelIcon={t(\"connectionTimeoutHelp\")}\n          type=\"number\"\n          min={0}\n        />\n        <FormGroup fieldId=\"kc-test-connection-button\">\n          <Button\n            variant=\"secondary\"\n            id=\"kc-test-connection-button\"\n            data-testid=\"test-connection-button\"\n            onClick={() => testLdap(\"testConnection\")}\n          >\n            {t(\"testConnection\")}\n          </Button>\n        </FormGroup>\n        <FormGroup\n          label={t(\"bindType\")}\n          labelIcon={\n            <HelpItem helpText={t(\"bindTypeHelp\")} fieldLabelId=\"bindType\" />\n          }\n          fieldId=\"kc-bind-type\"\n          isRequired\n        >\n          <Controller\n            name=\"config.authType[0]\"\n            defaultValue=\"simple\"\n            control={form.control}\n            render={({ field }) => (\n              <KeycloakSelect\n                toggleId=\"kc-bind-type\"\n                onToggle={() =>\n                  setIsBindTypeDropdownOpen(!isBindTypeDropdownOpen)\n                }\n                isOpen={isBindTypeDropdownOpen}\n                onSelect={(value) => {\n                  field.onChange(value as string);\n                  setIsBindTypeDropdownOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                data-testid=\"ldap-bind-type\"\n                aria-label={t(\"selectBindType\")}\n              >\n                <SelectOption value=\"simple\">simple</SelectOption>\n                <SelectOption value=\"none\">none</SelectOption>\n              </KeycloakSelect>\n            )}\n          />\n        </FormGroup>\n\n        {isEqual(ldapBindType, [\"simple\"]) && (\n          <>\n            <TextControl\n              name=\"config.bindDn.0\"\n              label={t(\"bindDn\")}\n              labelIcon={t(\"bindDnHelp\")}\n              rules={{\n                required: t(\"validateBindDn\"),\n              }}\n            />\n            <PasswordControl\n              name=\"config.bindCredential.0\"\n              label={t(\"bindCredentials\")}\n              labelIcon={t(\"bindCredentialsHelp\")}\n              hasReveal={!edit}\n              rules={{\n                required: t(\"validateBindCredentials\"),\n              }}\n            />\n          </>\n        )}\n        <FormGroup fieldId=\"kc-test-auth-button\">\n          <Button\n            variant=\"secondary\"\n            id=\"kc-test-auth-button\"\n            data-testid=\"test-auth-button\"\n            onClick={() => testLdap(\"testAuthentication\")}\n          >\n            {t(\"testAuthentication\")}\n          </Button>\n        </FormGroup>\n      </FormAccess>\n    </FormProvider>\n  );\n};\n","import { Button, FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormToSettings } from \"./LdapSettingsConnection\";\n\nexport type LdapSettingsAdvancedProps = {\n  id?: string;\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nconst PASSWORD_MODIFY_OID = \"1.3.6.1.4.1.4203.1.11.1\";\n\nexport const LdapSettingsAdvanced = ({\n  id,\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsAdvancedProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n\n  const testLdap = async () => {\n    if (!(await form.trigger())) return;\n    try {\n      const settings = convertFormToSettings(form);\n      const ldapOids = await adminClient.realms.ldapServerCapabilities(\n        { realm },\n        { ...settings, componentId: id },\n      );\n      addAlert(t(\"testSuccess\"));\n      const passwordModifyOid = ldapOids.filter(\n        (id: { oid: string }) => id.oid === PASSWORD_MODIFY_OID,\n      );\n      form.setValue(\"config.usePasswordModifyExtendedOp\", [\n        (passwordModifyOid.length > 0).toString(),\n      ]);\n    } catch (error) {\n      addError(\"testError\", error);\n    }\n  };\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"advancedSettings\")}\n          description={t(\"ldapAdvancedSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"enableLdapv3Password\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"enableLdapv3PasswordHelp\")}\n              fieldLabelId=\"enableLdapv3Password\"\n            />\n          }\n          fieldId=\"kc-enable-ldapv3-password\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.usePasswordModifyExtendedOp\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-enable-ldapv3-password\"}\n                data-testid=\"ldapv3-password\"\n                isDisabled={false}\n                onChange={(_event, value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"enableLdapv3Password\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"validatePasswordPolicy\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"validatePasswordPolicyHelp\")}\n              fieldLabelId=\"validatePasswordPolicy\"\n            />\n          }\n          fieldId=\"kc-validate-password-policy\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.validatePasswordPolicy\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-validate-password-policy\"}\n                data-testid=\"password-policy\"\n                isDisabled={false}\n                onChange={(_event, value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"validatePasswordPolicy\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"trustEmail\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"trustEmailHelp\")}\n              fieldLabelId=\"trustEmail\"\n            />\n          }\n          fieldId=\"kc-trust-email\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.trustEmail\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-trust-email\"}\n                data-testid=\"trust-email\"\n                isDisabled={false}\n                onChange={(_event, value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"trustEmail\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup fieldId=\"query-extensions\">\n          <Button\n            variant=\"secondary\"\n            id=\"query-extensions\"\n            data-testid=\"query-extensions\"\n            onClick={testLdap}\n          >\n            {t(\"queryExtensions\")}\n          </Button>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport {\n  HelpItem,\n  KeycloakSelect,\n  SelectVariant,\n  TextControl,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { FormGroup, SelectOption } from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, FormProvider, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\nexport type LdapSettingsGeneralProps = {\n  form: UseFormReturn<ComponentRepresentation>;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n  vendorEdit?: boolean;\n};\n\nexport const LdapSettingsGeneral = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n  vendorEdit = false,\n}: LdapSettingsGeneralProps) => {\n  const { t } = useTranslation();\n  const { realm, realmRepresentation } = useRealm();\n\n  useEffect(() => form.setValue(\"parentId\", realmRepresentation?.id), []);\n  const [isVendorDropdownOpen, setIsVendorDropdownOpen] = useState(false);\n\n  const setVendorDefaultValues = () => {\n    switch (form.getValues(\"config.vendor[0]\")) {\n      case \"ad\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"cn\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"cn\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"objectGUID\");\n        form.setValue(\"config.krbPrincipalAttribute[0]\", \"userPrincipalName\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"person, organizationalPerson, user\",\n        );\n        break;\n      case \"rhds\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"nsuniqueid\");\n        form.setValue(\"config.krbPrincipalAttribute[0]\", \"krbPrincipalName\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\",\n        );\n        break;\n      case \"tivoli\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"uniqueidentifier\");\n        form.setValue(\"config.krbPrincipalAttribute[0]\", \"krb5PrincipalName\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\",\n        );\n        break;\n      case \"edirectory\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"guid\");\n        form.setValue(\"config.krbPrincipalAttribute[0]\", \"krb5PrincipalName\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\",\n        );\n        break;\n      case \"other\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"entryUUID\");\n        form.setValue(\"config.krbPrincipalAttribute[0]\", \"krb5PrincipalName\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\",\n        );\n        break;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <FormProvider {...form}>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"generalOptions\")}\n          description={t(\"ldapGeneralOptionsSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        {/* These hidden fields are required so data object written back matches data retrieved */}\n        <input\n          type=\"hidden\"\n          defaultValue=\"ldap\"\n          {...form.register(\"providerId\")}\n        />\n        <input\n          type=\"hidden\"\n          defaultValue=\"org.keycloak.storage.UserStorageProvider\"\n          {...form.register(\"providerType\")}\n        />\n        <input\n          type=\"hidden\"\n          defaultValue={realm}\n          {...form.register(\"parentId\")}\n        />\n        <TextControl\n          name=\"name\"\n          label={t(\"uiDisplayName\")}\n          labelIcon={t(\"uiDisplayNameHelp\")}\n          defaultValue=\"ldap\"\n          rules={{\n            required: t(\"validateName\"),\n          }}\n        />\n        <FormGroup\n          label={t(\"vendor\")}\n          labelIcon={\n            <HelpItem helpText={t(\"vendorHelp\")} fieldLabelId=\"vendor\" />\n          }\n          fieldId=\"kc-vendor\"\n          isRequired\n        >\n          <Controller\n            name=\"config.vendor[0]\"\n            defaultValue=\"ad\"\n            control={form.control}\n            render={({ field }) => (\n              <KeycloakSelect\n                isDisabled={!!vendorEdit}\n                toggleId=\"kc-vendor\"\n                onToggle={() => setIsVendorDropdownOpen(!isVendorDropdownOpen)}\n                isOpen={isVendorDropdownOpen}\n                onSelect={(value) => {\n                  field.onChange(value as string);\n                  setIsVendorDropdownOpen(false);\n                  setVendorDefaultValues();\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"selectVendor\")}\n              >\n                <SelectOption key={0} value=\"ad\">\n                  Active Directory\n                </SelectOption>\n                <SelectOption key={1} value=\"rhds\">\n                  Red Hat Directory Server\n                </SelectOption>\n                <SelectOption key={2} value=\"tivoli\">\n                  Tivoli\n                </SelectOption>\n                <SelectOption key={3} value=\"edirectory\">\n                  Novell eDirectory\n                </SelectOption>\n                <SelectOption key={4} value=\"other\">\n                  Other\n                </SelectOption>\n              </KeycloakSelect>\n            )}\n          ></Controller>\n        </FormGroup>\n      </FormAccess>\n    </FormProvider>\n  );\n};\n","import { FormGroup, Switch } from \"@patternfly/react-core\";\nimport {\n  Controller,\n  FormProvider,\n  UseFormReturn,\n  useWatch,\n} from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem, TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\n\nexport type LdapSettingsKerberosIntegrationProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const LdapSettingsKerberosIntegration = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsKerberosIntegrationProps) => {\n  const { t } = useTranslation();\n\n  const allowKerberosAuth: [string] = useWatch({\n    control: form.control,\n    name: \"config.allowKerberosAuthentication\",\n    defaultValue: [\"false\"],\n  });\n\n  return (\n    <FormProvider {...form}>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"kerberosIntegration\")}\n          description={t(\"ldapKerberosSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"allowKerberosAuthentication\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"allowKerberosAuthenticationHelp\")}\n              fieldLabelId=\"allowKerberosAuthentication\"\n            />\n          }\n          fieldId=\"kc-allow-kerberos-authentication\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.allowKerberosAuthentication\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-allow-kerberos-authentication\"\n                data-testid=\"allow-kerberos-auth\"\n                isDisabled={false}\n                onChange={(_event, value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"allowKerberosAuthentication\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        {allowKerberosAuth[0] === \"true\" && (\n          <>\n            <TextControl\n              name=\"config.kerberosRealm.0\"\n              label={t(\"kerberosRealm\")}\n              labelIcon={t(\"kerberosRealmHelp\")}\n              rules={{\n                required: t(\"validateRealm\"),\n              }}\n            />\n            <TextControl\n              name=\"config.serverPrincipal.0\"\n              label={t(\"serverPrincipal\")}\n              labelIcon={t(\"serverPrincipalHelp\")}\n              rules={{\n                required: t(\"validateServerPrincipal\"),\n              }}\n            />\n            <TextControl\n              name=\"config.keyTab.0\"\n              label={t(\"keyTab\")}\n              labelIcon={t(\"keyTabHelp\")}\n              rules={{\n                required: t(\"validateKeyTab\"),\n              }}\n            />\n            <TextControl\n              name=\"config.krbPrincipalAttribute.0\"\n              label={t(\"krbPrincipalAttribute\")}\n              labelIcon={t(\"krbPrincipalAttributeHelp\")}\n            />\n\n            <FormGroup\n              label={t(\"debug\")}\n              labelIcon={\n                <HelpItem helpText={t(\"debugHelp\")} fieldLabelId=\"debug\" />\n              }\n              fieldId=\"kc-debug\"\n              hasNoPaddingTop\n            >\n              <Controller\n                name=\"config.debug\"\n                defaultValue={[\"false\"]}\n                control={form.control}\n                render={({ field }) => (\n                  <Switch\n                    id=\"kc-debug\"\n                    data-testid=\"debug\"\n                    isDisabled={false}\n                    onChange={(_event, value) => field.onChange([`${value}`])}\n                    isChecked={field.value[0] === \"true\"}\n                    label={t(\"on\")}\n                    labelOff={t(\"off\")}\n                    aria-label={t(\"debug\")}\n                  />\n                )}\n              />\n            </FormGroup>\n          </>\n        )}\n        <FormGroup\n          label={t(\"useKerberosForPasswordAuthentication\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"useKerberosForPasswordAuthenticationHelp\")}\n              fieldLabelId=\"useKerberosForPasswordAuthentication\"\n            />\n          }\n          fieldId=\"kc-use-kerberos-password-authentication\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.useKerberosForPasswordAuthentication\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-use-kerberos-password-authentication\"\n                data-testid=\"use-kerberos-pw-auth\"\n                isDisabled={false}\n                onChange={(_event, value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"useKerberosForPasswordAuthentication\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n      </FormAccess>\n    </FormProvider>\n  );\n};\n","import {\n  HelpItem,\n  SelectControl,\n  TextControl,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, FormProvider, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\n\nexport type LdapSettingsSearchingProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const LdapSettingsSearching = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsSearchingProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <FormProvider {...form}>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"ldapSearchingAndUpdatingSettings\")}\n          description={t(\"ldapSearchingAndUpdatingSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <SelectControl\n          id=\"editMode\"\n          name=\"config.editMode[0]\"\n          label={t(\"editMode\")}\n          labelIcon={t(\"editModeLdapHelp\")}\n          controller={{\n            defaultValue: \"\",\n            rules: {\n              required: { value: true, message: t(\"validateEditMode\") },\n            },\n          }}\n          options={[\"\", \"READ_ONLY\", \"WRITABLE\", \"UNSYNCED\"]}\n        />\n        <TextControl\n          name=\"config.usersDn.0\"\n          label={t(\"usersDN\")}\n          labelIcon={t(\"usersDNHelp\")}\n          rules={{\n            required: t(\"validateUsersDn\"),\n          }}\n        />\n        <TextControl\n          name=\"config.usernameLDAPAttribute.0\"\n          label={t(\"usernameLdapAttribute\")}\n          labelIcon={t(\"usernameLdapAttributeHelp\")}\n          defaultValue=\"cn\"\n          rules={{\n            required: t(\"validateUsernameLDAPAttribute\"),\n          }}\n        />\n        <TextControl\n          name=\"config.rdnLDAPAttribute.0\"\n          label={t(\"rdnLdapAttribute\")}\n          labelIcon={t(\"rdnLdapAttributeHelp\")}\n          defaultValue=\"cn\"\n          rules={{\n            required: t(\"validateRdnLdapAttribute\"),\n          }}\n        />\n        <TextControl\n          name=\"config.uuidLDAPAttribute.0\"\n          label={t(\"uuidLdapAttribute\")}\n          labelIcon={t(\"uuidLdapAttributeHelp\")}\n          defaultValue=\"objectGUID\"\n          rules={{\n            required: t(\"validateUuidLDAPAttribute\"),\n          }}\n        />\n        <TextControl\n          name=\"config.userObjectClasses.0\"\n          label={t(\"userObjectClasses\")}\n          labelIcon={t(\"userObjectClassesHelp\")}\n          defaultValue=\"person, organizationalPerson, user\"\n          rules={{\n            required: t(\"validateUserObjectClasses\"),\n          }}\n        />\n        <TextControl\n          name=\"config.customUserSearchFilter.0\"\n          label={t(\"userLdapFilter\")}\n          labelIcon={t(\"userLdapFilterHelp\")}\n          rules={{\n            pattern: {\n              value: /(\\(.*\\))$/,\n              message: t(\"validateCustomUserSearchFilter\"),\n            },\n          }}\n        />\n        <SelectControl\n          id=\"kc-search-scope\"\n          name=\"config.searchScope[0]\"\n          label={t(\"searchScope\")}\n          labelIcon={t(\"searchScopeHelp\")}\n          controller={{\n            defaultValue: \"1\",\n          }}\n          options={[\n            { key: \"1\", value: t(\"oneLevel\") },\n            { key: \"2\", value: t(\"subtree\") },\n          ]}\n        />\n        <TextControl\n          name=\"config.readTimeout.0\"\n          label={t(\"readTimeout\")}\n          labelIcon={t(\"readTimeoutHelp\")}\n          type=\"number\"\n          min={0}\n        />\n        <FormGroup\n          label={t(\"pagination\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"paginationHelp\")}\n              fieldLabelId=\"pagination\"\n            />\n          }\n          fieldId=\"kc-ui-pagination\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.pagination\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-ui-pagination\"\n                data-testid=\"ui-pagination\"\n                isDisabled={false}\n                onChange={(_event, value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"pagination\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        <SelectControl\n          name=\"config.referral.0\"\n          label={t(\"referral\")}\n          labelIcon={t(\"referralHelp\")}\n          controller={{\n            defaultValue: \"\",\n          }}\n          options={[\"ignore\", \"follow\"]}\n        />\n      </FormAccess>\n    </FormProvider>\n  );\n};\n","import { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, FormProvider, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem, TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\n\nexport type LdapSettingsSynchronizationProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const LdapSettingsSynchronization = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsSynchronizationProps) => {\n  const { t } = useTranslation();\n\n  const watchPeriodicSync = form.watch(\"config.periodicFullSync\", false);\n  const watchChangedSync = form.watch(\"config.periodicChangedUsersSync\", false);\n\n  return (\n    <FormProvider {...form}>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"synchronizationSettings\")}\n          description={t(\"ldapSynchronizationSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          hasNoPaddingTop\n          label={t(\"importUsers\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"importUsersHelp\")}\n              fieldLabelId=\"importUsers\"\n            />\n          }\n          fieldId=\"kc-import-users\"\n        >\n          <Controller\n            name=\"config.importEnabled\"\n            defaultValue={[\"true\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-import-users\"\n                data-testid=\"import-users\"\n                name=\"importEnabled\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                onChange={(_event, value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                isDisabled={false}\n                aria-label={t(\"importUsers\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup\n          hasNoPaddingTop\n          label={t(\"syncRegistrations\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"syncRegistrations\")}\n              fieldLabelId=\"syncRegistrations\"\n            />\n          }\n          fieldId=\"syncRegistrations\"\n        >\n          <Controller\n            name=\"config.syncRegistrations\"\n            defaultValue={[\"true\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"syncRegistrations\"\n                data-testid=\"syncRegistrations\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                onChange={(_event, value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                aria-label={t(\"syncRegistrations\")}\n              />\n            )}\n          />\n        </FormGroup>\n        <TextControl\n          name=\"config.batchSizeForSync.0\"\n          type=\"number\"\n          min={0}\n          label={t(\"batchSize\")}\n          labelIcon={t(\"batchSizeHelp\")}\n        />\n        <FormGroup\n          label={t(\"periodicFullSync\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"periodicFullSyncHelp\")}\n              fieldLabelId=\"periodicFullSync\"\n            />\n          }\n          fieldId=\"kc-periodic-full-sync\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.periodicFullSync\"\n            defaultValue={false}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-periodic-full-sync\"\n                data-testid=\"periodic-full-sync\"\n                isDisabled={false}\n                onChange={(_event, value) => field.onChange(value)}\n                isChecked={field.value === true}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"periodicFullSync\")}\n              />\n            )}\n          />\n        </FormGroup>\n        {watchPeriodicSync && (\n          <TextControl\n            name=\"config.fullSyncPeriod.0\"\n            label={t(\"fullSyncPeriod\")}\n            labelIcon={t(\"fullSyncPeriodHelp\")}\n            type=\"number\"\n            min={-1}\n            defaultValue={604800}\n          />\n        )}\n        <FormGroup\n          label={t(\"periodicChangedUsersSync\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"periodicChangedUsersSyncHelp\")}\n              fieldLabelId=\"periodicChangedUsersSync\"\n            />\n          }\n          fieldId=\"kc-periodic-changed-users-sync\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.periodicChangedUsersSync\"\n            defaultValue={false}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-periodic-changed-users-sync\"\n                data-testid=\"periodic-changed-users-sync\"\n                isDisabled={false}\n                onChange={(_event, value) => field.onChange(value)}\n                isChecked={field.value === true}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"periodicChangedUsersSync\")}\n              />\n            )}\n          />\n        </FormGroup>\n        {watchChangedSync && (\n          <TextControl\n            name=\"config.changedSyncPeriod.0\"\n            label={t(\"changedUsersSyncPeriod\")}\n            labelIcon={t(\"changedUsersSyncHelp\")}\n            type=\"number\"\n            min={-1}\n            defaultValue={86400}\n          />\n        )}\n      </FormAccess>\n    </FormProvider>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport { Button, Form } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ScrollForm } from \"@keycloak/keycloak-ui-shared\";\n\nimport { FixedButtonsGroup } from \"../components/form/FixedButtonGroup\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { LdapSettingsAdvanced } from \"./ldap/LdapSettingsAdvanced\";\nimport { LdapSettingsConnection } from \"./ldap/LdapSettingsConnection\";\nimport { LdapSettingsGeneral } from \"./ldap/LdapSettingsGeneral\";\nimport { LdapSettingsKerberosIntegration } from \"./ldap/LdapSettingsKerberosIntegration\";\nimport { LdapSettingsSearching } from \"./ldap/LdapSettingsSearching\";\nimport { LdapSettingsSynchronization } from \"./ldap/LdapSettingsSynchronization\";\nimport { toUserFederation } from \"./routes/UserFederation\";\nimport { SettingsCache } from \"./shared/SettingsCache\";\n\nexport type LdapComponentRepresentation = ComponentRepresentation & {\n  config?: {\n    periodicChangedUsersSync?: boolean;\n    periodicFullSync?: boolean;\n  };\n};\n\nexport type UserFederationLdapFormProps = {\n  id?: string;\n  onSubmit: (formData: LdapComponentRepresentation) => void;\n};\n\nexport const UserFederationLdapForm = ({\n  id,\n  onSubmit,\n}: UserFederationLdapFormProps) => {\n  const { t } = useTranslation();\n  const form = useFormContext<LdapComponentRepresentation>();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n  const isFeatureEnabled = useIsFeatureEnabled();\n\n  return (\n    <>\n      <ScrollForm\n        label={t(\"jumpToSection\")}\n        sections={[\n          {\n            title: t(\"generalOptions\"),\n            panel: <LdapSettingsGeneral form={form} vendorEdit={!!id} />,\n          },\n          {\n            title: t(\"connectionAndAuthenticationSettings\"),\n            panel: <LdapSettingsConnection form={form} id={id} />,\n          },\n          {\n            title: t(\"ldapSearchingAndUpdatingSettings\"),\n            panel: <LdapSettingsSearching form={form} />,\n          },\n          {\n            title: t(\"synchronizationSettings\"),\n            panel: <LdapSettingsSynchronization form={form} />,\n          },\n          {\n            title: t(\"kerberosIntegration\"),\n            panel: <LdapSettingsKerberosIntegration form={form} />,\n            isHidden: !isFeatureEnabled(Feature.Kerberos),\n          },\n          { title: t(\"cacheSettings\"), panel: <SettingsCache form={form} /> },\n          {\n            title: t(\"advancedSettings\"),\n            panel: <LdapSettingsAdvanced form={form} id={id} />,\n          },\n        ]}\n      />\n      <Form onSubmit={form.handleSubmit(onSubmit)}>\n        <FixedButtonsGroup\n          name=\"ldap\"\n          isDisabled={!form.formState.isDirty}\n          isSubmit\n        >\n          <Button\n            variant=\"link\"\n            onClick={() => navigate(toUserFederation({ realm }))}\n            data-testid=\"ldap-cancel\"\n          >\n            {t(\"cancel\")}\n          </Button>\n        </FixedButtonsGroup>\n      </Form>\n    </>\n  );\n};\n\nexport function serializeFormData(\n  formData: LdapComponentRepresentation,\n): LdapComponentRepresentation {\n  const { config } = formData;\n\n  if (config?.periodicChangedUsersSync !== undefined) {\n    if (config.periodicChangedUsersSync === false) {\n      config.changedSyncPeriod = [\"-1\"];\n    }\n    delete config.periodicChangedUsersSync;\n  }\n\n  if (config?.periodicFullSync !== undefined) {\n    if (config.periodicFullSync === false) {\n      config.fullSyncPeriod = [\"-1\"];\n    }\n    delete config.periodicFullSync;\n  }\n\n  return formData;\n}\n"],"names":["testLdapProperties","convertFormToSettings","form","settings","key","value","get","LdapSettingsConnection","id","showSectionHeading","showSectionDescription","adminClient","useAdminClient","t","useTranslation","realm","useRealm","addAlert","addError","useAlerts","edit","testLdap","testType","AlertVariant","error","isBindTypeDropdownOpen","setIsBindTypeDropdownOpen","useState","ldapBindType","useWatch","jsxs","FormProvider","jsx","WizardSectionHeader","FormAccess","TextControl","FormGroup","HelpItem","Controller","field","Switch","_event","SelectControl","Button","KeycloakSelect","SelectVariant","SelectOption","isEqual","Fragment","PasswordControl","PASSWORD_MODIFY_OID","LdapSettingsAdvanced","ldapOids","passwordModifyOid","LdapSettingsGeneral","vendorEdit","realmRepresentation","useEffect","isVendorDropdownOpen","setIsVendorDropdownOpen","setVendorDefaultValues","LdapSettingsKerberosIntegration","allowKerberosAuth","LdapSettingsSearching","LdapSettingsSynchronization","watchPeriodicSync","watchChangedSync","UserFederationLdapForm","onSubmit","useFormContext","navigate","useNavigate","isFeatureEnabled","useIsFeatureEnabled","ScrollForm","Feature","SettingsCache","Form","FixedButtonsGroup","toUserFederation","serializeFormData","formData","config"],"mappings":"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"}