{"version":3,"file":"EventsSection-adj_uOe1.js","sources":["../../../../../../../src/events/ResourceLinks.tsx","../../../../../../../src/events/AdminEvents.tsx","../../../../../../../src/events/EventsSection.tsx"],"sourcesContent":["import { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Tooltip } from \"@patternfly/react-core\";\n\nimport type AdminEventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/adminEventRepresentation\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toClient } from \"../clients/routes/Client\";\nimport { toGroups } from \"../groups/routes/Groups\";\nimport { toClientScope } from \"../client-scopes/routes/ClientScope\";\nimport { toUser } from \"../user/routes/User\";\nimport { toRealmRole } from \"../realm-roles/routes/RealmRole\";\nimport { toFlow } from \"../authentication/routes/Flow\";\nimport { toEditOrganization } from \"../organizations/routes/EditOrganization\";\n\ntype ResourceLinkProps = {\n  event: AdminEventRepresentation;\n};\n\nconst MAX_TEXT_LENGTH = 38;\nconst Truncate = ({\n  text,\n  children,\n}: {\n  text?: string;\n  children: (text: string) => ReactElement;\n}) => {\n  const definedText = text || \"\";\n  const needsTruncation = definedText.length > MAX_TEXT_LENGTH;\n  const truncatedText = definedText.substring(0, MAX_TEXT_LENGTH);\n  return needsTruncation ? (\n    <Tooltip content={text}>{children(truncatedText + \"â€¦\")}</Tooltip>\n  ) : (\n    children(definedText)\n  );\n};\n\nconst isLinkable = (event: AdminEventRepresentation) => {\n  if (event.operationType === \"DELETE\") {\n    return false;\n  }\n  return (\n    event.resourceType === \"USER\" ||\n    event.resourceType === \"GROUP_MEMBERSHIP\" ||\n    event.resourceType === \"GROUP\" ||\n    event.resourceType === \"CLIENT\" ||\n    event.resourceType === \"ORGANIZATION\" ||\n    event.resourceType === \"ORGANIZATION_MEMBERSHIP\" ||\n    event.resourceType?.startsWith(\"AUTHORIZATION_RESOURCE\") ||\n    event.resourceType === \"CLIENT_SCOPE\" ||\n    event.resourceType === \"AUTH_FLOW\" ||\n    event.resourcePath?.startsWith(\"roles-by-id\")\n  );\n};\n\nconst idRegex = new RegExp(\n  /([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})/,\n);\n\nconst createLink = (realm: string, event: AdminEventRepresentation) => {\n  const part = idRegex.exec(event.resourcePath!);\n  if (!part) {\n    console.warn(\"event didn't contain a valid link\", event);\n    return \"\";\n  }\n  const id = part[1];\n\n  if (\n    event.resourceType === \"CLIENT\" ||\n    event.resourceType?.startsWith(\"AUTHORIZATION_RESOURCE\")\n  ) {\n    return toClient({\n      realm,\n      clientId: id,\n      tab: event.resourceType === \"CLIENT\" ? \"settings\" : \"authorization\",\n    });\n  }\n\n  if (event.resourceType === \"GROUP\") {\n    return toGroups({ realm, id });\n  }\n\n  if (event.resourceType === \"CLIENT_SCOPE\") {\n    return toClientScope({ realm, id, tab: \"settings\" });\n  }\n\n  if (\n    event.resourceType === \"USER\" ||\n    event.resourceType === \"GROUP_MEMBERSHIP\"\n  ) {\n    return toUser({ realm, id, tab: \"settings\" });\n  }\n\n  if (event.resourceType === \"AUTH_FLOW\") {\n    return toFlow({ realm, id, usedBy: \"-\" });\n  }\n\n  if (event.resourcePath?.startsWith(\"roles-by-id\")) {\n    return toRealmRole({ realm, id, tab: \"details\" });\n  }\n\n  if (event.resourceType === \"ORGANIZATION\") {\n    return toEditOrganization({ realm, id, tab: \"settings\" });\n  }\n\n  if (event.resourceType === \"ORGANIZATION_MEMBERSHIP\") {\n    return toEditOrganization({ realm, id, tab: \"members\" });\n  }\n\n  return \"\";\n};\n\nexport const ResourceLink = ({ event }: ResourceLinkProps) => {\n  const { realm } = useRealm();\n  return (\n    <Truncate text={event.resourcePath}>\n      {(text) =>\n        isLinkable(event) ? (\n          <Link to={createLink(realm, event)}>{text}</Link>\n        ) : (\n          <span>{text}</span>\n        )\n      }\n    </Truncate>\n  );\n};\n\nexport const CellResourceLinkRenderer = (\n  adminEvent: AdminEventRepresentation,\n) => <ResourceLink event={adminEvent} />;\n","import type AdminEventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/adminEventRepresentation\";\nimport {\n  KeycloakSelect,\n  SelectVariant,\n  TextControl,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport {\n  ActionGroup,\n  Button,\n  Chip,\n  ChipGroup,\n  DatePicker,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport {\n  Table,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  cellWidth,\n} from \"@patternfly/react-table\";\nimport { pickBy } from \"lodash-es\";\nimport { PropsWithChildren, useMemo, useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport DropdownPanel from \"../components/dropdown-panel/DropdownPanel\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { Action, KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { prettyPrintJSON } from \"../util\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../utils/useFormatDate\";\nimport { CellResourceLinkRenderer } from \"./ResourceLinks\";\n\nimport \"./events.css\";\n\ntype DisplayDialogProps = {\n  titleKey: string;\n  onClose: () => void;\n};\n\ntype AdminEventSearchForm = {\n  resourceTypes: string[];\n  operationTypes: string[];\n  resourcePath: string;\n  dateFrom: string;\n  dateTo: string;\n  authClient: string;\n  authUser: string;\n  authRealm: string;\n  authIpAddress: string;\n};\n\nconst defaultValues: AdminEventSearchForm = {\n  resourceTypes: [],\n  operationTypes: [],\n  resourcePath: \"\",\n  dateFrom: \"\",\n  dateTo: \"\",\n  authClient: \"\",\n  authUser: \"\",\n  authRealm: \"\",\n  authIpAddress: \"\",\n};\n\nconst DisplayDialog = ({\n  titleKey,\n  onClose,\n  children,\n}: PropsWithChildren<DisplayDialogProps>) => {\n  const { t } = useTranslation();\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(titleKey)}\n      isOpen={true}\n      onClose={onClose}\n    >\n      {children}\n    </Modal>\n  );\n};\n\nconst DetailCell = (event: AdminEventRepresentation) => (\n  <DescriptionList isHorizontal className=\"keycloak_eventsection_details\">\n    {event.details &&\n      Object.entries(event.details).map(([key, value]) => (\n        <DescriptionListGroup key={key}>\n          <DescriptionListTerm>{key}</DescriptionListTerm>\n          <DescriptionListDescription>{value}</DescriptionListDescription>\n        </DescriptionListGroup>\n      ))}\n    {event.error && (\n      <DescriptionListGroup key=\"error\">\n        <DescriptionListTerm>error</DescriptionListTerm>\n        <DescriptionListDescription>{event.error}</DescriptionListDescription>\n      </DescriptionListGroup>\n    )}\n  </DescriptionList>\n);\n\nexport const AdminEvents = () => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const serverInfo = useServerInfo();\n  const formatDate = useFormatDate();\n  const resourceTypes = serverInfo.enums?.[\"resourceType\"];\n  const operationTypes = serverInfo.enums?.[\"operationType\"];\n\n  const [key, setKey] = useState(0);\n  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);\n  const [selectResourceTypesOpen, setSelectResourceTypesOpen] = useState(false);\n  const [selectOperationTypesOpen, setSelectOperationTypesOpen] =\n    useState(false);\n  const [activeFilters, setActiveFilters] = useState<\n    Partial<AdminEventSearchForm>\n  >({});\n\n  const [authEvent, setAuthEvent] = useState<AdminEventRepresentation>();\n  const [representationEvent, setRepresentationEvent] =\n    useState<AdminEventRepresentation>();\n\n  const filterLabels: Record<keyof AdminEventSearchForm, string> = {\n    resourceTypes: t(\"resourceTypes\"),\n    operationTypes: t(\"operationTypes\"),\n    resourcePath: t(\"resourcePath\"),\n    dateFrom: t(\"dateFrom\"),\n    dateTo: t(\"dateTo\"),\n    authClient: t(\"client\"),\n    authUser: t(\"userId\"),\n    authRealm: t(\"realm\"),\n    authIpAddress: t(\"ipAddress\"),\n  };\n\n  const form = useForm<AdminEventSearchForm>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n  const {\n    getValues,\n    reset,\n    formState: { isDirty },\n    control,\n  } = form;\n\n  function loader(first?: number, max?: number) {\n    return adminClient.realms.findAdminEvents({\n      // The admin client wants 'dateFrom' and 'dateTo' to be Date objects, however it cannot actually handle them so we need to cast to any.\n      ...(activeFilters as any),\n      realm,\n      first,\n      max,\n    });\n  }\n\n  function submitSearch() {\n    setSearchDropdownOpen(false);\n    commitFilters();\n  }\n\n  function resetSearch() {\n    reset();\n    commitFilters();\n  }\n\n  function removeFilter(key: keyof AdminEventSearchForm) {\n    const formValues: AdminEventSearchForm = { ...getValues() };\n    delete formValues[key];\n\n    reset({ ...defaultValues, ...formValues });\n    commitFilters();\n  }\n\n  function removeFilterValue(\n    key: keyof AdminEventSearchForm,\n    valueToRemove: string,\n  ) {\n    const formValues = getValues();\n    const fieldValue = formValues[key];\n    const newFieldValue = Array.isArray(fieldValue)\n      ? fieldValue.filter((val) => val !== valueToRemove)\n      : fieldValue;\n\n    reset({ ...formValues, [key]: newFieldValue });\n    commitFilters();\n  }\n\n  function commitFilters() {\n    const newFilters: Partial<AdminEventSearchForm> = pickBy(\n      getValues(),\n      (value) => value !== \"\" || (Array.isArray(value) && value.length > 0),\n    );\n\n    setActiveFilters(newFilters);\n    setKey(key + 1);\n  }\n\n  const code = useMemo(\n    () =>\n      representationEvent?.representation\n        ? prettyPrintJSON(JSON.parse(representationEvent.representation))\n        : \"\",\n    [representationEvent?.representation],\n  );\n\n  return (\n    <>\n      {authEvent && (\n        <DisplayDialog titleKey=\"auth\" onClose={() => setAuthEvent(undefined)}>\n          <Table\n            aria-label=\"authData\"\n            data-testid=\"auth-dialog\"\n            variant={TableVariant.compact}\n          >\n            <Thead>\n              <Tr>\n                <Th>{t(\"attribute\")}</Th>\n                <Th>{t(\"value\")}</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              <Tr>\n                <Td>{t(\"realm\")}</Td>\n                <Td>{authEvent.authDetails?.realmId}</Td>\n              </Tr>\n              <Tr>\n                <Td>{t(\"client\")}</Td>\n                <Td>{authEvent.authDetails?.clientId}</Td>\n              </Tr>\n              <Tr>\n                <Td>{t(\"user\")}</Td>\n                <Td>{authEvent.authDetails?.userId}</Td>\n              </Tr>\n              <Tr>\n                <Td>{t(\"ipAddress\")}</Td>\n                <Td>{authEvent.authDetails?.ipAddress}</Td>\n              </Tr>\n            </Tbody>\n          </Table>\n        </DisplayDialog>\n      )}\n      {representationEvent && (\n        <DisplayDialog\n          titleKey=\"representation\"\n          data-testid=\"representation-dialog\"\n          onClose={() => setRepresentationEvent(undefined)}\n        >\n          <CodeEditor\n            isLineNumbersVisible\n            isReadOnly\n            code={code}\n            language={Language.json}\n            height=\"8rem\"\n          />\n        </DisplayDialog>\n      )}\n      <KeycloakDataTable\n        className=\"keycloak__events_table\"\n        key={key}\n        loader={loader}\n        detailColumns={[\n          {\n            name: \"details\",\n            enabled: (event) => event.details !== undefined,\n            cellRenderer: DetailCell,\n          },\n        ]}\n        isPaginated\n        ariaLabelKey=\"adminEvents\"\n        toolbarItem={\n          <FormProvider {...form}>\n            <Flex\n              direction={{ default: \"column\" }}\n              spaceItems={{ default: \"spaceItemsNone\" }}\n            >\n              <FlexItem>\n                <DropdownPanel\n                  buttonText={t(\"searchForAdminEvent\")}\n                  setSearchDropdownOpen={setSearchDropdownOpen}\n                  searchDropdownOpen={searchDropdownOpen}\n                  marginRight=\"2.5rem\"\n                  width=\"15vw\"\n                >\n                  <Form\n                    isHorizontal\n                    className=\"keycloak__events_search__form\"\n                    data-testid=\"searchForm\"\n                  >\n                    <FormGroup\n                      label={t(\"resourceTypes\")}\n                      fieldId=\"kc-resourceTypes\"\n                      className=\"keycloak__events_search__form_label\"\n                    >\n                      <Controller\n                        name=\"resourceTypes\"\n                        control={control}\n                        render={({ field }) => (\n                          <KeycloakSelect\n                            className=\"keycloak__events_search__type_select\"\n                            data-testid=\"resource-types-searchField\"\n                            chipGroupProps={{\n                              numChips: 1,\n                              expandedText: t(\"hide\"),\n                              collapsedText: t(\"showRemaining\"),\n                            }}\n                            variant={SelectVariant.typeaheadMulti}\n                            typeAheadAriaLabel=\"Select\"\n                            onToggle={(isOpen) =>\n                              setSelectResourceTypesOpen(isOpen)\n                            }\n                            selections={field.value}\n                            onSelect={(selectedValue) => {\n                              const option = selectedValue.toString();\n                              const changedValue = field.value.includes(option)\n                                ? field.value.filter((item) => item !== option)\n                                : [...field.value, option];\n\n                              field.onChange(changedValue);\n                            }}\n                            onClear={() => {\n                              field.onChange([]);\n                            }}\n                            isOpen={selectResourceTypesOpen}\n                            aria-labelledby={\"resourceTypes\"}\n                            chipGroupComponent={\n                              <ChipGroup>\n                                {field.value.map((chip) => (\n                                  <Chip\n                                    key={chip}\n                                    onClick={(resource) => {\n                                      resource.stopPropagation();\n                                      field.onChange(\n                                        field.value.filter(\n                                          (val) => val !== chip,\n                                        ),\n                                      );\n                                    }}\n                                  >\n                                    {chip}\n                                  </Chip>\n                                ))}\n                              </ChipGroup>\n                            }\n                          >\n                            {resourceTypes?.map((option) => (\n                              <SelectOption key={option} value={option}>\n                                {option}\n                              </SelectOption>\n                            ))}\n                          </KeycloakSelect>\n                        )}\n                      />\n                    </FormGroup>\n                    <FormGroup\n                      label={t(\"operationTypes\")}\n                      fieldId=\"kc-operationTypes\"\n                      className=\"keycloak__events_search__form_label\"\n                    >\n                      <Controller\n                        name=\"operationTypes\"\n                        control={control}\n                        render={({ field }) => (\n                          <KeycloakSelect\n                            className=\"keycloak__events_search__type_select\"\n                            data-testid=\"operation-types-searchField\"\n                            chipGroupProps={{\n                              numChips: 1,\n                              expandedText: t(\"hide\"),\n                              collapsedText: t(\"showRemaining\"),\n                            }}\n                            variant={SelectVariant.typeaheadMulti}\n                            typeAheadAriaLabel=\"Select\"\n                            onToggle={(isOpen) =>\n                              setSelectOperationTypesOpen(isOpen)\n                            }\n                            selections={field.value}\n                            onSelect={(selectedValue) => {\n                              const option = selectedValue.toString();\n                              const changedValue = field.value.includes(option)\n                                ? field.value.filter((item) => item !== option)\n                                : [...field.value, option];\n\n                              field.onChange(changedValue);\n                            }}\n                            onClear={() => {\n                              field.onChange([]);\n                            }}\n                            isOpen={selectOperationTypesOpen}\n                            aria-labelledby={\"operationTypes\"}\n                            chipGroupComponent={\n                              <ChipGroup>\n                                {field.value.map((chip) => (\n                                  <Chip\n                                    key={chip}\n                                    onClick={(operation) => {\n                                      operation.stopPropagation();\n                                      field.onChange(\n                                        field.value.filter(\n                                          (val) => val !== chip,\n                                        ),\n                                      );\n                                    }}\n                                  >\n                                    {chip}\n                                  </Chip>\n                                ))}\n                              </ChipGroup>\n                            }\n                          >\n                            {operationTypes?.map((option) => (\n                              <SelectOption\n                                key={option.toString()}\n                                value={option}\n                              >\n                                {option}\n                              </SelectOption>\n                            ))}\n                          </KeycloakSelect>\n                        )}\n                      />\n                    </FormGroup>\n                    <TextControl\n                      name=\"resourcePath\"\n                      label={t(\"resourcePath\")}\n                    />\n                    <TextControl name=\"authRealm\" label={t(\"realm\")} />\n                    <TextControl name=\"authClient\" label={t(\"client\")} />\n                    <TextControl name=\"authUser\" label={t(\"user\")} />\n                    <TextControl name=\"authIpAddress\" label={t(\"ipAddress\")} />\n                    <FormGroup\n                      label={t(\"dateFrom\")}\n                      fieldId=\"kc-dateFrom\"\n                      className=\"keycloak__events_search__form_label\"\n                    >\n                      <Controller\n                        name=\"dateFrom\"\n                        control={control}\n                        render={({ field }) => (\n                          <DatePicker\n                            className=\"pf-v5-u-w-100\"\n                            value={field.value}\n                            onChange={(_, value) => field.onChange(value)}\n                            inputProps={{ id: \"kc-dateFrom\" }}\n                          />\n                        )}\n                      />\n                    </FormGroup>\n                    <FormGroup\n                      label={t(\"dateTo\")}\n                      fieldId=\"kc-dateTo\"\n                      className=\"keycloak__events_search__form_label\"\n                    >\n                      <Controller\n                        name=\"dateTo\"\n                        control={control}\n                        render={({ field }) => (\n                          <DatePicker\n                            className=\"pf-v5-u-w-100\"\n                            value={field.value}\n                            onChange={(_, value) => field.onChange(value)}\n                            inputProps={{ id: \"kc-dateTo\" }}\n                          />\n                        )}\n                      />\n                    </FormGroup>\n                    <ActionGroup>\n                      <Button\n                        variant={\"primary\"}\n                        onClick={submitSearch}\n                        data-testid=\"search-events-btn\"\n                        isDisabled={!isDirty}\n                      >\n                        {t(\"searchAdminEventsBtn\")}\n                      </Button>\n                      <Button\n                        variant=\"secondary\"\n                        onClick={resetSearch}\n                        isDisabled={!isDirty}\n                      >\n                        {t(\"resetBtn\")}\n                      </Button>\n                    </ActionGroup>\n                  </Form>\n                </DropdownPanel>\n              </FlexItem>\n              <FlexItem>\n                {Object.entries(activeFilters).length > 0 && (\n                  <div className=\"keycloak__searchChips pf-v5-u-ml-md\">\n                    {Object.entries(activeFilters).map((filter) => {\n                      const [key, value] = filter as [\n                        keyof AdminEventSearchForm,\n                        string | string[],\n                      ];\n\n                      return (\n                        <ChipGroup\n                          className=\"pf-v5-u-mt-md pf-v5-u-mr-md\"\n                          key={key}\n                          categoryName={filterLabels[key]}\n                          isClosable\n                          onClick={() => removeFilter(key)}\n                        >\n                          {typeof value === \"string\" ? (\n                            <Chip isReadOnly>{value}</Chip>\n                          ) : (\n                            value.map((entry) => (\n                              <Chip\n                                key={entry}\n                                onClick={() => removeFilterValue(key, entry)}\n                              >\n                                {entry}\n                              </Chip>\n                            ))\n                          )}\n                        </ChipGroup>\n                      );\n                    })}\n                  </div>\n                )}\n              </FlexItem>\n            </Flex>\n          </FormProvider>\n        }\n        actions={\n          [\n            {\n              title: t(\"auth\"),\n              onRowClick: (event) => setAuthEvent(event),\n            },\n            {\n              title: t(\"representation\"),\n              onRowClick: (event) => setRepresentationEvent(event),\n            },\n          ] as Action<AdminEventRepresentation>[]\n        }\n        columns={[\n          {\n            name: \"time\",\n            displayKey: \"time\",\n            cellRenderer: (row) =>\n              formatDate(new Date(row.time!), FORMAT_DATE_AND_TIME),\n          },\n          {\n            name: \"resourcePath\",\n            displayKey: \"resourcePath\",\n            cellRenderer: CellResourceLinkRenderer,\n          },\n          {\n            name: \"resourceType\",\n            displayKey: \"resourceType\",\n          },\n          {\n            name: \"operationType\",\n            displayKey: \"operationType\",\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"\",\n            displayKey: \"user\",\n            cellRenderer: (event) => event.authDetails?.userId || \"\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyAdminEvents\")}\n            instructions={t(\"emptyAdminEventsInstructions\")}\n          />\n        }\n        isSearching={Object.keys(activeFilters).length > 0}\n      />\n    </>\n  );\n};\n","import type EventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/eventRepresentation\";\nimport type EventType from \"@keycloak/keycloak-admin-client/lib/defs/eventTypes\";\nimport type { RealmEventsConfigRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/realmEventsConfigRepresentation\";\nimport {\n  KeycloakDataTable,\n  KeycloakSelect,\n  ListEmptyState,\n  SelectVariant,\n  TextControl,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  Chip,\n  ChipGroup,\n  DatePicker,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Icon,\n  PageSection,\n  SelectOption,\n  Tab,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { CheckCircleIcon, WarningTriangleIcon } from \"@patternfly/react-icons\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { pickBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport DropdownPanel from \"../components/dropdown-panel/DropdownPanel\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport { toRealmSettings } from \"../realm-settings/routes/RealmSettings\";\nimport { toUser } from \"../user/routes/User\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../utils/useFormatDate\";\nimport { AdminEvents } from \"./AdminEvents\";\nimport { EventsTab, toEvents } from \"./routes/Events\";\n\nimport \"./events.css\";\n\ntype UserEventSearchForm = {\n  client: string;\n  dateFrom: string;\n  dateTo: string;\n  user: string;\n  type: EventType[];\n  ipAddress: string;\n};\n\nconst defaultValues: UserEventSearchForm = {\n  client: \"\",\n  dateFrom: \"\",\n  dateTo: \"\",\n  user: \"\",\n  type: [],\n  ipAddress: \"\",\n};\n\nconst StatusRow = (event: EventRepresentation) =>\n  !event.error ? (\n    <span>\n      <Icon status=\"success\">\n        <CheckCircleIcon />\n      </Icon>\n      {event.type}\n    </span>\n  ) : (\n    <Tooltip content={event.error}>\n      <span>\n        <Icon status=\"warning\">\n          <WarningTriangleIcon />\n        </Icon>\n        {event.type}\n      </span>\n    </Tooltip>\n  );\n\nconst DetailCell = (event: EventRepresentation) => (\n  <DescriptionList isHorizontal className=\"keycloak_eventsection_details\">\n    {event.details &&\n      Object.entries(event.details).map(([key, value]) => (\n        <DescriptionListGroup key={key}>\n          <DescriptionListTerm>{key}</DescriptionListTerm>\n          <DescriptionListDescription>{value}</DescriptionListDescription>\n        </DescriptionListGroup>\n      ))}\n    {event.error && (\n      <DescriptionListGroup key=\"error\">\n        <DescriptionListTerm>error</DescriptionListTerm>\n        <DescriptionListDescription>{event.error}</DescriptionListDescription>\n      </DescriptionListGroup>\n    )}\n  </DescriptionList>\n);\n\nconst UserDetailLink = (event: EventRepresentation) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  return (\n    <>\n      {event.userId && (\n        <Link\n          key={`link-${event.time}-${event.type}`}\n          to={toUser({\n            realm,\n            id: event.userId,\n            tab: \"settings\",\n          })}\n        >\n          {event.userId}\n        </Link>\n      )}\n      {!event.userId && t(\"noUserDetails\")}\n    </>\n  );\n};\n\nexport default function EventsSection() {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const formatDate = useFormatDate();\n  const [key, setKey] = useState(0);\n  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);\n  const [selectOpen, setSelectOpen] = useState(false);\n  const [events, setEvents] = useState<RealmEventsConfigRepresentation>();\n  const [activeFilters, setActiveFilters] = useState<\n    Partial<UserEventSearchForm>\n  >({});\n\n  const filterLabels: Record<keyof UserEventSearchForm, string> = {\n    client: t(\"client\"),\n    dateFrom: t(\"dateFrom\"),\n    dateTo: t(\"dateTo\"),\n    user: t(\"userId\"),\n    type: t(\"eventType\"),\n    ipAddress: t(\"ipAddress\"),\n  };\n\n  const form = useForm<UserEventSearchForm>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n\n  const {\n    getValues,\n    reset,\n    formState: { isDirty },\n    control,\n    handleSubmit,\n  } = form;\n\n  useFetch(\n    () => adminClient.realms.getConfigEvents({ realm }),\n    (events) => setEvents(events),\n    [],\n  );\n\n  function loader(first?: number, max?: number) {\n    return adminClient.realms.findEvents({\n      // The admin client wants 'dateFrom' and 'dateTo' to be Date objects, however it cannot actually handle them so we need to cast to any.\n      ...(activeFilters as any),\n      realm,\n      first,\n      max,\n    });\n  }\n\n  const useTab = (tab: EventsTab) => useRoutableTab(toEvents({ realm, tab }));\n\n  const userEventsTab = useTab(\"user-events\");\n  const adminEventsTab = useTab(\"admin-events\");\n\n  function onSubmit() {\n    setSearchDropdownOpen(false);\n    commitFilters();\n  }\n\n  function resetSearch() {\n    reset();\n    commitFilters();\n  }\n\n  function removeFilter(key: keyof UserEventSearchForm) {\n    const formValues: UserEventSearchForm = { ...getValues() };\n    delete formValues[key];\n\n    reset({ ...defaultValues, ...formValues });\n    commitFilters();\n  }\n\n  function removeFilterValue(\n    key: keyof UserEventSearchForm,\n    valueToRemove: EventType,\n  ) {\n    const formValues = getValues();\n    const fieldValue = formValues[key];\n    const newFieldValue = Array.isArray(fieldValue)\n      ? fieldValue.filter((val) => val !== valueToRemove)\n      : fieldValue;\n\n    reset({ ...formValues, [key]: newFieldValue });\n    commitFilters();\n  }\n\n  function commitFilters() {\n    const newFilters: Partial<UserEventSearchForm> = pickBy(\n      getValues(),\n      (value) => value !== \"\" || (Array.isArray(value) && value.length > 0),\n    );\n\n    setActiveFilters(newFilters);\n    setKey(key + 1);\n  }\n\n  const userEventSearchFormDisplay = () => {\n    return (\n      <FormProvider {...form}>\n        <Flex\n          direction={{ default: \"column\" }}\n          spaceItems={{ default: \"spaceItemsNone\" }}\n        >\n          <FlexItem>\n            <DropdownPanel\n              buttonText={t(\"searchForUserEvent\")}\n              setSearchDropdownOpen={setSearchDropdownOpen}\n              searchDropdownOpen={searchDropdownOpen}\n              marginRight=\"2.5rem\"\n              width=\"15vw\"\n            >\n              <Form\n                data-testid=\"searchForm\"\n                className=\"keycloak__events_search__form\"\n                onSubmit={handleSubmit(onSubmit)}\n                isHorizontal\n              >\n                <TextControl\n                  name=\"user\"\n                  label={t(\"userId\")}\n                  data-testid=\"userId-searchField\"\n                />\n                <FormGroup\n                  label={t(\"eventType\")}\n                  fieldId=\"kc-eventType\"\n                  className=\"keycloak__events_search__form_label\"\n                >\n                  <Controller\n                    name=\"type\"\n                    control={control}\n                    render={({ field }) => (\n                      <KeycloakSelect\n                        className=\"keycloak__events_search__type_select\"\n                        data-testid=\"event-type-searchField\"\n                        chipGroupProps={{\n                          numChips: 1,\n                          expandedText: t(\"hide\"),\n                          collapsedText: t(\"showRemaining\"),\n                        }}\n                        variant={SelectVariant.typeaheadMulti}\n                        typeAheadAriaLabel=\"Select\"\n                        onToggle={(isOpen) => setSelectOpen(isOpen)}\n                        selections={field.value}\n                        onSelect={(selectedValue) => {\n                          const option = selectedValue.toString() as EventType;\n                          const changedValue = field.value.includes(option)\n                            ? field.value.filter((item) => item !== option)\n                            : [...field.value, option];\n\n                          field.onChange(changedValue);\n                        }}\n                        onClear={() => {\n                          field.onChange([]);\n                        }}\n                        isOpen={selectOpen}\n                        aria-labelledby={\"eventType\"}\n                        chipGroupComponent={\n                          <ChipGroup>\n                            {field.value.map((chip) => (\n                              <Chip\n                                key={chip}\n                                onClick={(event) => {\n                                  event.stopPropagation();\n                                  field.onChange(\n                                    field.value.filter((val) => val !== chip),\n                                  );\n                                }}\n                              >\n                                {t(`eventTypes.${chip}.name`)}\n                              </Chip>\n                            ))}\n                          </ChipGroup>\n                        }\n                      >\n                        {events?.enabledEventTypes?.map((option) => (\n                          <SelectOption key={option} value={option}>\n                            {t(`eventTypes.${option}.name`)}\n                          </SelectOption>\n                        ))}\n                      </KeycloakSelect>\n                    )}\n                  />\n                </FormGroup>\n                <TextControl\n                  name=\"client\"\n                  label={t(\"client\")}\n                  data-testid=\"client-searchField\"\n                />\n                <FormGroup\n                  label={t(\"dateFrom\")}\n                  fieldId=\"kc-dateFrom\"\n                  className=\"keycloak__events_search__form_label\"\n                >\n                  <Controller\n                    name=\"dateFrom\"\n                    control={control}\n                    render={({ field }) => (\n                      <DatePicker\n                        className=\"pf-v5-u-w-100\"\n                        value={field.value}\n                        onChange={(_, value) => field.onChange(value)}\n                        inputProps={{ id: \"kc-dateFrom\" }}\n                      />\n                    )}\n                  />\n                </FormGroup>\n                <FormGroup\n                  label={t(\"dateTo\")}\n                  fieldId=\"kc-dateTo\"\n                  className=\"keycloak__events_search__form_label\"\n                >\n                  <Controller\n                    name=\"dateTo\"\n                    control={control}\n                    render={({ field }) => (\n                      <DatePicker\n                        className=\"pf-v5-u-w-100\"\n                        value={field.value}\n                        onChange={(_, value) => field.onChange(value)}\n                        inputProps={{ id: \"kc-dateTo\" }}\n                      />\n                    )}\n                  />\n                </FormGroup>\n                <TextControl\n                  name=\"ipAddress\"\n                  label={t(\"ipAddress\")}\n                  data-testid=\"ipAddress-searchField\"\n                />\n                <ActionGroup>\n                  <Button\n                    data-testid=\"search-events-btn\"\n                    variant=\"primary\"\n                    type=\"submit\"\n                    isDisabled={!isDirty}\n                  >\n                    {t(\"searchUserEventsBtn\")}\n                  </Button>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={resetSearch}\n                    isDisabled={!isDirty}\n                  >\n                    {t(\"resetBtn\")}\n                  </Button>\n                </ActionGroup>\n              </Form>\n            </DropdownPanel>\n          </FlexItem>\n          <FlexItem>\n            {Object.entries(activeFilters).length > 0 && (\n              <div className=\"keycloak__searchChips pf-v5-u-ml-md\">\n                {Object.entries(activeFilters).map((filter) => {\n                  const [key, value] = filter as [\n                    keyof UserEventSearchForm,\n                    string | EventType[],\n                  ];\n\n                  return (\n                    <ChipGroup\n                      className=\"pf-v5-u-mt-md pf-v5-u-mr-md\"\n                      key={key}\n                      categoryName={filterLabels[key]}\n                      isClosable\n                      onClick={() => removeFilter(key)}\n                    >\n                      {typeof value === \"string\" ? (\n                        <Chip isReadOnly>{value}</Chip>\n                      ) : (\n                        value.map((entry) => (\n                          <Chip\n                            key={entry}\n                            onClick={() => removeFilterValue(key, entry)}\n                          >\n                            {t(`eventTypes.${entry}.name`)}\n                          </Chip>\n                        ))\n                      )}\n                    </ChipGroup>\n                  );\n                })}\n              </div>\n            )}\n          </FlexItem>\n        </Flex>\n      </FormProvider>\n    );\n  };\n\n  return (\n    <>\n      <ViewHeader\n        titleKey=\"titleEvents\"\n        subKey={\n          <Trans i18nKey=\"eventExplain\">\n            If you want to configure user events, Admin events or Event\n            listeners, please enter\n            <Link to={toRealmSettings({ realm, tab: \"events\" })}>\n              {t(\"eventConfig\")}\n            </Link>\n            page realm settings to configure.\n          </Trans>\n        }\n        helpUrl={helpUrls.eventsUrl}\n        divider={false}\n      />\n      <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n        <RoutableTabs\n          isBox\n          defaultLocation={toEvents({ realm, tab: \"user-events\" })}\n        >\n          <Tab\n            title={<TabTitleText>{t(\"userEvents\")}</TabTitleText>}\n            {...userEventsTab}\n          >\n            <div className=\"keycloak__events_table\">\n              <KeycloakDataTable\n                key={key}\n                loader={loader}\n                detailColumns={[\n                  {\n                    name: \"details\",\n                    enabled: (event) => event.details !== undefined,\n                    cellRenderer: DetailCell,\n                  },\n                ]}\n                isPaginated\n                ariaLabelKey=\"titleEvents\"\n                toolbarItem={userEventSearchFormDisplay()}\n                columns={[\n                  {\n                    name: \"time\",\n                    displayKey: \"time\",\n                    cellRenderer: (row) =>\n                      formatDate(new Date(row.time!), FORMAT_DATE_AND_TIME),\n                  },\n                  {\n                    name: \"userId\",\n                    displayKey: \"user\",\n                    cellRenderer: UserDetailLink,\n                  },\n                  {\n                    name: \"type\",\n                    displayKey: \"eventType\",\n                    cellRenderer: StatusRow,\n                  },\n                  {\n                    name: \"ipAddress\",\n                    displayKey: \"ipAddress\",\n                    transforms: [cellWidth(10)],\n                  },\n                  {\n                    name: \"clientId\",\n                    displayKey: \"client\",\n                  },\n                ]}\n                emptyState={\n                  <ListEmptyState\n                    message={t(\"emptyUserEvents\")}\n                    instructions={t(\"emptyUserEventsInstructions\")}\n                  />\n                }\n                isSearching={Object.keys(activeFilters).length > 0}\n              />\n            </div>\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"adminEvents\")}</TabTitleText>}\n            data-testid=\"admin-events-tab\"\n            {...adminEventsTab}\n          >\n            <AdminEvents />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["MAX_TEXT_LENGTH","Truncate","text","children","definedText","needsTruncation","truncatedText","jsx","Tooltip","isLinkable","event","idRegex","createLink","realm","part","id","toClient","toGroups","toClientScope","toUser","toFlow","toRealmRole","toEditOrganization","ResourceLink","useRealm","Link","CellResourceLinkRenderer","adminEvent","defaultValues","DisplayDialog","titleKey","onClose","t","useTranslation","Modal","ModalVariant","DetailCell","jsxs","DescriptionList","key","value","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","AdminEvents","adminClient","useAdminClient","serverInfo","useServerInfo","formatDate","useFormatDate","resourceTypes","operationTypes","setKey","useState","searchDropdownOpen","setSearchDropdownOpen","selectResourceTypesOpen","setSelectResourceTypesOpen","selectOperationTypesOpen","setSelectOperationTypesOpen","activeFilters","setActiveFilters","authEvent","setAuthEvent","representationEvent","setRepresentationEvent","filterLabels","form","useForm","getValues","reset","isDirty","control","loader","first","max","submitSearch","commitFilters","resetSearch","removeFilter","formValues","removeFilterValue","valueToRemove","fieldValue","newFieldValue","val","newFilters","pickBy","code","useMemo","prettyPrintJSON","Fragment","Table","TableVariant","Thead","Tr","Th","Tbody","Td","CodeEditor","Language","KeycloakDataTable","FormProvider","Flex","FlexItem","DropdownPanel","Form","FormGroup","Controller","field","KeycloakSelect","SelectVariant","isOpen","selectedValue","option","changedValue","item","ChipGroup","chip","Chip","resource","SelectOption","operation","TextControl","DatePicker","_","ActionGroup","Button","filter","entry","row","FORMAT_DATE_AND_TIME","cellWidth","ListEmptyState","StatusRow","Icon","WarningTriangleIcon","CheckCircleIcon","UserDetailLink","EventsSection","selectOpen","setSelectOpen","events","setEvents","handleSubmit","useFetch","useTab","tab","useRoutableTab","toEvents","userEventsTab","adminEventsTab","onSubmit","userEventSearchFormDisplay","ViewHeader","Trans","toRealmSettings","helpUrls","PageSection","RoutableTabs","Tab","TabTitleText"],"mappings":"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"}