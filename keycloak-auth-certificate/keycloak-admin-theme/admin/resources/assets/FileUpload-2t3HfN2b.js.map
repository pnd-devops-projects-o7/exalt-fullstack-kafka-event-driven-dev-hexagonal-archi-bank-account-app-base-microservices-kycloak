{"version":3,"file":"FileUpload-2t3HfN2b.js","sources":["../../../../../../../src/components/json-file-upload/patternfly/fileUtils.ts","../../../../../../../src/components/json-file-upload/patternfly/FileUploadField.tsx","../../../../../../../src/components/json-file-upload/patternfly/FileUpload.tsx"],"sourcesContent":["export enum fileReaderType {\n  text = \"text\",\n  dataURL = \"dataURL\",\n}\n\n/**\n * Read a file using the FileReader API, either as a plain text string or as a DataURL string.\n * Returns a promise which will resolve with the file contents as a string or reject with a DOMException.\n *\n * @param {File} fileHandle - File object to read\n * @param {fileReaderType} type - How to read it\n */\nexport function readFile(fileHandle: File, type: fileReaderType) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = () => reject(reader.error);\n\n    switch (type) {\n      case fileReaderType.text:\n        reader.readAsText(fileHandle);\n        break;\n      case fileReaderType.dataURL:\n        reader.readAsDataURL(fileHandle);\n        break;\n      default:\n        reject(\"unknown type\");\n    }\n  });\n}\n","import {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  Spinner,\n  spinnerSize,\n  TextArea,\n  TextAreResizeOrientation,\n  TextInput,\n  InputGroupItem,\n} from \"@patternfly/react-core\";\nimport { css } from \"@patternfly/react-styles\";\nimport styles from \"@patternfly/react-styles/css/components/FileUpload/file-upload\";\nimport { PropsWithChildren } from \"react\";\n\nimport { fileReaderType } from \"./fileUtils\";\n\nexport interface FileUploadFieldProps\n  extends Omit<React.HTMLProps<HTMLDivElement>, \"value\" | \"onChange\"> {\n  /** Unique id for the TextArea, also used to generate ids for accessible labels */\n  id: string;\n  /** What type of file. Determines what is is expected by `value`\n   * (a string for 'text' and 'dataURL', or a File object otherwise). */\n  type?: \"text\" | \"dataURL\";\n  /** Value of the file's contents\n   * (string if text file, File object otherwise) */\n  value?: string | File;\n  /** Value to be shown in the read-only filename field. */\n  filename?: string;\n  /** A callback for when the TextArea value changes. */\n  onChange?: (\n    value: string,\n    filename: string,\n    event:\n      | React.ChangeEvent<HTMLTextAreaElement> // User typed in the TextArea\n      | React.MouseEvent<HTMLButtonElement, MouseEvent>, // User clicked Clear button\n  ) => void;\n  /** Additional classes added to the FileUploadField container element. */\n  className?: string;\n  /** Flag to show if the field is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the field is read only. */\n  isReadOnly?: boolean;\n  /** Flag to show if a file is being loaded. */\n  isLoading?: boolean;\n  /** Aria-valuetext for the loading spinner */\n  spinnerAriaValueText?: string;\n  /** Flag to show if the field is required. */\n  isRequired?: boolean;\n  /** Value to indicate if the field is modified to show that validation state.\n   * If set to success, field will be modified to indicate valid state.\n   * If set to error,  field will be modified to indicate error state.\n   */\n  validated?: \"success\" | \"error\" | \"default\";\n  /** Aria-label for the TextArea. */\n  \"aria-label\"?: string;\n  /** Placeholder string to display in the empty filename field */\n  filenamePlaceholder?: string;\n  /** Aria-label for the read-only filename field */\n  filenameAriaLabel?: string;\n  /** Text for the Browse button */\n  browseButtonText?: string;\n  /** Text for the Clear button */\n  clearButtonText?: string;\n  /** Flag to disable the Clear button */\n  isClearButtonDisabled?: boolean;\n  /** Flag to hide the built-in preview of the file (where available).\n   * If true, you can use children to render an alternate preview. */\n  hideDefaultPreview?: boolean;\n  /** Flag to allow editing of a text file's contents after it is selected from disk */\n  allowEditingUploadedText?: boolean;\n  /** Additional children to render after (or instead of) the file preview. */\n  children?: React.ReactNode;\n\n  // Props available in FileUploadField but not FileUpload:\n\n  /** A callback for when the Browse button is clicked. */\n  onBrowseButtonClick?: (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => void;\n  /** A callback for when the Clear button is clicked. */\n  onClearButtonClick?: (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => void;\n  /** A callback from when the text area is clicked. Can also be set via the onClick property of FileUpload. */\n  onTextAreaClick?: (\n    event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>,\n  ) => void;\n  /** Flag to show if a file is being dragged over the field */\n  isDragActive?: boolean;\n  /** A reference object to attach to the FileUploadField container element. */\n  containerRef?: React.Ref<HTMLDivElement>;\n  /** Text area text changed */\n  onTextChange?: (text: string) => void;\n}\n\nexport const FileUploadField = ({\n  id,\n  type,\n  value = \"\",\n  filename = \"\",\n  onChange,\n  onBrowseButtonClick,\n  onClearButtonClick,\n  onTextAreaClick,\n  onTextChange,\n  className = \"\",\n  isDisabled = false,\n  isReadOnly = false,\n  isLoading = false,\n  spinnerAriaValueText,\n  isRequired = false,\n  isDragActive = false,\n  validated = \"default\" as \"success\" | \"error\" | \"default\",\n  \"aria-label\": ariaLabel = \"File upload\",\n  filenamePlaceholder = \"Drag a file here or browse to upload\",\n  filenameAriaLabel = filename ? \"Read only filename\" : filenamePlaceholder,\n  browseButtonText = \"Browse...\",\n  clearButtonText = \"Clear\",\n  isClearButtonDisabled = !filename && !value,\n  containerRef = null as React.Ref<HTMLDivElement>,\n  allowEditingUploadedText = false,\n  hideDefaultPreview = false,\n  children = null,\n\n  ...props\n}: PropsWithChildren<FileUploadFieldProps>) => {\n  const onTextAreaChange = (\n    newValue: string,\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    onChange?.(newValue, filename, event);\n    onTextChange?.(newValue);\n  };\n  return (\n    <div\n      className={css(\n        styles.fileUpload,\n        isDragActive && styles.modifiers.dragHover,\n        isLoading && styles.modifiers.loading,\n        className,\n      )}\n      ref={containerRef}\n      {...props}\n    >\n      <div className={styles.fileUploadFileSelect}>\n        <InputGroup>\n          <InputGroupItem isFill>\n            <TextInput\n              // Always read-only regardless of isReadOnly prop (which is just for the TextArea)\n              isDisabled={isDisabled}\n              id={`${id}-filename`}\n              name={`${id}-filename`}\n              aria-label={filenameAriaLabel}\n              placeholder={filenamePlaceholder}\n              aria-describedby={`${id}-browse-button`}\n              value={filename}\n              readOnlyVariant=\"default\"\n            />\n          </InputGroupItem>\n          <InputGroupItem>\n            <Button\n              id={`${id}-browse-button`}\n              variant={ButtonVariant.control}\n              onClick={onBrowseButtonClick}\n              isDisabled={isDisabled}\n            >\n              {browseButtonText}\n            </Button>\n          </InputGroupItem>\n          <InputGroupItem>\n            <Button\n              variant={ButtonVariant.control}\n              isDisabled={isDisabled || isClearButtonDisabled}\n              onClick={onClearButtonClick}\n            >\n              {clearButtonText}\n            </Button>\n          </InputGroupItem>\n        </InputGroup>\n      </div>\n      <div className={styles.fileUploadFileDetails}>\n        {!hideDefaultPreview && type === fileReaderType.text && (\n          <TextArea\n            readOnly={isReadOnly || (!!filename && !allowEditingUploadedText)}\n            disabled={isDisabled}\n            isRequired={isRequired}\n            resizeOrientation={TextAreResizeOrientation.vertical}\n            validated={validated}\n            id={id}\n            name={id}\n            aria-label={ariaLabel}\n            value={value as string}\n            onChange={(event, newValue: string) =>\n              onTextAreaChange(newValue, event)\n            }\n            onClick={onTextAreaClick}\n          />\n        )}\n        {isLoading && (\n          <div className={styles.fileUploadFileDetailsSpinner}>\n            <Spinner\n              size={spinnerSize.lg}\n              aria-valuetext={spinnerAriaValueText}\n            />\n          </div>\n        )}\n      </div>\n      {children}\n    </div>\n  );\n};\nFileUploadField.displayName = \"FileUploadField\";\n","import { fromEvent } from \"file-selector\";\nimport { PropsWithChildren } from \"react\";\nimport {\n  DropEvent,\n  DropzoneInputProps,\n  DropzoneOptions,\n  FileRejection,\n  useDropzone,\n} from \"react-dropzone\";\n\nimport { FileUploadField, FileUploadFieldProps } from \"./FileUploadField\";\nimport { fileReaderType, readFile } from \"./fileUtils\";\n\nexport interface FileUploadProps\n  extends Omit<\n    FileUploadFieldProps,\n    | \"children\"\n    | \"onBrowseButtonClick\"\n    | \"onClearButtonClick\"\n    | \"isDragActive\"\n    | \"containerRef\"\n  > {\n  /** Unique id for the TextArea, also used to generate ids for accessible labels. */\n  id: string;\n  /** What type of file. Determines what is is passed to `onChange` and expected by `value`\n   * (a string for 'text' and 'dataURL', or a File object otherwise. */\n  type?: \"text\" | \"dataURL\";\n  /** Value of the file's contents\n   * (string if text file, File object otherwise) */\n  value?: string | File;\n  /** Value to be shown in the read-only filename field. */\n  filename?: string;\n  /** @deprecated A callback for when the file contents change. Please instead use onFileInputChange, onTextChange, onDataChange, onClearClick individually.  */\n  onChange?: (\n    value: string | File,\n    filename: string,\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent> // Clear button was clicked\n      | React.ChangeEvent<HTMLElement> // User typed in the TextArea\n      | DropEvent,\n  ) => void;\n  /** Change event emitted from the hidden \\<input type=\"file\" \\> field associated with the component  */\n  onFileInputChange?: (event: DropEvent, file: File) => void;\n  /** Callback for clicking on the FileUploadField text area. By default, prevents a click in the text area from opening file dialog. */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Additional classes added to the FileUpload container element. */\n  className?: string;\n  /** Flag to show if the field is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the field is read only. */\n  isReadOnly?: boolean;\n  /** Flag to show if a file is being loaded. */\n  isLoading?: boolean;\n  /** Aria-valuetext for the loading spinner */\n  spinnerAriaValueText?: string;\n  /** Flag to show if the field is required. */\n  isRequired?: boolean;\n  /** Value to indicate if the field is modified to show that validation state.\n   * If set to success, field will be modified to indicate valid state.\n   * If set to error,  field will be modified to indicate error state.\n   */\n  validated?: \"success\" | \"error\" | \"default\";\n  /** Aria-label for the TextArea. */\n  \"aria-label\"?: string;\n  /** Placeholder string to display in the empty filename field */\n  filenamePlaceholder?: string;\n  /** Aria-label for the read-only filename field */\n  filenameAriaLabel?: string;\n  /** Text for the Browse button */\n  browseButtonText?: string;\n  /** Text for the Clear button */\n  clearButtonText?: string;\n  /** Flag to hide the built-in preview of the file (where available).\n   * If true, you can use children to render an alternate preview. */\n  hideDefaultPreview?: boolean;\n  /** Flag to allow editing of a text file's contents after it is selected from disk */\n  allowEditingUploadedText?: boolean;\n  /** Additional children to render after (or instead of) the file preview. */\n  children?: React.ReactNode;\n\n  // Props available in FileUpload but not FileUploadField:\n\n  /** A callback for when a selected file starts loading */\n  onReadStarted?: (fileHandle: File) => void;\n  /** A callback for when a selected file finishes loading */\n  onReadFinished?: (fileHandle: File) => void;\n  /** A callback for when the FileReader API fails */\n  onReadFailed?: (error: DOMException, fileHandle: File) => void;\n  /** Optional extra props to customize react-dropzone. */\n  dropzoneProps?: DropzoneOptions;\n  /** Clear button was clicked */\n  onClearClick?: React.MouseEventHandler<HTMLButtonElement>;\n  /** Text area text changed */\n  onTextChange?: (text: string) => void;\n  /** On data changed - if type='text' or type='dataURL' and file was loaded it will call this method */\n  onDataChange?: (data: string) => void;\n}\n\nexport const FileUpload = ({\n  id,\n  type,\n  value = type === fileReaderType.text || type === fileReaderType.dataURL\n    ? \"\"\n    : undefined,\n  filename = \"\",\n  children = null,\n  // TODO: This should be removed as part of https://github.com/keycloak/keycloak/issues/32420\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  onChange,\n  onFileInputChange,\n  onReadStarted,\n  onReadFinished,\n  onReadFailed,\n  onClearClick,\n  onClick = (event) => event.preventDefault(),\n  onTextChange,\n  onDataChange,\n  dropzoneProps = {},\n  ...props\n}: PropsWithChildren<FileUploadProps>) => {\n  const onDropAccepted = (acceptedFiles: File[], event: DropEvent) => {\n    if (acceptedFiles.length > 0) {\n      const fileHandle = acceptedFiles[0];\n\n      if (event?.type === \"drop\") {\n        onFileInputChange?.(event, fileHandle);\n      }\n      if (type === fileReaderType.text || type === fileReaderType.dataURL) {\n        onChange?.(\"\", fileHandle.name, event); // Show the filename while reading\n        onReadStarted?.(fileHandle);\n        readFile(fileHandle, type as fileReaderType)\n          .then((data) => {\n            onReadFinished?.(fileHandle);\n            onChange?.(data as string, fileHandle.name, event);\n            onDataChange?.(data as string);\n          })\n          .catch((error: DOMException) => {\n            onReadFailed?.(error, fileHandle);\n            onReadFinished?.(fileHandle);\n            onChange?.(\"\", \"\", event); // Clear the filename field on a failure\n            onDataChange?.(\"\");\n          });\n      } else {\n        onChange?.(fileHandle, fileHandle.name, event);\n      }\n    }\n    dropzoneProps.onDropAccepted?.(acceptedFiles, event);\n  };\n\n  const onDropRejected = (rejectedFiles: FileRejection[], event: DropEvent) => {\n    if (rejectedFiles.length > 0) {\n      onChange?.(\"\", rejectedFiles[0].file.name, event);\n    }\n\n    dropzoneProps.onDropRejected?.(rejectedFiles, event);\n  };\n\n  const onClearButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    onChange?.(\"\", \"\", event);\n    onClearClick?.(event);\n    setFileValue(\"\");\n  };\n\n  const { getRootProps, getInputProps, isDragActive, open, inputRef } =\n    useDropzone({\n      multiple: false,\n      ...dropzoneProps,\n      onDropAccepted,\n      onDropRejected,\n    });\n\n  const setFileValue = (filename: string) => {\n    if (!inputRef.current) {\n      return;\n    }\n\n    inputRef.current.value = filename;\n  };\n\n  const oldInputProps = getInputProps();\n  const inputProps: DropzoneInputProps = {\n    ...oldInputProps,\n    onChange: async (e: React.ChangeEvent<HTMLInputElement>) => {\n      oldInputProps.onChange?.(e);\n      const files = await fromEvent(e.nativeEvent);\n      if (files.length === 1) {\n        onFileInputChange?.(e, files[0] as File);\n      }\n    },\n  };\n\n  return (\n    <FileUploadField\n      {...getRootProps({\n        ...props,\n        refKey: \"containerRef\",\n        onClick: (event) => event.preventDefault(),\n      })}\n      tabIndex={undefined} // Omit the unwanted tabIndex from react-dropzone's getRootProps\n      id={id}\n      type={type}\n      filename={filename}\n      value={value}\n      onChange={onChange}\n      isDragActive={isDragActive}\n      onBrowseButtonClick={open}\n      onClearButtonClick={onClearButtonClick}\n      onTextAreaClick={onClick}\n      onTextChange={onTextChange}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <input\n        /* hidden, necessary for react-dropzone */\n        {...inputProps}\n        ref={inputRef}\n      />\n      {children}\n    </FileUploadField>\n  );\n};\n\nFileUpload.displayName = \"FileUpload\";\n"],"names":["fileReaderType","readFile","fileHandle","type","resolve","reject","reader","FileUploadField","id","value","filename","onChange","onBrowseButtonClick","onClearButtonClick","onTextAreaClick","onTextChange","className","isDisabled","isReadOnly","isLoading","spinnerAriaValueText","isRequired","isDragActive","validated","ariaLabel","filenamePlaceholder","filenameAriaLabel","browseButtonText","clearButtonText","isClearButtonDisabled","containerRef","allowEditingUploadedText","hideDefaultPreview","children","props","onTextAreaChange","newValue","event","jsxs","css","styles","jsx","InputGroup","InputGroupItem","TextInput","Button","ButtonVariant","TextArea","TextAreResizeOrientation","Spinner","spinnerSize","FileUpload","onFileInputChange","onReadStarted","onReadFinished","onReadFailed","onClearClick","onClick","onDataChange","dropzoneProps","onDropAccepted","acceptedFiles","data","error","onDropRejected","rejectedFiles","setFileValue","getRootProps","getInputProps","open","inputRef","useDropzone","oldInputProps","inputProps","files","fromEvent"],"mappings":"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"}