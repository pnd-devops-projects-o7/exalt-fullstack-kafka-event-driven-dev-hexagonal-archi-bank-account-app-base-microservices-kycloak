{"version":3,"file":"MultiLineInput-lQlb7SN3.js","sources":["../../../../../../../src/components/multi-line-input/MultiLineInput.tsx"],"sourcesContent":["import {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  InputGroupItem,\n  TextInput,\n  TextInputProps,\n} from \"@patternfly/react-core\";\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { Fragment, useEffect, useMemo } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nfunction stringToMultiline(value?: string): string[] {\n  return typeof value === \"string\" ? value.split(\"##\") : [value || \"\"];\n}\n\nfunction toStringValue(formValue: string[]): string {\n  return formValue.join(\"##\");\n}\n\nexport type MultiLineInputProps = Omit<TextInputProps, \"form\"> & {\n  name: string;\n  addButtonLabel?: string;\n  isDisabled?: boolean;\n  defaultValue?: string[];\n  stringify?: boolean;\n  isRequired?: boolean;\n};\n\nexport const MultiLineInput = ({\n  name,\n  addButtonLabel,\n  isDisabled = false,\n  defaultValue,\n  stringify = false,\n  isRequired = false,\n  id,\n  ...rest\n}: MultiLineInputProps) => {\n  const { t } = useTranslation();\n  const { register, setValue, control } = useFormContext();\n  const value = useWatch({\n    name,\n    control,\n    defaultValue: defaultValue || \"\",\n  });\n\n  const fields = useMemo<string[]>(() => {\n    let values = stringify\n      ? stringToMultiline(\n          Array.isArray(value) && value.length === 1 ? value[0] : value,\n        )\n      : Array.isArray(value)\n        ? value\n        : [value];\n\n    if (!Array.isArray(values) || values.length === 0) {\n      values = (stringify\n        ? stringToMultiline(defaultValue as string)\n        : defaultValue) || [\"\"];\n    }\n\n    return values;\n  }, [value]);\n\n  const remove = (index: number) => {\n    update([...fields.slice(0, index), ...fields.slice(index + 1)]);\n  };\n\n  const append = () => {\n    update([...fields, \"\"]);\n  };\n\n  const updateValue = (index: number, value: string) => {\n    update([...fields.slice(0, index), value, ...fields.slice(index + 1)]);\n  };\n\n  const update = (values: string[]) => {\n    const fieldValue = values.flatMap((field) => field);\n    setValue(name, stringify ? toStringValue(fieldValue) : fieldValue, {\n      shouldDirty: true,\n      shouldValidate: true,\n    });\n  };\n\n  useEffect(() => {\n    register(name, {\n      validate: (value) =>\n        isRequired && toStringValue(value || []).length === 0\n          ? t(\"required\")\n          : undefined,\n    });\n  }, [register]);\n\n  return (\n    <div id={id}>\n      {fields.map((value, index) => (\n        <Fragment key={index}>\n          <InputGroup>\n            <InputGroupItem isFill>\n              <TextInput\n                data-testid={name + index}\n                onChange={(_event, value) => updateValue(index, value)}\n                name={`${name}.${index}.value`}\n                value={value}\n                isDisabled={isDisabled}\n                {...rest}\n              />\n            </InputGroupItem>\n            <InputGroupItem>\n              <Button\n                data-testid={\"remove\" + index}\n                variant={ButtonVariant.link}\n                onClick={() => remove(index)}\n                tabIndex={-1}\n                aria-label={t(\"remove\")}\n                isDisabled={fields.length === 1 || isDisabled}\n              >\n                <MinusCircleIcon />\n              </Button>\n            </InputGroupItem>\n          </InputGroup>\n          {index === fields.length - 1 && (\n            <Button\n              variant={ButtonVariant.link}\n              onClick={append}\n              tabIndex={-1}\n              aria-label={t(\"add\")}\n              data-testid=\"addValue\"\n              isDisabled={!value || isDisabled}\n            >\n              <PlusCircleIcon /> {t(addButtonLabel || \"add\")}\n            </Button>\n          )}\n        </Fragment>\n      ))}\n    </div>\n  );\n};\n"],"names":["stringToMultiline","value","toStringValue","formValue","MultiLineInput","name","addButtonLabel","isDisabled","defaultValue","stringify","isRequired","id","rest","t","useTranslation","register","setValue","control","useFormContext","useWatch","fields","useMemo","values","remove","index","update","append","updateValue","fieldValue","field","useEffect","jsx","jsxs","Fragment","InputGroup","InputGroupItem","TextInput","_event","Button","ButtonVariant","MinusCircleIcon","PlusCircleIcon"],"mappings":"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"}