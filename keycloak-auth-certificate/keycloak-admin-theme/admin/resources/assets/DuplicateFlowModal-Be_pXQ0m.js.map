{"version":3,"file":"DuplicateFlowModal-Be_pXQ0m.js","sources":["../../../../../../../../../../node_modules/.pnpm/@patternfly+react-icons@5.4.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-icons/dist/esm/icons/cog-icon.js","../../../../../../../src/authentication/constants.ts","../../../../../../../src/authentication/BindFlowDialog.tsx","../../../../../../../src/authentication/DuplicateFlowModal.tsx"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const CogIconConfig = {\n  name: 'CogIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M487.4 315.7l-42.6-24.6c4.3-23.2 4.3-47 0-70.2l42.6-24.6c4.9-2.8 7.1-8.6 5.5-14-11.1-35.6-30-67.8-54.7-94.6-3.8-4.1-10-5.1-14.8-2.3L380.8 110c-17.9-15.4-38.5-27.3-60.8-35.1V25.8c0-5.6-3.9-10.5-9.4-11.7-36.7-8.2-74.3-7.8-109.2 0-5.5 1.2-9.4 6.1-9.4 11.7V75c-22.2 7.9-42.8 19.8-60.8 35.1L88.7 85.5c-4.9-2.8-11-1.9-14.8 2.3-24.7 26.7-43.6 58.9-54.7 94.6-1.7 5.4.6 11.2 5.5 14L67.3 221c-4.3 23.2-4.3 47 0 70.2l-42.6 24.6c-4.9 2.8-7.1 8.6-5.5 14 11.1 35.6 30 67.8 54.7 94.6 3.8 4.1 10 5.1 14.8 2.3l42.6-24.6c17.9 15.4 38.5 27.3 60.8 35.1v49.2c0 5.6 3.9 10.5 9.4 11.7 36.7 8.2 74.3 7.8 109.2 0 5.5-1.2 9.4-6.1 9.4-11.7v-49.2c22.2-7.9 42.8-19.8 60.8-35.1l42.6 24.6c4.9 2.8 11 1.9 14.8-2.3 24.7-26.7 43.6-58.9 54.7-94.6 1.5-5.5-.7-11.3-5.6-14.1zM256 336c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CogIcon = createIcon(CogIconConfig);\n\nexport default CogIcon;","import AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\n\ntype UsedBy = \"SPECIFIC_CLIENTS\" | \"SPECIFIC_PROVIDERS\" | \"DEFAULT\";\n\nexport type AuthenticationType = AuthenticationFlowRepresentation & {\n  usedBy?: { type?: UsedBy; values: string[] };\n  realm: RealmRepresentation;\n};\n\nexport const REALM_FLOWS = new Map<string, string>([\n  [\"browserFlow\", \"browser\"],\n  [\"registrationFlow\", \"registration\"],\n  [\"directGrantFlow\", \"direct grant\"],\n  [\"resetCredentialsFlow\", \"reset credentials\"],\n  [\"clientAuthenticationFlow\", \"clients\"],\n  [\"dockerAuthenticationFlow\", \"docker auth\"],\n  [\"firstBrokerLoginFlow\", \"firstBrokerLogin\"],\n]);\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { SelectControl, useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { REALM_FLOWS } from \"./constants\";\n\ntype BindingForm = {\n  bindingType: keyof RealmRepresentation;\n};\n\ntype BindFlowDialogProps = {\n  flowAlias: string;\n  onClose: (used?: boolean) => void;\n};\n\nexport const BindFlowDialog = ({ flowAlias, onClose }: BindFlowDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const form = useForm<BindingForm>();\n  const { addAlert, addError } = useAlerts();\n  const { realm, realmRepresentation: realmRep, refresh } = useRealm();\n\n  const onSubmit = async ({ bindingType }: BindingForm) => {\n    try {\n      await adminClient.realms.update(\n        { realm },\n        { ...realmRep, [bindingType]: flowAlias },\n      );\n      refresh();\n      addAlert(t(\"updateFlowSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateFlowError\", error);\n    }\n\n    onClose(true);\n  };\n\n  const flowKeys = Array.from(REALM_FLOWS.keys());\n\n  return (\n    <Modal\n      title={t(\"bindFlow\")}\n      variant=\"small\"\n      onClose={() => onClose()}\n      actions={[\n        <Button key=\"confirm\" data-testid=\"save\" type=\"submit\" form=\"bind-form\">\n          {t(\"save\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => onClose()}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <Form id=\"bind-form\" isHorizontal onSubmit={form.handleSubmit(onSubmit)}>\n        <FormProvider {...form}>\n          <SelectControl\n            id=\"chooseBindingType\"\n            name=\"bindingType\"\n            label={t(\"chooseBindingType\")}\n            options={flowKeys\n              .filter((f) => f !== \"dockerAuthenticationFlow\")\n              .map((key) => ({\n                key,\n                value: t(`flow.${REALM_FLOWS.get(key)}`),\n              }))}\n            controller={{ defaultValue: flowKeys[0] }}\n            menuAppendTo=\"parent\"\n            aria-label={t(\"chooseBindingType\")}\n          />\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { NameDescription } from \"./form/NameDescription\";\nimport { toFlow } from \"./routes/Flow\";\n\ntype DuplicateFlowModalProps = {\n  name: string;\n  description: string;\n  toggleDialog: () => void;\n  onComplete: () => void;\n};\n\nexport const DuplicateFlowModal = ({\n  name,\n  description,\n  toggleDialog,\n  onComplete,\n}: DuplicateFlowModalProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const form = useForm<AuthenticationFlowRepresentation>({ mode: \"onChange\" });\n  const { setValue, getValues, handleSubmit } = form;\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  useEffect(() => {\n    setValue(\"alias\", t(\"copyOf\", { name }));\n    setValue(\"description\", description);\n  }, [name, description]);\n\n  const onSubmit = async () => {\n    const form = getValues();\n    try {\n      await adminClient.authenticationManagement.copyFlow({\n        flow: name,\n        newName: form.alias!,\n      });\n      const newFlow = (\n        await adminClient.authenticationManagement.getFlows()\n      ).find((flow) => flow.alias === form.alias)!;\n\n      if (form.description !== description) {\n        newFlow.description = form.description;\n        await adminClient.authenticationManagement.updateFlow(\n          { flowId: newFlow.id! },\n          newFlow,\n        );\n      }\n      addAlert(t(\"copyFlowSuccess\"), AlertVariant.success);\n      navigate(\n        toFlow({\n          realm,\n          id: newFlow.id!,\n          usedBy: \"notInUse\",\n          builtIn: newFlow.builtIn ? \"builtIn\" : undefined,\n        }),\n      );\n    } catch (error) {\n      addError(\"copyFlowError\", error);\n    }\n    onComplete();\n  };\n\n  return (\n    <Modal\n      title={t(\"duplicateFlow\")}\n      onClose={toggleDialog}\n      variant={ModalVariant.small}\n      actions={[\n        <Button\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          type=\"submit\"\n          form=\"duplicate-flow-form\"\n        >\n          {t(\"duplicate\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={toggleDialog}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <FormProvider {...form}>\n        <Form\n          id=\"duplicate-flow-form\"\n          onSubmit={handleSubmit(onSubmit)}\n          isHorizontal\n        >\n          <NameDescription />\n        </Form>\n      </FormProvider>\n    </Modal>\n  );\n};\n"],"names":["CogIconConfig","CogIcon","createIcon","REALM_FLOWS","BindFlowDialog","flowAlias","onClose","adminClient","useAdminClient","t","useTranslation","form","useForm","addAlert","addError","useAlerts","realm","realmRep","refresh","useRealm","onSubmit","bindingType","AlertVariant","error","flowKeys","jsx","Modal","Button","ButtonVariant","Form","FormProvider","SelectControl","f","key","DuplicateFlowModal","name","description","toggleDialog","onComplete","setValue","getValues","handleSubmit","navigate","useNavigate","useEffect","newFlow","flow","toFlow","ModalVariant","NameDescription"],"mappings":"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","x_google_ignoreList":[0]}