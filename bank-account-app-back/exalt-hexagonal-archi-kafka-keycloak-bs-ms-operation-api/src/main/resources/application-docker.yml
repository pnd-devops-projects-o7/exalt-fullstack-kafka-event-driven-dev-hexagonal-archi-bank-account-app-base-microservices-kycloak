spring:
  main:
    banner-mode: off
  application:
    name: ${OPERATION_API_APP_NAME}
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${DATABASE_HOSTNAME}:${DATABASE_HOST_PORT}/${OPERATION_API_DB}
    username: ${DATABASE_ROOT_USER}
    password: ${DATABASE_ROOT_PWD}

  jpa:
    hibernate:
      ddl-auto: none # disable JPA auto creation as using flyway
  # flyway config
  flyway:
    baseline-on-migrate: true
    validate-on-migrate: true
    enabled: true
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}

  # kafka brokers
  kafka:
    bootstrap-servers: http://kafka-server1:19092,http://kafka-server2:29092
    # schema registry config to define a common model of event for kafka producer and kafka consumer
    properties:
      schema:
        registry:
          url: http://schema-registry-service:8081
    # security config: urls for Keycloak authentication provider
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER}
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs
security:
  oauth2:
    converter:
      keycloak:
        backend-gateway-client-id: ${KEYCLOAK_BACKEND_GATEWAY_CLIENT_ID}
        public-angular-app-client-id: ${KEYCLOAK_ANGULAR_APP_CLIENT_ID}
# kafka topic configuration: duration time and size of message, topic partitions and topic replicas
kafka:
  topic-config:
    topic1: ${OPERATION_TOPIC1_NAME}
    topic2: ${OPERATION_TOPIC2_NAME}
    retention-config:
      duration: ${KAFKA_TOPIC_RETENTION_DURATION}

server:
  port: ${OPERATION_API_SERVER_PORT}

# actuator for exposing metrics
management:
  endpoints:
    web:
      exposure:
        include: prometheus, metrics, info, health, shutdown, beans
  endpoint:
    health:
      show-components: always
      probes:
        enabled: true # enable /actuator/health/liveness and /actuator/health/readiness for K8s
      show-details: always
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
  # zipkin
  zipkin:
    tracing:
      endpoint: http://grafana-zipkin-traces-distributor:9411/api/v2/spans

# the url to the registration service
eureka:
  client:
    service-url:
      defaultZone: http://${SERVICE_REGISTRY_API_APP_NAME}:${SERVICE_REGISTRY_API_SERVER_PORT}/eureka/

# remote clients needed by operation microservice
remote-client:
  client1:
    name: ${ROUTE1_ID}
    base-url: ${ROUTE1_URI}
    context-path: ${CONTEXT_PATH1}
  client2:
    name: ${ROUTE2_ID}
    base-url: ${ROUTE2_URI}
    context-path: ${CONTEXT_PATH2}